directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type BankAccount implements Node {
  id: ID!
  xid: Int!
}
"""A connection to a list of items."""
type BankAccountConnection {
  """A list of edges."""
  edges: [BankAccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BankAccountEdge {
  """The item at the end of the edge."""
  node: BankAccount
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for BankAccount connections"""
input BankAccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order BankAccounts."""
  field: BankAccountOrderField!
}
"""Properties by which BankAccount connections can be ordered."""
enum BankAccountOrderField {
  XID
}
"""
BankAccountWhereInput is used for filtering BankAccount objects.
Input was generated by ent.
"""
input BankAccountWhereInput {
  not: BankAccountWhereInput
  and: [BankAccountWhereInput!]
  or: [BankAccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """xid field predicates"""
  xid: Int
  xidNEQ: Int
  xidIn: [Int!]
  xidNotIn: [Int!]
  xidGT: Int
  xidGTE: Int
  xidLT: Int
  xidLTE: Int
}
type BlogPost implements Node {
  id: ID!
  title: String!
  content: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  author: [UserSeller!]
}
"""A connection to a list of items."""
type BlogPostConnection {
  """A list of edges."""
  edges: [BlogPostEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BlogPostEdge {
  """The item at the end of the edge."""
  node: BlogPost
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for BlogPost connections"""
input BlogPostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order BlogPosts."""
  field: BlogPostOrderField!
}
"""Properties by which BlogPost connections can be ordered."""
enum BlogPostOrderField {
  TITLE
  CONTENT
  DATECREATED
  DATEUPDATED
}
"""
BlogPostWhereInput is used for filtering BlogPost objects.
Input was generated by ent.
"""
input BlogPostWhereInput {
  not: BlogPostWhereInput
  and: [BlogPostWhereInput!]
  or: [BlogPostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserSellerWhereInput!]
}
type Category implements Node {
  id: ID!
  name: String!
  description: String!
  products: [Product!]
}
"""A connection to a list of items."""
type CategoryConnection {
  """A list of edges."""
  edges: [CategoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Category connections"""
input CategoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Categories."""
  field: CategoryOrderField!
}
"""Properties by which Category connections can be ordered."""
enum CategoryOrderField {
  NAME
  DESCRIPTION
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
}
type Chat implements Node {
  id: ID!
  xid: Int!
}
"""A connection to a list of items."""
type ChatConnection {
  """A list of edges."""
  edges: [ChatEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Chat connections"""
input ChatOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Chats."""
  field: ChatOrderField!
}
"""Properties by which Chat connections can be ordered."""
enum ChatOrderField {
  XID
}
"""
ChatWhereInput is used for filtering Chat objects.
Input was generated by ent.
"""
input ChatWhereInput {
  not: ChatWhereInput
  and: [ChatWhereInput!]
  or: [ChatWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """xid field predicates"""
  xid: Int
  xidNEQ: Int
  xidIn: [Int!]
  xidNotIn: [Int!]
  xidGT: Int
  xidGTE: Int
  xidLT: Int
  xidLTE: Int
}
type CommissionStructureSchema implements Node {
  id: ID!
  name: String!
  description: String!
  commissionvalue: String! @goField(name: "CommissionValue", forceResolver: false)
  commissionpercentage: String! @goField(name: "CommissionPercentage", forceResolver: false)
  productseller: [UserSeller!] @goField(name: "ProductSeller", forceResolver: false)
}
"""A connection to a list of items."""
type CommissionStructureSchemaConnection {
  """A list of edges."""
  edges: [CommissionStructureSchemaEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommissionStructureSchemaEdge {
  """The item at the end of the edge."""
  node: CommissionStructureSchema
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for CommissionStructureSchema connections"""
input CommissionStructureSchemaOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order CommissionStructureSchemas."""
  field: CommissionStructureSchemaOrderField!
}
"""Properties by which CommissionStructureSchema connections can be ordered."""
enum CommissionStructureSchemaOrderField {
  NAME
  DESCRIPTION
  COMMISSIONVALUE
  COMMISSIONPERCENTAGE
}
"""
CommissionStructureSchemaWhereInput is used for filtering CommissionStructureSchema objects.
Input was generated by ent.
"""
input CommissionStructureSchemaWhereInput {
  not: CommissionStructureSchemaWhereInput
  and: [CommissionStructureSchemaWhereInput!]
  or: [CommissionStructureSchemaWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """commissionValue field predicates"""
  commissionvalue: String
  commissionvalueNEQ: String
  commissionvalueIn: [String!]
  commissionvalueNotIn: [String!]
  commissionvalueGT: String
  commissionvalueGTE: String
  commissionvalueLT: String
  commissionvalueLTE: String
  commissionvalueContains: String
  commissionvalueHasPrefix: String
  commissionvalueHasSuffix: String
  commissionvalueEqualFold: String
  commissionvalueContainsFold: String
  """commissionPercentage field predicates"""
  commissionpercentage: String
  commissionpercentageNEQ: String
  commissionpercentageIn: [String!]
  commissionpercentageNotIn: [String!]
  commissionpercentageGT: String
  commissionpercentageGTE: String
  commissionpercentageLT: String
  commissionpercentageLTE: String
  commissionpercentageContains: String
  commissionpercentageHasPrefix: String
  commissionpercentageHasSuffix: String
  commissionpercentageEqualFold: String
  commissionpercentageContainsFold: String
  """productSeller edge predicates"""
  hasProductSeller: Boolean
  hasProductSellerWith: [UserSellerWhereInput!]
}
type ContentBlock implements Node {
  id: ID!
  primarymessage: String! @goField(name: "PrimaryMessage", forceResolver: false)
  secondarymessage: String! @goField(name: "SecondaryMessage", forceResolver: false)
  image: [Image!]
}
"""A connection to a list of items."""
type ContentBlockConnection {
  """A list of edges."""
  edges: [ContentBlockEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ContentBlockEdge {
  """The item at the end of the edge."""
  node: ContentBlock
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ContentBlock connections"""
input ContentBlockOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ContentBlocks."""
  field: ContentBlockOrderField!
}
"""Properties by which ContentBlock connections can be ordered."""
enum ContentBlockOrderField {
  PRIMARYMESSAGE
  SECONDARYMESSAGE
}
"""
ContentBlockWhereInput is used for filtering ContentBlock objects.
Input was generated by ent.
"""
input ContentBlockWhereInput {
  not: ContentBlockWhereInput
  and: [ContentBlockWhereInput!]
  or: [ContentBlockWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """primaryMessage field predicates"""
  primarymessage: String
  primarymessageNEQ: String
  primarymessageIn: [String!]
  primarymessageNotIn: [String!]
  primarymessageGT: String
  primarymessageGTE: String
  primarymessageLT: String
  primarymessageLTE: String
  primarymessageContains: String
  primarymessageHasPrefix: String
  primarymessageHasSuffix: String
  primarymessageEqualFold: String
  primarymessageContainsFold: String
  """secondaryMessage field predicates"""
  secondarymessage: String
  secondarymessageNEQ: String
  secondarymessageIn: [String!]
  secondarymessageNotIn: [String!]
  secondarymessageGT: String
  secondarymessageGTE: String
  secondarymessageLT: String
  secondarymessageLTE: String
  secondarymessageContains: String
  secondarymessageHasPrefix: String
  secondarymessageHasSuffix: String
  secondarymessageEqualFold: String
  secondarymessageContainsFold: String
  """image edge predicates"""
  hasImage: Boolean
  hasImageWith: [ImageWhereInput!]
}
"""
CreateBankAccountInput is used for create BankAccount object.
Input was generated by ent.
"""
input CreateBankAccountInput {
  xid: Int!
}
"""
CreateBlogPostInput is used for create BlogPost object.
Input was generated by ent.
"""
input CreateBlogPostInput {
  title: String!
  content: String!
  datecreated: String!
  dateupdated: String!
  authorIDs: [ID!]
}
"""
CreateCategoryInput is used for create Category object.
Input was generated by ent.
"""
input CreateCategoryInput {
  name: String!
  description: String!
  productIDs: [ID!]
}
"""
CreateChatInput is used for create Chat object.
Input was generated by ent.
"""
input CreateChatInput {
  xid: Int!
}
"""
CreateCommissionStructureSchemaInput is used for create CommissionStructureSchema object.
Input was generated by ent.
"""
input CreateCommissionStructureSchemaInput {
  name: String!
  description: String!
  commissionvalue: String!
  commissionpercentage: String!
  productsellerIDs: [ID!]
}
"""
CreateContentBlockInput is used for create ContentBlock object.
Input was generated by ent.
"""
input CreateContentBlockInput {
  primarymessage: String!
  secondarymessage: String!
  imageIDs: [ID!]
}
"""
CreateEmailCampaignInput is used for create EmailCampaign object.
Input was generated by ent.
"""
input CreateEmailCampaignInput {
  xid: Int!
}
"""
CreateGroupBuyInput is used for create GroupBuy object.
Input was generated by ent.
"""
input CreateGroupBuyInput {
  datecreated: String!
  productprice: Int!
  moq: Int!
  startdate: String!
  enddate: String!
  productIDs: [ID!]
  transactionIDs: [ID!]
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  name: String!
}
"""
CreateHeroContentInput is used for create HeroContent object.
Input was generated by ent.
"""
input CreateHeroContentInput {
  primarymessage: String!
  secondarymessage: String!
  imageIDs: [ID!]
}
"""
CreateImageInput is used for create Image object.
Input was generated by ent.
"""
input CreateImageInput {
  name: String!
  description: String!
  url: String!
}
"""
CreateLinkVisitInput is used for create LinkVisit object.
Input was generated by ent.
"""
input CreateLinkVisitInput {
  datecreated: String!
  ipaddress: String!
  salevalue: Int!
  commissionearned: Int!
}
"""
CreateMarketingCampaignInput is used for create MarketingCampaign object.
Input was generated by ent.
"""
input CreateMarketingCampaignInput {
  name: String!
  description: String!
  consumerpurchasevalue: String!
  customerapplicationlogic: String!
  initialisationlogic: String!
  startdate: String!
  enddate: String!
  datecreated: String!
  dateupdated: String!
  productIDs: [ID!]!
  consumerrewardIDs: [ID!]
}
"""
CreateNotificationInput is used for create Notification object.
Input was generated by ent.
"""
input CreateNotificationInput {
  title: String!
  content: String!
  datecreated: String
  dateupdated: String
  read: Boolean!
  recipientIDs: [ID!]
}
"""
CreatePaymentMethodInput is used for create PaymentMethod object.
Input was generated by ent.
"""
input CreatePaymentMethodInput {
  xid: Int!
}
"""
CreatePrimaryContentInput is used for create PrimaryContent object.
Input was generated by ent.
"""
input CreatePrimaryContentInput {
  placeholder: Int
  contentblockIDs: [ID!]
}
"""
CreateProductAttributeInput is used for create ProductAttribute object.
Input was generated by ent.
"""
input CreateProductAttributeInput {
  name: Int!
  description: Int!
  value: Int!
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  name: String!
  description: String!
  price: String!
  datecreated: String!
  dateupdated: String!
  productsellerIDs: [ID!]
  reviewIDs: [ID!]
  imageIDs: [ID!]
  categoryIDs: [ID!]
  tagIDs: [ID!]
  productattributeIDs: [ID!]
  variationIDs: [ID!]
  commissionstructureIDs: [ID!]
  shopIDs: [ID!]!
  groupbuyIDs: [ID!]
  productpageviewIDs: [ID!]
  blogpostIDs: [ID!]
  marketingcampaignIDs: [ID!]
  chatIDs: [ID!]
  emailcampaignIDs: [ID!]
}
"""
CreateProductPageViewInput is used for create ProductPageView object.
Input was generated by ent.
"""
input CreateProductPageViewInput {
  version: Int!
  herocontentIDs: [ID!]
  primarycontentIDs: [ID!]
  viewanalyticIDs: [ID!]
}
"""
CreateProductVariationInput is used for create ProductVariation object.
Input was generated by ent.
"""
input CreateProductVariationInput {
  name: String!
  description: String!
  price: String!
  productattributeIDs: [ID!]
}
"""
CreateReferralLinkInput is used for create ReferralLink object.
Input was generated by ent.
"""
input CreateReferralLinkInput {
  xid: Int!
  name: String!
  description: String!
  link: String!
  visitIDs: [ID!]
}
"""
CreateRefundTransactionsInput is used for create RefundTransactions object.
Input was generated by ent.
"""
input CreateRefundTransactionsInput {
  refundamount: String!
  refundcurrency: String!
  refundreason: String!
  refundstatus: String!
  datecreated: String!
  dateupdated: String!
  transactionIDs: [ID!]
}
"""
CreateReviewInput is used for create Review object.
Input was generated by ent.
"""
input CreateReviewInput {
  type: String!
  content: String!
  rating: String!
  datecreated: String!
  productIDs: [ID!]
  productcustomerIDs: [ID!]
}
"""
CreateRewardTypeInput is used for create RewardType object.
Input was generated by ent.
"""
input CreateRewardTypeInput {
  type: RewardTypeType!
  val: Int!
}
"""
CreateShippingAddressInput is used for create ShippingAddress object.
Input was generated by ent.
"""
input CreateShippingAddressInput {
  name: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String
  dateupdated: String
}
"""
CreateShopInput is used for create Shop object.
Input was generated by ent.
"""
input CreateShopInput {
  name: String!
  description: String!
  productIDs: [ID!]
  transactionIDs: [ID!]
  bankaccountIDs: [ID!]
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  name: String!
  description: String!
}
"""
CreateTransactionInput is used for create Transaction object.
Input was generated by ent.
"""
input CreateTransactionInput {
  datecreated: String!
  dateupdated: String!
  status: TransactionStatus
  paymentmethod: String!
  paymentstatus: String!
  paymentid: String!
  paymentamount: String!
  paymentcurrency: String!
  paymentdate: String!
  paymentfee: String!
  paymentnet: String!
  paymentpayeremail: String!
  paymentpayerfirstname: String!
  paymentpayerlastname: String!
  paymentpayerid: String!
  paymentpayerstatus: String!
  paymentreceiveremail: String!
  paymentreceiverid: String!
  paymenttax: String!
  paymenttransactionid: String!
  paymenttransactiontype: String!
  paymentpendingreason: String!
  paymentreasoncode: String!
  productIDs: [ID!]
  originlinkIDs: [ID!]
  productcustomerIDs: [ID!]
  shopIDs: [ID!]
  productinfluencerIDs: [ID!]
}
"""
CreateUserBuyerInput is used for create UserBuyer object.
Input was generated by ent.
"""
input CreateUserBuyerInput {
  placeholder: Int
  userprofileIDs: [ID!]
  reviewIDs: [ID!]
  transactionIDs: [ID!]
  linksclickedIDs: [ID!]
}
"""
CreateUserInfluencerInput is used for create UserInfluencer object.
Input was generated by ent.
"""
input CreateUserInfluencerInput {
  placeholder: Int
  userprofileIDs: [ID!]
  referrallinkIDs: [ID!]
  reviewIDs: [ID!]
  productIDs: [ID!]
  tagIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  email: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String
  dateupdated: String
  notificationIDs: [ID!]
  bankaccountIDs: [ID!]
  shippingaddressIDs: [ID!]
  paymentmethodIDs: [ID!]
}
"""
CreateUserSellerInput is used for create UserSeller object.
Input was generated by ent.
"""
input CreateUserSellerInput {
  brandname: String!
  userprofileIDs: [ID!]
  shopIDs: [ID!]
}
"""
CreateViewAnalyticsInput is used for create ViewAnalytics object.
Input was generated by ent.
"""
input CreateViewAnalyticsInput {
  views: Int!
  scrolls: Int!
  exits: Int!
  datecreated: String!
  productIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type EmailCampaign implements Node {
  id: ID!
  xid: Int!
}
"""A connection to a list of items."""
type EmailCampaignConnection {
  """A list of edges."""
  edges: [EmailCampaignEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EmailCampaignEdge {
  """The item at the end of the edge."""
  node: EmailCampaign
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for EmailCampaign connections"""
input EmailCampaignOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order EmailCampaigns."""
  field: EmailCampaignOrderField!
}
"""Properties by which EmailCampaign connections can be ordered."""
enum EmailCampaignOrderField {
  XID
}
"""
EmailCampaignWhereInput is used for filtering EmailCampaign objects.
Input was generated by ent.
"""
input EmailCampaignWhereInput {
  not: EmailCampaignWhereInput
  and: [EmailCampaignWhereInput!]
  or: [EmailCampaignWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """xid field predicates"""
  xid: Int
  xidNEQ: Int
  xidIn: [Int!]
  xidNotIn: [Int!]
  xidGT: Int
  xidGTE: Int
  xidLT: Int
  xidLTE: Int
}
type Group implements Node {
  id: ID!
  name: String!
}
type GroupBuy implements Node {
  id: ID!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  productprice: Int! @goField(name: "ProductPrice", forceResolver: false)
  moq: Int!
  startdate: String! @goField(name: "StartDate", forceResolver: false)
  enddate: String! @goField(name: "EndDate", forceResolver: false)
  product: [Product!]
  transaction: [Transaction!]
}
"""A connection to a list of items."""
type GroupBuyConnection {
  """A list of edges."""
  edges: [GroupBuyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupBuyEdge {
  """The item at the end of the edge."""
  node: GroupBuy
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GroupBuy connections"""
input GroupBuyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GroupBuys."""
  field: GroupBuyOrderField!
}
"""Properties by which GroupBuy connections can be ordered."""
enum GroupBuyOrderField {
  DATECREATED
  PRODUCTPRICE
  MOQ
  STARTDATE
  ENDDATE
}
"""
GroupBuyWhereInput is used for filtering GroupBuy objects.
Input was generated by ent.
"""
input GroupBuyWhereInput {
  not: GroupBuyWhereInput
  and: [GroupBuyWhereInput!]
  or: [GroupBuyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """productPrice field predicates"""
  productprice: Int
  productpriceNEQ: Int
  productpriceIn: [Int!]
  productpriceNotIn: [Int!]
  productpriceGT: Int
  productpriceGTE: Int
  productpriceLT: Int
  productpriceLTE: Int
  """moq field predicates"""
  moq: Int
  moqNEQ: Int
  moqIn: [Int!]
  moqNotIn: [Int!]
  moqGT: Int
  moqGTE: Int
  moqLT: Int
  moqLTE: Int
  """startDate field predicates"""
  startdate: String
  startdateNEQ: String
  startdateIn: [String!]
  startdateNotIn: [String!]
  startdateGT: String
  startdateGTE: String
  startdateLT: String
  startdateLTE: String
  startdateContains: String
  startdateHasPrefix: String
  startdateHasSuffix: String
  startdateEqualFold: String
  startdateContainsFold: String
  """endDate field predicates"""
  enddate: String
  enddateNEQ: String
  enddateIn: [String!]
  enddateNotIn: [String!]
  enddateGT: String
  enddateGTE: String
  enddateLT: String
  enddateLTE: String
  enddateContains: String
  enddateHasPrefix: String
  enddateHasSuffix: String
  enddateEqualFold: String
  enddateContainsFold: String
  """product edge predicates"""
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
  """transaction edge predicates"""
  hasTransaction: Boolean
  hasTransactionWith: [TransactionWhereInput!]
}
"""A connection to a list of items."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Group connections"""
input GroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Groups."""
  field: GroupOrderField!
}
"""Properties by which Group connections can be ordered."""
enum GroupOrderField {
  NAME
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type HeroContent implements Node {
  id: ID!
  primarymessage: String! @goField(name: "PrimaryMessage", forceResolver: false)
  secondarymessage: String! @goField(name: "SecondaryMessage", forceResolver: false)
  image: [Image!]
}
"""A connection to a list of items."""
type HeroContentConnection {
  """A list of edges."""
  edges: [HeroContentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type HeroContentEdge {
  """The item at the end of the edge."""
  node: HeroContent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for HeroContent connections"""
input HeroContentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order HeroContents."""
  field: HeroContentOrderField!
}
"""Properties by which HeroContent connections can be ordered."""
enum HeroContentOrderField {
  PRIMARYMESSAGE
  SECONDARYMESSAGE
}
"""
HeroContentWhereInput is used for filtering HeroContent objects.
Input was generated by ent.
"""
input HeroContentWhereInput {
  not: HeroContentWhereInput
  and: [HeroContentWhereInput!]
  or: [HeroContentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """primaryMessage field predicates"""
  primarymessage: String
  primarymessageNEQ: String
  primarymessageIn: [String!]
  primarymessageNotIn: [String!]
  primarymessageGT: String
  primarymessageGTE: String
  primarymessageLT: String
  primarymessageLTE: String
  primarymessageContains: String
  primarymessageHasPrefix: String
  primarymessageHasSuffix: String
  primarymessageEqualFold: String
  primarymessageContainsFold: String
  """secondaryMessage field predicates"""
  secondarymessage: String
  secondarymessageNEQ: String
  secondarymessageIn: [String!]
  secondarymessageNotIn: [String!]
  secondarymessageGT: String
  secondarymessageGTE: String
  secondarymessageLT: String
  secondarymessageLTE: String
  secondarymessageContains: String
  secondarymessageHasPrefix: String
  secondarymessageHasSuffix: String
  secondarymessageEqualFold: String
  secondarymessageContainsFold: String
  """image edge predicates"""
  hasImage: Boolean
  hasImageWith: [ImageWhereInput!]
}
type Image implements Node {
  id: ID!
  name: String!
  description: String!
  url: String!
}
"""A connection to a list of items."""
type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Image connections"""
input ImageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Images."""
  field: ImageOrderField!
}
"""Properties by which Image connections can be ordered."""
enum ImageOrderField {
  NAME
  DESCRIPTION
  URL
}
"""
ImageWhereInput is used for filtering Image objects.
Input was generated by ent.
"""
input ImageWhereInput {
  not: ImageWhereInput
  and: [ImageWhereInput!]
  or: [ImageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
}
type LinkVisit implements Node {
  id: ID!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  ipaddress: String! @goField(name: "IpAddress", forceResolver: false)
  salevalue: Int! @goField(name: "SaleValue", forceResolver: false)
  commissionearned: Int! @goField(name: "CommissionEarned", forceResolver: false)
}
"""A connection to a list of items."""
type LinkVisitConnection {
  """A list of edges."""
  edges: [LinkVisitEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LinkVisitEdge {
  """The item at the end of the edge."""
  node: LinkVisit
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for LinkVisit connections"""
input LinkVisitOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order LinkVisits."""
  field: LinkVisitOrderField!
}
"""Properties by which LinkVisit connections can be ordered."""
enum LinkVisitOrderField {
  DATECREATED
  IPADDRESS
  SALEVALUE
  COMMISSIONEARNED
}
"""
LinkVisitWhereInput is used for filtering LinkVisit objects.
Input was generated by ent.
"""
input LinkVisitWhereInput {
  not: LinkVisitWhereInput
  and: [LinkVisitWhereInput!]
  or: [LinkVisitWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """ipAddress field predicates"""
  ipaddress: String
  ipaddressNEQ: String
  ipaddressIn: [String!]
  ipaddressNotIn: [String!]
  ipaddressGT: String
  ipaddressGTE: String
  ipaddressLT: String
  ipaddressLTE: String
  ipaddressContains: String
  ipaddressHasPrefix: String
  ipaddressHasSuffix: String
  ipaddressEqualFold: String
  ipaddressContainsFold: String
  """saleValue field predicates"""
  salevalue: Int
  salevalueNEQ: Int
  salevalueIn: [Int!]
  salevalueNotIn: [Int!]
  salevalueGT: Int
  salevalueGTE: Int
  salevalueLT: Int
  salevalueLTE: Int
  """commissionEarned field predicates"""
  commissionearned: Int
  commissionearnedNEQ: Int
  commissionearnedIn: [Int!]
  commissionearnedNotIn: [Int!]
  commissionearnedGT: Int
  commissionearnedGTE: Int
  commissionearnedLT: Int
  commissionearnedLTE: Int
}
type MarketingCampaign implements Node {
  id: ID!
  name: String!
  description: String!
  consumerpurchasevalue: String! @goField(name: "ConsumerPurchaseValue", forceResolver: false)
  customerapplicationlogic: String! @goField(name: "CustomerApplicationLogic", forceResolver: false)
  initialisationlogic: String! @goField(name: "InitialisationLogic", forceResolver: false)
  startdate: String! @goField(name: "StartDate", forceResolver: false)
  enddate: String! @goField(name: "EndDate", forceResolver: false)
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  product: [Product!]!
  consumerreward: [RewardType!] @goField(name: "ConsumerReward", forceResolver: false)
}
"""A connection to a list of items."""
type MarketingCampaignConnection {
  """A list of edges."""
  edges: [MarketingCampaignEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MarketingCampaignEdge {
  """The item at the end of the edge."""
  node: MarketingCampaign
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for MarketingCampaign connections"""
input MarketingCampaignOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MarketingCampaigns."""
  field: MarketingCampaignOrderField!
}
"""Properties by which MarketingCampaign connections can be ordered."""
enum MarketingCampaignOrderField {
  NAME
  DESCRIPTION
  CONSUMERPURCHASEVALUE
  CUSTOMERAPPLICATIONLOGIC
  INITIALISATIONLOGIC
  STARTDATE
  ENDDATE
  DATECREATED
  DATEUPDATED
}
"""
MarketingCampaignWhereInput is used for filtering MarketingCampaign objects.
Input was generated by ent.
"""
input MarketingCampaignWhereInput {
  not: MarketingCampaignWhereInput
  and: [MarketingCampaignWhereInput!]
  or: [MarketingCampaignWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """consumerPurchaseValue field predicates"""
  consumerpurchasevalue: String
  consumerpurchasevalueNEQ: String
  consumerpurchasevalueIn: [String!]
  consumerpurchasevalueNotIn: [String!]
  consumerpurchasevalueGT: String
  consumerpurchasevalueGTE: String
  consumerpurchasevalueLT: String
  consumerpurchasevalueLTE: String
  consumerpurchasevalueContains: String
  consumerpurchasevalueHasPrefix: String
  consumerpurchasevalueHasSuffix: String
  consumerpurchasevalueEqualFold: String
  consumerpurchasevalueContainsFold: String
  """customerApplicationLogic field predicates"""
  customerapplicationlogic: String
  customerapplicationlogicNEQ: String
  customerapplicationlogicIn: [String!]
  customerapplicationlogicNotIn: [String!]
  customerapplicationlogicGT: String
  customerapplicationlogicGTE: String
  customerapplicationlogicLT: String
  customerapplicationlogicLTE: String
  customerapplicationlogicContains: String
  customerapplicationlogicHasPrefix: String
  customerapplicationlogicHasSuffix: String
  customerapplicationlogicEqualFold: String
  customerapplicationlogicContainsFold: String
  """initialisationLogic field predicates"""
  initialisationlogic: String
  initialisationlogicNEQ: String
  initialisationlogicIn: [String!]
  initialisationlogicNotIn: [String!]
  initialisationlogicGT: String
  initialisationlogicGTE: String
  initialisationlogicLT: String
  initialisationlogicLTE: String
  initialisationlogicContains: String
  initialisationlogicHasPrefix: String
  initialisationlogicHasSuffix: String
  initialisationlogicEqualFold: String
  initialisationlogicContainsFold: String
  """startDate field predicates"""
  startdate: String
  startdateNEQ: String
  startdateIn: [String!]
  startdateNotIn: [String!]
  startdateGT: String
  startdateGTE: String
  startdateLT: String
  startdateLTE: String
  startdateContains: String
  startdateHasPrefix: String
  startdateHasSuffix: String
  startdateEqualFold: String
  startdateContainsFold: String
  """endDate field predicates"""
  enddate: String
  enddateNEQ: String
  enddateIn: [String!]
  enddateNotIn: [String!]
  enddateGT: String
  enddateGTE: String
  enddateLT: String
  enddateLTE: String
  enddateContains: String
  enddateHasPrefix: String
  enddateHasSuffix: String
  enddateEqualFold: String
  enddateContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """product edge predicates"""
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
  """consumerReward edge predicates"""
  hasConsumerReward: Boolean
  hasConsumerRewardWith: [RewardTypeWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "entdemo/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Notification implements Node {
  id: ID!
  title: String!
  content: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  read: Boolean!
  recipient: [User!]
}
"""A connection to a list of items."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Notification connections"""
input NotificationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Notifications."""
  field: NotificationOrderField!
}
"""Properties by which Notification connections can be ordered."""
enum NotificationOrderField {
  TITLE
  CONTENT
  DATECREATED
  DATEUPDATED
  READ
}
"""
NotificationWhereInput is used for filtering Notification objects.
Input was generated by ent.
"""
input NotificationWhereInput {
  not: NotificationWhereInput
  and: [NotificationWhereInput!]
  or: [NotificationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """read field predicates"""
  read: Boolean
  readNEQ: Boolean
  """recipient edge predicates"""
  hasRecipient: Boolean
  hasRecipientWith: [UserWhereInput!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type PaymentMethod implements Node {
  id: ID!
  xid: Int!
}
"""A connection to a list of items."""
type PaymentMethodConnection {
  """A list of edges."""
  edges: [PaymentMethodEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PaymentMethodEdge {
  """The item at the end of the edge."""
  node: PaymentMethod
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for PaymentMethod connections"""
input PaymentMethodOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order PaymentMethods."""
  field: PaymentMethodOrderField!
}
"""Properties by which PaymentMethod connections can be ordered."""
enum PaymentMethodOrderField {
  XID
}
"""
PaymentMethodWhereInput is used for filtering PaymentMethod objects.
Input was generated by ent.
"""
input PaymentMethodWhereInput {
  not: PaymentMethodWhereInput
  and: [PaymentMethodWhereInput!]
  or: [PaymentMethodWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """xid field predicates"""
  xid: Int
  xidNEQ: Int
  xidIn: [Int!]
  xidNotIn: [Int!]
  xidGT: Int
  xidGTE: Int
  xidLT: Int
  xidLTE: Int
}
type PrimaryContent implements Node {
  id: ID!
  placeholder: Int
  contentblock: [ContentBlock!] @goField(name: "ContentBlock", forceResolver: false)
}
"""A connection to a list of items."""
type PrimaryContentConnection {
  """A list of edges."""
  edges: [PrimaryContentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PrimaryContentEdge {
  """The item at the end of the edge."""
  node: PrimaryContent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for PrimaryContent connections"""
input PrimaryContentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order PrimaryContents."""
  field: PrimaryContentOrderField!
}
"""Properties by which PrimaryContent connections can be ordered."""
enum PrimaryContentOrderField {
  PLACEHOLDER
}
"""
PrimaryContentWhereInput is used for filtering PrimaryContent objects.
Input was generated by ent.
"""
input PrimaryContentWhereInput {
  not: PrimaryContentWhereInput
  and: [PrimaryContentWhereInput!]
  or: [PrimaryContentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """placeholder field predicates"""
  placeholder: Int
  placeholderNEQ: Int
  placeholderIn: [Int!]
  placeholderNotIn: [Int!]
  placeholderGT: Int
  placeholderGTE: Int
  placeholderLT: Int
  placeholderLTE: Int
  placeholderIsNil: Boolean
  placeholderNotNil: Boolean
  """contentBlock edge predicates"""
  hasContentBlock: Boolean
  hasContentBlockWith: [ContentBlockWhereInput!]
}
type Product implements Node {
  id: ID!
  name: String!
  description: String!
  price: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  productseller: [UserSeller!] @goField(name: "ProductSeller", forceResolver: false)
  reviews: [Review!]
  images: [Image!]
  categories: [Category!]
  tags: [Tag!]
  productattributes: [ProductAttribute!] @goField(name: "ProductAttributes", forceResolver: false)
  variations: [ProductVariation!]
  commissionstructure: [CommissionStructureSchema!] @goField(name: "CommissionStructure", forceResolver: false)
  shop: [Shop!]!
  groupbuys: [GroupBuy!] @goField(name: "GroupBuys", forceResolver: false)
  productpageviews: [ProductPageView!] @goField(name: "ProductPageViews", forceResolver: false)
  blogposts: [BlogPost!] @goField(name: "BlogPosts", forceResolver: false)
  marketingcampaigns: [MarketingCampaign!] @goField(name: "MarketingCampaigns", forceResolver: false)
  chats: [Chat!]
  emailcampaign: [EmailCampaign!] @goField(name: "EmailCampaign", forceResolver: false)
}
type ProductAttribute implements Node {
  id: ID!
  name: Int!
  description: Int!
  value: Int!
}
"""A connection to a list of items."""
type ProductAttributeConnection {
  """A list of edges."""
  edges: [ProductAttributeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProductAttributeEdge {
  """The item at the end of the edge."""
  node: ProductAttribute
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProductAttribute connections"""
input ProductAttributeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProductAttributes."""
  field: ProductAttributeOrderField!
}
"""Properties by which ProductAttribute connections can be ordered."""
enum ProductAttributeOrderField {
  NAME
  DESCRIPTION
  VALUE
}
"""
ProductAttributeWhereInput is used for filtering ProductAttribute objects.
Input was generated by ent.
"""
input ProductAttributeWhereInput {
  not: ProductAttributeWhereInput
  and: [ProductAttributeWhereInput!]
  or: [ProductAttributeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: Int
  nameNEQ: Int
  nameIn: [Int!]
  nameNotIn: [Int!]
  nameGT: Int
  nameGTE: Int
  nameLT: Int
  nameLTE: Int
  """description field predicates"""
  description: Int
  descriptionNEQ: Int
  descriptionIn: [Int!]
  descriptionNotIn: [Int!]
  descriptionGT: Int
  descriptionGTE: Int
  descriptionLT: Int
  descriptionLTE: Int
  """value field predicates"""
  value: Int
  valueNEQ: Int
  valueIn: [Int!]
  valueNotIn: [Int!]
  valueGT: Int
  valueGTE: Int
  valueLT: Int
  valueLTE: Int
}
"""A connection to a list of items."""
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Product connections"""
input ProductOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Products."""
  field: ProductOrderField!
}
"""Properties by which Product connections can be ordered."""
enum ProductOrderField {
  NAME
  DESCRIPTION
  PRICE
  DATECREATED
  DATEUPDATED
}
type ProductPageView implements Node {
  id: ID!
  version: Int!
  herocontent: [HeroContent!] @goField(name: "HeroContent", forceResolver: false)
  primarycontent: [PrimaryContent!] @goField(name: "PrimaryContent", forceResolver: false)
  viewanalytics: [ViewAnalytics!] @goField(name: "ViewAnalytics", forceResolver: false)
}
"""A connection to a list of items."""
type ProductPageViewConnection {
  """A list of edges."""
  edges: [ProductPageViewEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProductPageViewEdge {
  """The item at the end of the edge."""
  node: ProductPageView
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProductPageView connections"""
input ProductPageViewOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProductPageViews."""
  field: ProductPageViewOrderField!
}
"""Properties by which ProductPageView connections can be ordered."""
enum ProductPageViewOrderField {
  VERSION
}
"""
ProductPageViewWhereInput is used for filtering ProductPageView objects.
Input was generated by ent.
"""
input ProductPageViewWhereInput {
  not: ProductPageViewWhereInput
  and: [ProductPageViewWhereInput!]
  or: [ProductPageViewWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """version field predicates"""
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int
  """heroContent edge predicates"""
  hasHeroContent: Boolean
  hasHeroContentWith: [HeroContentWhereInput!]
  """primaryContent edge predicates"""
  hasPrimaryContent: Boolean
  hasPrimaryContentWith: [PrimaryContentWhereInput!]
  """viewAnalytics edge predicates"""
  hasViewAnalytics: Boolean
  hasViewAnalyticsWith: [ViewAnalyticsWhereInput!]
}
type ProductVariation implements Node {
  id: ID!
  name: String!
  description: String!
  price: String!
  productattributes: [ProductAttribute!] @goField(name: "ProductAttributes", forceResolver: false)
}
"""A connection to a list of items."""
type ProductVariationConnection {
  """A list of edges."""
  edges: [ProductVariationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProductVariationEdge {
  """The item at the end of the edge."""
  node: ProductVariation
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProductVariation connections"""
input ProductVariationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProductVariations."""
  field: ProductVariationOrderField!
}
"""Properties by which ProductVariation connections can be ordered."""
enum ProductVariationOrderField {
  NAME
  DESCRIPTION
  PRICE
}
"""
ProductVariationWhereInput is used for filtering ProductVariation objects.
Input was generated by ent.
"""
input ProductVariationWhereInput {
  not: ProductVariationWhereInput
  and: [ProductVariationWhereInput!]
  or: [ProductVariationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """price field predicates"""
  price: String
  priceNEQ: String
  priceIn: [String!]
  priceNotIn: [String!]
  priceGT: String
  priceGTE: String
  priceLT: String
  priceLTE: String
  priceContains: String
  priceHasPrefix: String
  priceHasSuffix: String
  priceEqualFold: String
  priceContainsFold: String
  """productAttributes edge predicates"""
  hasProductAttributes: Boolean
  hasProductAttributesWith: [ProductAttributeWhereInput!]
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """price field predicates"""
  price: String
  priceNEQ: String
  priceIn: [String!]
  priceNotIn: [String!]
  priceGT: String
  priceGTE: String
  priceLT: String
  priceLTE: String
  priceContains: String
  priceHasPrefix: String
  priceHasSuffix: String
  priceEqualFold: String
  priceContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """productSeller edge predicates"""
  hasProductSeller: Boolean
  hasProductSellerWith: [UserSellerWhereInput!]
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [ReviewWhereInput!]
  """images edge predicates"""
  hasImages: Boolean
  hasImagesWith: [ImageWhereInput!]
  """categories edge predicates"""
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """productAttributes edge predicates"""
  hasProductAttributes: Boolean
  hasProductAttributesWith: [ProductAttributeWhereInput!]
  """variations edge predicates"""
  hasVariations: Boolean
  hasVariationsWith: [ProductVariationWhereInput!]
  """commissionStructure edge predicates"""
  hasCommissionStructure: Boolean
  hasCommissionStructureWith: [CommissionStructureSchemaWhereInput!]
  """shop edge predicates"""
  hasShop: Boolean
  hasShopWith: [ShopWhereInput!]
  """groupBuys edge predicates"""
  hasGroupBuys: Boolean
  hasGroupBuysWith: [GroupBuyWhereInput!]
  """productPageViews edge predicates"""
  hasProductPageViews: Boolean
  hasProductPageViewsWith: [ProductPageViewWhereInput!]
  """blogPosts edge predicates"""
  hasBlogPosts: Boolean
  hasBlogPostsWith: [BlogPostWhereInput!]
  """marketingCampaigns edge predicates"""
  hasMarketingCampaigns: Boolean
  hasMarketingCampaignsWith: [MarketingCampaignWhereInput!]
  """chats edge predicates"""
  hasChats: Boolean
  hasChatsWith: [ChatWhereInput!]
  """emailCampaign edge predicates"""
  hasEmailCampaign: Boolean
  hasEmailCampaignWith: [EmailCampaignWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  bankAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for BankAccounts returned from the connection."""
    orderBy: [BankAccountOrder!]

    """Filtering options for BankAccounts returned from the connection."""
    where: BankAccountWhereInput
  ): BankAccountConnection!
  blogPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for BlogPosts returned from the connection."""
    orderBy: [BlogPostOrder!]

    """Filtering options for BlogPosts returned from the connection."""
    where: BlogPostWhereInput
  ): BlogPostConnection!
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Categories returned from the connection."""
    orderBy: [CategoryOrder!]

    """Filtering options for Categories returned from the connection."""
    where: CategoryWhereInput
  ): CategoryConnection!
  chats(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Chats returned from the connection."""
    orderBy: [ChatOrder!]

    """Filtering options for Chats returned from the connection."""
    where: ChatWhereInput
  ): ChatConnection!
  commissionStructureSchemas(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for CommissionStructureSchemas returned from the connection."""
    orderBy: [CommissionStructureSchemaOrder!]

    """Filtering options for CommissionStructureSchemas returned from the connection."""
    where: CommissionStructureSchemaWhereInput
  ): CommissionStructureSchemaConnection!
  contentBlocks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ContentBlocks returned from the connection."""
    orderBy: [ContentBlockOrder!]

    """Filtering options for ContentBlocks returned from the connection."""
    where: ContentBlockWhereInput
  ): ContentBlockConnection!
  emailCampaigns(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for EmailCampaigns returned from the connection."""
    orderBy: [EmailCampaignOrder!]

    """Filtering options for EmailCampaigns returned from the connection."""
    where: EmailCampaignWhereInput
  ): EmailCampaignConnection!
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Groups returned from the connection."""
    orderBy: [GroupOrder!]

    """Filtering options for Groups returned from the connection."""
    where: GroupWhereInput
  ): GroupConnection!
  groupBuys(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GroupBuys returned from the connection."""
    orderBy: [GroupBuyOrder!]

    """Filtering options for GroupBuys returned from the connection."""
    where: GroupBuyWhereInput
  ): GroupBuyConnection!
  heroContents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for HeroContents returned from the connection."""
    orderBy: [HeroContentOrder!]

    """Filtering options for HeroContents returned from the connection."""
    where: HeroContentWhereInput
  ): HeroContentConnection!
  images(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Images returned from the connection."""
    orderBy: [ImageOrder!]

    """Filtering options for Images returned from the connection."""
    where: ImageWhereInput
  ): ImageConnection!
  linkVisits(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LinkVisits returned from the connection."""
    orderBy: [LinkVisitOrder!]

    """Filtering options for LinkVisits returned from the connection."""
    where: LinkVisitWhereInput
  ): LinkVisitConnection!
  marketingCampaigns(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for MarketingCampaigns returned from the connection."""
    orderBy: [MarketingCampaignOrder!]

    """Filtering options for MarketingCampaigns returned from the connection."""
    where: MarketingCampaignWhereInput
  ): MarketingCampaignConnection!
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Notifications returned from the connection."""
    orderBy: [NotificationOrder!]

    """Filtering options for Notifications returned from the connection."""
    where: NotificationWhereInput
  ): NotificationConnection!
  paymentMethods(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for PaymentMethods returned from the connection."""
    orderBy: [PaymentMethodOrder!]

    """Filtering options for PaymentMethods returned from the connection."""
    where: PaymentMethodWhereInput
  ): PaymentMethodConnection!
  primaryContents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for PrimaryContents returned from the connection."""
    orderBy: [PrimaryContentOrder!]

    """Filtering options for PrimaryContents returned from the connection."""
    where: PrimaryContentWhereInput
  ): PrimaryContentConnection!
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Products returned from the connection."""
    orderBy: [ProductOrder!]

    """Filtering options for Products returned from the connection."""
    where: ProductWhereInput
  ): ProductConnection!
  productAttributes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProductAttributes returned from the connection."""
    orderBy: [ProductAttributeOrder!]

    """Filtering options for ProductAttributes returned from the connection."""
    where: ProductAttributeWhereInput
  ): ProductAttributeConnection!
  productPageViews(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProductPageViews returned from the connection."""
    orderBy: [ProductPageViewOrder!]

    """Filtering options for ProductPageViews returned from the connection."""
    where: ProductPageViewWhereInput
  ): ProductPageViewConnection!
  productVariations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProductVariations returned from the connection."""
    orderBy: [ProductVariationOrder!]

    """Filtering options for ProductVariations returned from the connection."""
    where: ProductVariationWhereInput
  ): ProductVariationConnection!
  referralLinks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ReferralLinks returned from the connection."""
    orderBy: [ReferralLinkOrder!]

    """Filtering options for ReferralLinks returned from the connection."""
    where: ReferralLinkWhereInput
  ): ReferralLinkConnection!
  refundTransactionsSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RefundTransactionsSlice returned from the connection."""
    orderBy: [RefundTransactionsOrder!]

    """Filtering options for RefundTransactionsSlice returned from the connection."""
    where: RefundTransactionsWhereInput
  ): RefundTransactionsConnection!
  reviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Reviews returned from the connection."""
    orderBy: [ReviewOrder!]

    """Filtering options for Reviews returned from the connection."""
    where: ReviewWhereInput
  ): ReviewConnection!
  rewardTypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RewardTypes returned from the connection."""
    orderBy: [RewardTypeOrder!]

    """Filtering options for RewardTypes returned from the connection."""
    where: RewardTypeWhereInput
  ): RewardTypeConnection!
  shippingAddresses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ShippingAddresses returned from the connection."""
    orderBy: [ShippingAddressOrder!]

    """Filtering options for ShippingAddresses returned from the connection."""
    where: ShippingAddressWhereInput
  ): ShippingAddressConnection!
  shops(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Shops returned from the connection."""
    orderBy: [ShopOrder!]

    """Filtering options for Shops returned from the connection."""
    where: ShopWhereInput
  ): ShopConnection!
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tags returned from the connection."""
    orderBy: [TagOrder!]

    """Filtering options for Tags returned from the connection."""
    where: TagWhereInput
  ): TagConnection!
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: [TransactionOrder!]

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: [UserOrder!]

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  userBuyers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for UserBuyers returned from the connection."""
    orderBy: [UserBuyerOrder!]

    """Filtering options for UserBuyers returned from the connection."""
    where: UserBuyerWhereInput
  ): UserBuyerConnection!
  userInfluencers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for UserInfluencers returned from the connection."""
    orderBy: [UserInfluencerOrder!]

    """Filtering options for UserInfluencers returned from the connection."""
    where: UserInfluencerWhereInput
  ): UserInfluencerConnection!
  userSellers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for UserSellers returned from the connection."""
    orderBy: [UserSellerOrder!]

    """Filtering options for UserSellers returned from the connection."""
    where: UserSellerWhereInput
  ): UserSellerConnection!
  viewAnalyticsSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ViewAnalyticsSlice returned from the connection."""
    orderBy: [ViewAnalyticsOrder!]

    """Filtering options for ViewAnalyticsSlice returned from the connection."""
    where: ViewAnalyticsWhereInput
  ): ViewAnalyticsConnection!
}
type ReferralLink implements Node {
  id: ID!
  xid: Int!
  name: String!
  description: String!
  link: String!
  visits: [LinkVisit!]
}
"""A connection to a list of items."""
type ReferralLinkConnection {
  """A list of edges."""
  edges: [ReferralLinkEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ReferralLinkEdge {
  """The item at the end of the edge."""
  node: ReferralLink
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ReferralLink connections"""
input ReferralLinkOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ReferralLinks."""
  field: ReferralLinkOrderField!
}
"""Properties by which ReferralLink connections can be ordered."""
enum ReferralLinkOrderField {
  XID
  NAME
  DESCRIPTION
  LINK
}
"""
ReferralLinkWhereInput is used for filtering ReferralLink objects.
Input was generated by ent.
"""
input ReferralLinkWhereInput {
  not: ReferralLinkWhereInput
  and: [ReferralLinkWhereInput!]
  or: [ReferralLinkWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """xid field predicates"""
  xid: Int
  xidNEQ: Int
  xidIn: [Int!]
  xidNotIn: [Int!]
  xidGT: Int
  xidGTE: Int
  xidLT: Int
  xidLTE: Int
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """link field predicates"""
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkEqualFold: String
  linkContainsFold: String
  """visits edge predicates"""
  hasVisits: Boolean
  hasVisitsWith: [LinkVisitWhereInput!]
}
type RefundTransactions implements Node {
  id: ID!
  refundamount: String! @goField(name: "RefundAmount", forceResolver: false)
  refundcurrency: String! @goField(name: "RefundCurrency", forceResolver: false)
  refundreason: String! @goField(name: "RefundReason", forceResolver: false)
  refundstatus: String! @goField(name: "RefundStatus", forceResolver: false)
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  transaction: [Transaction!]
}
"""A connection to a list of items."""
type RefundTransactionsConnection {
  """A list of edges."""
  edges: [RefundTransactionsEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RefundTransactionsEdge {
  """The item at the end of the edge."""
  node: RefundTransactions
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for RefundTransactions connections"""
input RefundTransactionsOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RefundTransactionsSlice."""
  field: RefundTransactionsOrderField!
}
"""Properties by which RefundTransactions connections can be ordered."""
enum RefundTransactionsOrderField {
  REFUNDAMOUNT
  REFUNDCURRENCY
  REFUNDREASON
  REFUNDSTATUS
  DATECREATED
  DATEUPDATED
}
"""
RefundTransactionsWhereInput is used for filtering RefundTransactions objects.
Input was generated by ent.
"""
input RefundTransactionsWhereInput {
  not: RefundTransactionsWhereInput
  and: [RefundTransactionsWhereInput!]
  or: [RefundTransactionsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """refundAmount field predicates"""
  refundamount: String
  refundamountNEQ: String
  refundamountIn: [String!]
  refundamountNotIn: [String!]
  refundamountGT: String
  refundamountGTE: String
  refundamountLT: String
  refundamountLTE: String
  refundamountContains: String
  refundamountHasPrefix: String
  refundamountHasSuffix: String
  refundamountEqualFold: String
  refundamountContainsFold: String
  """refundCurrency field predicates"""
  refundcurrency: String
  refundcurrencyNEQ: String
  refundcurrencyIn: [String!]
  refundcurrencyNotIn: [String!]
  refundcurrencyGT: String
  refundcurrencyGTE: String
  refundcurrencyLT: String
  refundcurrencyLTE: String
  refundcurrencyContains: String
  refundcurrencyHasPrefix: String
  refundcurrencyHasSuffix: String
  refundcurrencyEqualFold: String
  refundcurrencyContainsFold: String
  """refundReason field predicates"""
  refundreason: String
  refundreasonNEQ: String
  refundreasonIn: [String!]
  refundreasonNotIn: [String!]
  refundreasonGT: String
  refundreasonGTE: String
  refundreasonLT: String
  refundreasonLTE: String
  refundreasonContains: String
  refundreasonHasPrefix: String
  refundreasonHasSuffix: String
  refundreasonEqualFold: String
  refundreasonContainsFold: String
  """refundStatus field predicates"""
  refundstatus: String
  refundstatusNEQ: String
  refundstatusIn: [String!]
  refundstatusNotIn: [String!]
  refundstatusGT: String
  refundstatusGTE: String
  refundstatusLT: String
  refundstatusLTE: String
  refundstatusContains: String
  refundstatusHasPrefix: String
  refundstatusHasSuffix: String
  refundstatusEqualFold: String
  refundstatusContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """transaction edge predicates"""
  hasTransaction: Boolean
  hasTransactionWith: [TransactionWhereInput!]
}
type Review implements Node {
  id: ID!
  type: String!
  content: String!
  rating: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  product: [Product!]
  productcustomer: [UserBuyer!] @goField(name: "ProductCustomer", forceResolver: false)
}
"""A connection to a list of items."""
type ReviewConnection {
  """A list of edges."""
  edges: [ReviewEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Review connections"""
input ReviewOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Reviews."""
  field: ReviewOrderField!
}
"""Properties by which Review connections can be ordered."""
enum ReviewOrderField {
  TYPE
  CONTENT
  RATING
  DATECREATED
}
"""
ReviewWhereInput is used for filtering Review objects.
Input was generated by ent.
"""
input ReviewWhereInput {
  not: ReviewWhereInput
  and: [ReviewWhereInput!]
  or: [ReviewWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """rating field predicates"""
  rating: String
  ratingNEQ: String
  ratingIn: [String!]
  ratingNotIn: [String!]
  ratingGT: String
  ratingGTE: String
  ratingLT: String
  ratingLTE: String
  ratingContains: String
  ratingHasPrefix: String
  ratingHasSuffix: String
  ratingEqualFold: String
  ratingContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """product edge predicates"""
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
  """productCustomer edge predicates"""
  hasProductCustomer: Boolean
  hasProductCustomerWith: [UserBuyerWhereInput!]
}
type RewardType implements Node {
  id: ID!
  type: RewardTypeType!
  val: Int!
}
"""A connection to a list of items."""
type RewardTypeConnection {
  """A list of edges."""
  edges: [RewardTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RewardTypeEdge {
  """The item at the end of the edge."""
  node: RewardType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for RewardType connections"""
input RewardTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RewardTypes."""
  field: RewardTypeOrderField!
}
"""Properties by which RewardType connections can be ordered."""
enum RewardTypeOrderField {
  TYPE
  VAL
}
"""RewardTypeType is enum for the field type"""
enum RewardTypeType @goModel(model: "entdemo/ent/rewardtype.Type") {
  DISCOUNT
  FREE_PRODUCT
  SHIPPING_DISCOUNT
}
"""
RewardTypeWhereInput is used for filtering RewardType objects.
Input was generated by ent.
"""
input RewardTypeWhereInput {
  not: RewardTypeWhereInput
  and: [RewardTypeWhereInput!]
  or: [RewardTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """type field predicates"""
  type: RewardTypeType
  typeNEQ: RewardTypeType
  typeIn: [RewardTypeType!]
  typeNotIn: [RewardTypeType!]
  """val field predicates"""
  val: Int
  valNEQ: Int
  valIn: [Int!]
  valNotIn: [Int!]
  valGT: Int
  valGTE: Int
  valLT: Int
  valLTE: Int
}
type ShippingAddress implements Node {
  id: ID!
  name: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
}
"""A connection to a list of items."""
type ShippingAddressConnection {
  """A list of edges."""
  edges: [ShippingAddressEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ShippingAddressEdge {
  """The item at the end of the edge."""
  node: ShippingAddress
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ShippingAddress connections"""
input ShippingAddressOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ShippingAddresses."""
  field: ShippingAddressOrderField!
}
"""Properties by which ShippingAddress connections can be ordered."""
enum ShippingAddressOrderField {
  NAME
  ADDRESS
  CITY
  STATE
  ZIP
  COUNTRY
  DATECREATED
  DATEUPDATED
}
"""
ShippingAddressWhereInput is used for filtering ShippingAddress objects.
Input was generated by ent.
"""
input ShippingAddressWhereInput {
  not: ShippingAddressWhereInput
  and: [ShippingAddressWhereInput!]
  or: [ShippingAddressWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """city field predicates"""
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateEqualFold: String
  stateContainsFold: String
  """zip field predicates"""
  zip: String
  zipNEQ: String
  zipIn: [String!]
  zipNotIn: [String!]
  zipGT: String
  zipGTE: String
  zipLT: String
  zipLTE: String
  zipContains: String
  zipHasPrefix: String
  zipHasSuffix: String
  zipEqualFold: String
  zipContainsFold: String
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
}
type Shop implements Node {
  id: ID!
  name: String!
  description: String!
  products: [Product!]
  transactions: [Transaction!]
  bankaccounts: [BankAccount!] @goField(name: "BankAccounts", forceResolver: false)
}
"""A connection to a list of items."""
type ShopConnection {
  """A list of edges."""
  edges: [ShopEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ShopEdge {
  """The item at the end of the edge."""
  node: Shop
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Shop connections"""
input ShopOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Shops."""
  field: ShopOrderField!
}
"""Properties by which Shop connections can be ordered."""
enum ShopOrderField {
  NAME
  DESCRIPTION
}
"""
ShopWhereInput is used for filtering Shop objects.
Input was generated by ent.
"""
input ShopWhereInput {
  not: ShopWhereInput
  and: [ShopWhereInput!]
  or: [ShopWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
  """bankAccounts edge predicates"""
  hasBankAccounts: Boolean
  hasBankAccountsWith: [BankAccountWhereInput!]
}
type Tag implements Node {
  id: ID!
  name: String!
  description: String!
}
"""A connection to a list of items."""
type TagConnection {
  """A list of edges."""
  edges: [TagEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
  DESCRIPTION
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
}
type Transaction implements Node {
  id: ID!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  status: TransactionStatus!
  paymentmethod: String! @goField(name: "PaymentMethod", forceResolver: false)
  paymentstatus: String! @goField(name: "PaymentStatus", forceResolver: false)
  paymentid: String! @goField(name: "PaymentId", forceResolver: false)
  paymentamount: String! @goField(name: "PaymentAmount", forceResolver: false)
  paymentcurrency: String! @goField(name: "PaymentCurrency", forceResolver: false)
  paymentdate: String! @goField(name: "PaymentDate", forceResolver: false)
  paymentfee: String! @goField(name: "PaymentFee", forceResolver: false)
  paymentnet: String! @goField(name: "PaymentNet", forceResolver: false)
  paymentpayeremail: String! @goField(name: "PaymentPayerEmail", forceResolver: false)
  paymentpayerfirstname: String! @goField(name: "PaymentPayerFirstName", forceResolver: false)
  paymentpayerlastname: String! @goField(name: "PaymentPayerLastName", forceResolver: false)
  paymentpayerid: String! @goField(name: "PaymentPayerId", forceResolver: false)
  paymentpayerstatus: String! @goField(name: "PaymentPayerStatus", forceResolver: false)
  paymentreceiveremail: String! @goField(name: "PaymentReceiverEmail", forceResolver: false)
  paymentreceiverid: String! @goField(name: "PaymentReceiverId", forceResolver: false)
  paymenttax: String! @goField(name: "PaymentTax", forceResolver: false)
  paymenttransactionid: String! @goField(name: "PaymentTransactionId", forceResolver: false)
  paymenttransactiontype: String! @goField(name: "PaymentTransactionType", forceResolver: false)
  paymentpendingreason: String! @goField(name: "PaymentPendingReason", forceResolver: false)
  paymentreasoncode: String! @goField(name: "PaymentReasonCode", forceResolver: false)
  product: [Product!]
  originlink: [LinkVisit!] @goField(name: "OriginLink", forceResolver: false)
  productcustomer: [UserBuyer!] @goField(name: "ProductCustomer", forceResolver: false)
  shop: [Shop!]
  productinfluencer: [UserInfluencer!] @goField(name: "ProductInfluencer", forceResolver: false)
}
"""A connection to a list of items."""
type TransactionConnection {
  """A list of edges."""
  edges: [TransactionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Transaction connections"""
input TransactionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Transactions."""
  field: TransactionOrderField!
}
"""Properties by which Transaction connections can be ordered."""
enum TransactionOrderField {
  DATECREATED
  DATEUPDATED
  STATUS
  PAYMENTMETHOD
  PAYMENTSTATUS
  PAYMENTID
  PAYMENTAMOUNT
  PAYMENTCURRENCY
  PAYMENTDATE
  PAYMENTFEE
  PAYMENTNET
  PAYMENTPAYEREMAIL
  PAYMENTPAYERFIRSTNAME
  PAYMENTPAYERLASTNAME
  PAYMENTPAYERID
  PAYMENTPAYERSTATUS
  PAYMENTRECEIVEREMAIL
  PAYMENTRECEIVERID
  PAYMENTTAX
  PAYMENTTRANSACTIONID
  PAYMENTTRANSACTIONTYPE
  PAYMENTPENDINGREASON
  PAYMENTREASONCODE
}
"""TransactionStatus is enum for the field status"""
enum TransactionStatus @goModel(model: "entdemo/ent/transaction.Status") {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  DENIED
  FAILED
  EXPIRED
  VOIDED
  REVERSED
  PROCESSED
  PARTIALLY_REFUNDED
  PARTIALLY_REVERSED
  PARTIALLY_VOIDED
  PARTIALLY_PROCESSED
  PARTIALLY_COMPLETED
  PARTIALLY_CANCELLED
  PARTIALLY_DENIED
  PARTIALLY_FAILED
  PARTIALLY_EXPIRED
}
"""
TransactionWhereInput is used for filtering Transaction objects.
Input was generated by ent.
"""
input TransactionWhereInput {
  not: TransactionWhereInput
  and: [TransactionWhereInput!]
  or: [TransactionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """status field predicates"""
  status: TransactionStatus
  statusNEQ: TransactionStatus
  statusIn: [TransactionStatus!]
  statusNotIn: [TransactionStatus!]
  """paymentMethod field predicates"""
  paymentmethod: String
  paymentmethodNEQ: String
  paymentmethodIn: [String!]
  paymentmethodNotIn: [String!]
  paymentmethodGT: String
  paymentmethodGTE: String
  paymentmethodLT: String
  paymentmethodLTE: String
  paymentmethodContains: String
  paymentmethodHasPrefix: String
  paymentmethodHasSuffix: String
  paymentmethodEqualFold: String
  paymentmethodContainsFold: String
  """paymentStatus field predicates"""
  paymentstatus: String
  paymentstatusNEQ: String
  paymentstatusIn: [String!]
  paymentstatusNotIn: [String!]
  paymentstatusGT: String
  paymentstatusGTE: String
  paymentstatusLT: String
  paymentstatusLTE: String
  paymentstatusContains: String
  paymentstatusHasPrefix: String
  paymentstatusHasSuffix: String
  paymentstatusEqualFold: String
  paymentstatusContainsFold: String
  """paymentId field predicates"""
  paymentid: String
  paymentidNEQ: String
  paymentidIn: [String!]
  paymentidNotIn: [String!]
  paymentidGT: String
  paymentidGTE: String
  paymentidLT: String
  paymentidLTE: String
  paymentidContains: String
  paymentidHasPrefix: String
  paymentidHasSuffix: String
  paymentidEqualFold: String
  paymentidContainsFold: String
  """paymentAmount field predicates"""
  paymentamount: String
  paymentamountNEQ: String
  paymentamountIn: [String!]
  paymentamountNotIn: [String!]
  paymentamountGT: String
  paymentamountGTE: String
  paymentamountLT: String
  paymentamountLTE: String
  paymentamountContains: String
  paymentamountHasPrefix: String
  paymentamountHasSuffix: String
  paymentamountEqualFold: String
  paymentamountContainsFold: String
  """paymentCurrency field predicates"""
  paymentcurrency: String
  paymentcurrencyNEQ: String
  paymentcurrencyIn: [String!]
  paymentcurrencyNotIn: [String!]
  paymentcurrencyGT: String
  paymentcurrencyGTE: String
  paymentcurrencyLT: String
  paymentcurrencyLTE: String
  paymentcurrencyContains: String
  paymentcurrencyHasPrefix: String
  paymentcurrencyHasSuffix: String
  paymentcurrencyEqualFold: String
  paymentcurrencyContainsFold: String
  """paymentDate field predicates"""
  paymentdate: String
  paymentdateNEQ: String
  paymentdateIn: [String!]
  paymentdateNotIn: [String!]
  paymentdateGT: String
  paymentdateGTE: String
  paymentdateLT: String
  paymentdateLTE: String
  paymentdateContains: String
  paymentdateHasPrefix: String
  paymentdateHasSuffix: String
  paymentdateEqualFold: String
  paymentdateContainsFold: String
  """paymentFee field predicates"""
  paymentfee: String
  paymentfeeNEQ: String
  paymentfeeIn: [String!]
  paymentfeeNotIn: [String!]
  paymentfeeGT: String
  paymentfeeGTE: String
  paymentfeeLT: String
  paymentfeeLTE: String
  paymentfeeContains: String
  paymentfeeHasPrefix: String
  paymentfeeHasSuffix: String
  paymentfeeEqualFold: String
  paymentfeeContainsFold: String
  """paymentNet field predicates"""
  paymentnet: String
  paymentnetNEQ: String
  paymentnetIn: [String!]
  paymentnetNotIn: [String!]
  paymentnetGT: String
  paymentnetGTE: String
  paymentnetLT: String
  paymentnetLTE: String
  paymentnetContains: String
  paymentnetHasPrefix: String
  paymentnetHasSuffix: String
  paymentnetEqualFold: String
  paymentnetContainsFold: String
  """paymentPayerEmail field predicates"""
  paymentpayeremail: String
  paymentpayeremailNEQ: String
  paymentpayeremailIn: [String!]
  paymentpayeremailNotIn: [String!]
  paymentpayeremailGT: String
  paymentpayeremailGTE: String
  paymentpayeremailLT: String
  paymentpayeremailLTE: String
  paymentpayeremailContains: String
  paymentpayeremailHasPrefix: String
  paymentpayeremailHasSuffix: String
  paymentpayeremailEqualFold: String
  paymentpayeremailContainsFold: String
  """paymentPayerFirstName field predicates"""
  paymentpayerfirstname: String
  paymentpayerfirstnameNEQ: String
  paymentpayerfirstnameIn: [String!]
  paymentpayerfirstnameNotIn: [String!]
  paymentpayerfirstnameGT: String
  paymentpayerfirstnameGTE: String
  paymentpayerfirstnameLT: String
  paymentpayerfirstnameLTE: String
  paymentpayerfirstnameContains: String
  paymentpayerfirstnameHasPrefix: String
  paymentpayerfirstnameHasSuffix: String
  paymentpayerfirstnameEqualFold: String
  paymentpayerfirstnameContainsFold: String
  """paymentPayerLastName field predicates"""
  paymentpayerlastname: String
  paymentpayerlastnameNEQ: String
  paymentpayerlastnameIn: [String!]
  paymentpayerlastnameNotIn: [String!]
  paymentpayerlastnameGT: String
  paymentpayerlastnameGTE: String
  paymentpayerlastnameLT: String
  paymentpayerlastnameLTE: String
  paymentpayerlastnameContains: String
  paymentpayerlastnameHasPrefix: String
  paymentpayerlastnameHasSuffix: String
  paymentpayerlastnameEqualFold: String
  paymentpayerlastnameContainsFold: String
  """paymentPayerId field predicates"""
  paymentpayerid: String
  paymentpayeridNEQ: String
  paymentpayeridIn: [String!]
  paymentpayeridNotIn: [String!]
  paymentpayeridGT: String
  paymentpayeridGTE: String
  paymentpayeridLT: String
  paymentpayeridLTE: String
  paymentpayeridContains: String
  paymentpayeridHasPrefix: String
  paymentpayeridHasSuffix: String
  paymentpayeridEqualFold: String
  paymentpayeridContainsFold: String
  """paymentPayerStatus field predicates"""
  paymentpayerstatus: String
  paymentpayerstatusNEQ: String
  paymentpayerstatusIn: [String!]
  paymentpayerstatusNotIn: [String!]
  paymentpayerstatusGT: String
  paymentpayerstatusGTE: String
  paymentpayerstatusLT: String
  paymentpayerstatusLTE: String
  paymentpayerstatusContains: String
  paymentpayerstatusHasPrefix: String
  paymentpayerstatusHasSuffix: String
  paymentpayerstatusEqualFold: String
  paymentpayerstatusContainsFold: String
  """paymentReceiverEmail field predicates"""
  paymentreceiveremail: String
  paymentreceiveremailNEQ: String
  paymentreceiveremailIn: [String!]
  paymentreceiveremailNotIn: [String!]
  paymentreceiveremailGT: String
  paymentreceiveremailGTE: String
  paymentreceiveremailLT: String
  paymentreceiveremailLTE: String
  paymentreceiveremailContains: String
  paymentreceiveremailHasPrefix: String
  paymentreceiveremailHasSuffix: String
  paymentreceiveremailEqualFold: String
  paymentreceiveremailContainsFold: String
  """paymentReceiverId field predicates"""
  paymentreceiverid: String
  paymentreceiveridNEQ: String
  paymentreceiveridIn: [String!]
  paymentreceiveridNotIn: [String!]
  paymentreceiveridGT: String
  paymentreceiveridGTE: String
  paymentreceiveridLT: String
  paymentreceiveridLTE: String
  paymentreceiveridContains: String
  paymentreceiveridHasPrefix: String
  paymentreceiveridHasSuffix: String
  paymentreceiveridEqualFold: String
  paymentreceiveridContainsFold: String
  """paymentTax field predicates"""
  paymenttax: String
  paymenttaxNEQ: String
  paymenttaxIn: [String!]
  paymenttaxNotIn: [String!]
  paymenttaxGT: String
  paymenttaxGTE: String
  paymenttaxLT: String
  paymenttaxLTE: String
  paymenttaxContains: String
  paymenttaxHasPrefix: String
  paymenttaxHasSuffix: String
  paymenttaxEqualFold: String
  paymenttaxContainsFold: String
  """paymentTransactionId field predicates"""
  paymenttransactionid: String
  paymenttransactionidNEQ: String
  paymenttransactionidIn: [String!]
  paymenttransactionidNotIn: [String!]
  paymenttransactionidGT: String
  paymenttransactionidGTE: String
  paymenttransactionidLT: String
  paymenttransactionidLTE: String
  paymenttransactionidContains: String
  paymenttransactionidHasPrefix: String
  paymenttransactionidHasSuffix: String
  paymenttransactionidEqualFold: String
  paymenttransactionidContainsFold: String
  """paymentTransactionType field predicates"""
  paymenttransactiontype: String
  paymenttransactiontypeNEQ: String
  paymenttransactiontypeIn: [String!]
  paymenttransactiontypeNotIn: [String!]
  paymenttransactiontypeGT: String
  paymenttransactiontypeGTE: String
  paymenttransactiontypeLT: String
  paymenttransactiontypeLTE: String
  paymenttransactiontypeContains: String
  paymenttransactiontypeHasPrefix: String
  paymenttransactiontypeHasSuffix: String
  paymenttransactiontypeEqualFold: String
  paymenttransactiontypeContainsFold: String
  """paymentPendingReason field predicates"""
  paymentpendingreason: String
  paymentpendingreasonNEQ: String
  paymentpendingreasonIn: [String!]
  paymentpendingreasonNotIn: [String!]
  paymentpendingreasonGT: String
  paymentpendingreasonGTE: String
  paymentpendingreasonLT: String
  paymentpendingreasonLTE: String
  paymentpendingreasonContains: String
  paymentpendingreasonHasPrefix: String
  paymentpendingreasonHasSuffix: String
  paymentpendingreasonEqualFold: String
  paymentpendingreasonContainsFold: String
  """paymentReasonCode field predicates"""
  paymentreasoncode: String
  paymentreasoncodeNEQ: String
  paymentreasoncodeIn: [String!]
  paymentreasoncodeNotIn: [String!]
  paymentreasoncodeGT: String
  paymentreasoncodeGTE: String
  paymentreasoncodeLT: String
  paymentreasoncodeLTE: String
  paymentreasoncodeContains: String
  paymentreasoncodeHasPrefix: String
  paymentreasoncodeHasSuffix: String
  paymentreasoncodeEqualFold: String
  paymentreasoncodeContainsFold: String
  """product edge predicates"""
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
  """originLink edge predicates"""
  hasOriginLink: Boolean
  hasOriginLinkWith: [LinkVisitWhereInput!]
  """productCustomer edge predicates"""
  hasProductCustomer: Boolean
  hasProductCustomerWith: [UserBuyerWhereInput!]
  """shop edge predicates"""
  hasShop: Boolean
  hasShopWith: [ShopWhereInput!]
  """productInfluencer edge predicates"""
  hasProductInfluencer: Boolean
  hasProductInfluencerWith: [UserInfluencerWhereInput!]
}
"""
UpdateBankAccountInput is used for update BankAccount object.
Input was generated by ent.
"""
input UpdateBankAccountInput {
  xid: Int
}
"""
UpdateBlogPostInput is used for update BlogPost object.
Input was generated by ent.
"""
input UpdateBlogPostInput {
  title: String
  content: String
  datecreated: String
  dateupdated: String
  addAuthorIDs: [ID!]
  removeAuthorIDs: [ID!]
  clearAuthor: Boolean
}
"""
UpdateCategoryInput is used for update Category object.
Input was generated by ent.
"""
input UpdateCategoryInput {
  name: String
  description: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
}
"""
UpdateChatInput is used for update Chat object.
Input was generated by ent.
"""
input UpdateChatInput {
  xid: Int
}
"""
UpdateCommissionStructureSchemaInput is used for update CommissionStructureSchema object.
Input was generated by ent.
"""
input UpdateCommissionStructureSchemaInput {
  name: String
  description: String
  commissionvalue: String
  commissionpercentage: String
  addProductSellerIDs: [ID!]
  removeProductSellerIDs: [ID!]
  clearProductSeller: Boolean
}
"""
UpdateContentBlockInput is used for update ContentBlock object.
Input was generated by ent.
"""
input UpdateContentBlockInput {
  primarymessage: String
  secondarymessage: String
  addImageIDs: [ID!]
  removeImageIDs: [ID!]
  clearImage: Boolean
}
"""
UpdateEmailCampaignInput is used for update EmailCampaign object.
Input was generated by ent.
"""
input UpdateEmailCampaignInput {
  xid: Int
}
"""
UpdateGroupBuyInput is used for update GroupBuy object.
Input was generated by ent.
"""
input UpdateGroupBuyInput {
  datecreated: String
  productprice: Int
  moq: Int
  startdate: String
  enddate: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransaction: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  name: String
}
"""
UpdateHeroContentInput is used for update HeroContent object.
Input was generated by ent.
"""
input UpdateHeroContentInput {
  primarymessage: String
  secondarymessage: String
  addImageIDs: [ID!]
  removeImageIDs: [ID!]
  clearImage: Boolean
}
"""
UpdateImageInput is used for update Image object.
Input was generated by ent.
"""
input UpdateImageInput {
  name: String
  description: String
  url: String
}
"""
UpdateLinkVisitInput is used for update LinkVisit object.
Input was generated by ent.
"""
input UpdateLinkVisitInput {
  datecreated: String
  ipaddress: String
  salevalue: Int
  commissionearned: Int
}
"""
UpdateMarketingCampaignInput is used for update MarketingCampaign object.
Input was generated by ent.
"""
input UpdateMarketingCampaignInput {
  name: String
  description: String
  consumerpurchasevalue: String
  customerapplicationlogic: String
  initialisationlogic: String
  startdate: String
  enddate: String
  datecreated: String
  dateupdated: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  addConsumerRewardIDs: [ID!]
  removeConsumerRewardIDs: [ID!]
  clearConsumerReward: Boolean
}
"""
UpdateNotificationInput is used for update Notification object.
Input was generated by ent.
"""
input UpdateNotificationInput {
  title: String
  content: String
  dateupdated: String
  read: Boolean
  addRecipientIDs: [ID!]
  removeRecipientIDs: [ID!]
  clearRecipient: Boolean
}
"""
UpdatePaymentMethodInput is used for update PaymentMethod object.
Input was generated by ent.
"""
input UpdatePaymentMethodInput {
  xid: Int
}
"""
UpdatePrimaryContentInput is used for update PrimaryContent object.
Input was generated by ent.
"""
input UpdatePrimaryContentInput {
  placeholder: Int
  clearPlaceholder: Boolean
  addContentBlockIDs: [ID!]
  removeContentBlockIDs: [ID!]
  clearContentBlock: Boolean
}
"""
UpdateProductAttributeInput is used for update ProductAttribute object.
Input was generated by ent.
"""
input UpdateProductAttributeInput {
  name: Int
  description: Int
  value: Int
}
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  name: String
  description: String
  price: String
  datecreated: String
  dateupdated: String
  addProductSellerIDs: [ID!]
  removeProductSellerIDs: [ID!]
  clearProductSeller: Boolean
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
  clearReviews: Boolean
  addImageIDs: [ID!]
  removeImageIDs: [ID!]
  clearImages: Boolean
  addCategoryIDs: [ID!]
  removeCategoryIDs: [ID!]
  clearCategories: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addProductAttributeIDs: [ID!]
  removeProductAttributeIDs: [ID!]
  clearProductAttributes: Boolean
  addVariationIDs: [ID!]
  removeVariationIDs: [ID!]
  clearVariations: Boolean
  addCommissionStructureIDs: [ID!]
  removeCommissionStructureIDs: [ID!]
  clearCommissionStructure: Boolean
  addShopIDs: [ID!]
  removeShopIDs: [ID!]
  addGroupBuyIDs: [ID!]
  removeGroupBuyIDs: [ID!]
  clearGroupBuys: Boolean
  addProductPageViewIDs: [ID!]
  removeProductPageViewIDs: [ID!]
  clearProductPageViews: Boolean
  addBlogPostIDs: [ID!]
  removeBlogPostIDs: [ID!]
  clearBlogPosts: Boolean
  addMarketingCampaignIDs: [ID!]
  removeMarketingCampaignIDs: [ID!]
  clearMarketingCampaigns: Boolean
  addChatIDs: [ID!]
  removeChatIDs: [ID!]
  clearChats: Boolean
  addEmailCampaignIDs: [ID!]
  removeEmailCampaignIDs: [ID!]
  clearEmailCampaign: Boolean
}
"""
UpdateProductPageViewInput is used for update ProductPageView object.
Input was generated by ent.
"""
input UpdateProductPageViewInput {
  version: Int
  addHeroContentIDs: [ID!]
  removeHeroContentIDs: [ID!]
  clearHeroContent: Boolean
  addPrimaryContentIDs: [ID!]
  removePrimaryContentIDs: [ID!]
  clearPrimaryContent: Boolean
  addViewAnalyticIDs: [ID!]
  removeViewAnalyticIDs: [ID!]
  clearViewAnalytics: Boolean
}
"""
UpdateProductVariationInput is used for update ProductVariation object.
Input was generated by ent.
"""
input UpdateProductVariationInput {
  name: String
  description: String
  price: String
  addProductAttributeIDs: [ID!]
  removeProductAttributeIDs: [ID!]
  clearProductAttributes: Boolean
}
"""
UpdateReferralLinkInput is used for update ReferralLink object.
Input was generated by ent.
"""
input UpdateReferralLinkInput {
  xid: Int
  name: String
  description: String
  link: String
  addVisitIDs: [ID!]
  removeVisitIDs: [ID!]
  clearVisits: Boolean
}
"""
UpdateRefundTransactionsInput is used for update RefundTransactions object.
Input was generated by ent.
"""
input UpdateRefundTransactionsInput {
  refundamount: String
  refundcurrency: String
  refundreason: String
  refundstatus: String
  datecreated: String
  dateupdated: String
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransaction: Boolean
}
"""
UpdateReviewInput is used for update Review object.
Input was generated by ent.
"""
input UpdateReviewInput {
  type: String
  content: String
  rating: String
  datecreated: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
  addProductCustomerIDs: [ID!]
  removeProductCustomerIDs: [ID!]
  clearProductCustomer: Boolean
}
"""
UpdateRewardTypeInput is used for update RewardType object.
Input was generated by ent.
"""
input UpdateRewardTypeInput {
  type: RewardTypeType
  val: Int
}
"""
UpdateShippingAddressInput is used for update ShippingAddress object.
Input was generated by ent.
"""
input UpdateShippingAddressInput {
  name: String
  address: String
  city: String
  state: String
  zip: String
  country: String
  dateupdated: String
}
"""
UpdateShopInput is used for update Shop object.
Input was generated by ent.
"""
input UpdateShopInput {
  name: String
  description: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransactions: Boolean
  addBankAccountIDs: [ID!]
  removeBankAccountIDs: [ID!]
  clearBankAccounts: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  name: String
  description: String
}
"""
UpdateTransactionInput is used for update Transaction object.
Input was generated by ent.
"""
input UpdateTransactionInput {
  datecreated: String
  dateupdated: String
  status: TransactionStatus
  paymentmethod: String
  paymentstatus: String
  paymentid: String
  paymentamount: String
  paymentcurrency: String
  paymentdate: String
  paymentfee: String
  paymentnet: String
  paymentpayeremail: String
  paymentpayerfirstname: String
  paymentpayerlastname: String
  paymentpayerid: String
  paymentpayerstatus: String
  paymentreceiveremail: String
  paymentreceiverid: String
  paymenttax: String
  paymenttransactionid: String
  paymenttransactiontype: String
  paymentpendingreason: String
  paymentreasoncode: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
  addOriginLinkIDs: [ID!]
  removeOriginLinkIDs: [ID!]
  clearOriginLink: Boolean
  addProductCustomerIDs: [ID!]
  removeProductCustomerIDs: [ID!]
  clearProductCustomer: Boolean
  addShopIDs: [ID!]
  removeShopIDs: [ID!]
  clearShop: Boolean
  addProductInfluencerIDs: [ID!]
  removeProductInfluencerIDs: [ID!]
  clearProductInfluencer: Boolean
}
"""
UpdateUserBuyerInput is used for update UserBuyer object.
Input was generated by ent.
"""
input UpdateUserBuyerInput {
  placeholder: Int
  clearPlaceholder: Boolean
  addUserProfileIDs: [ID!]
  removeUserProfileIDs: [ID!]
  clearUserProfile: Boolean
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
  clearReviews: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransactions: Boolean
  addLinksClickedIDs: [ID!]
  removeLinksClickedIDs: [ID!]
  clearLinksClicked: Boolean
}
"""
UpdateUserInfluencerInput is used for update UserInfluencer object.
Input was generated by ent.
"""
input UpdateUserInfluencerInput {
  placeholder: Int
  clearPlaceholder: Boolean
  addUserProfileIDs: [ID!]
  removeUserProfileIDs: [ID!]
  clearUserProfile: Boolean
  addReferralLinkIDs: [ID!]
  removeReferralLinkIDs: [ID!]
  clearReferralLinks: Boolean
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
  clearReviews: Boolean
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  email: String
  phone: String
  address: String
  city: String
  state: String
  zip: String
  country: String
  dateupdated: String
  addNotificationIDs: [ID!]
  removeNotificationIDs: [ID!]
  clearNotifications: Boolean
  addBankAccountIDs: [ID!]
  removeBankAccountIDs: [ID!]
  clearBankAccounts: Boolean
  addShippingAddressIDs: [ID!]
  removeShippingAddressIDs: [ID!]
  clearShippingAddresses: Boolean
  addPaymentMethodIDs: [ID!]
  removePaymentMethodIDs: [ID!]
  clearPaymentMethods: Boolean
}
"""
UpdateUserSellerInput is used for update UserSeller object.
Input was generated by ent.
"""
input UpdateUserSellerInput {
  brandname: String
  addUserProfileIDs: [ID!]
  removeUserProfileIDs: [ID!]
  clearUserProfile: Boolean
  addShopIDs: [ID!]
  removeShopIDs: [ID!]
  clearShops: Boolean
}
"""
UpdateViewAnalyticsInput is used for update ViewAnalytics object.
Input was generated by ent.
"""
input UpdateViewAnalyticsInput {
  views: Int
  scrolls: Int
  exits: Int
  datecreated: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
}
type User implements Node {
  id: ID!
  name: String!
  email: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  notifications: [Notification!]
  bankaccounts: [BankAccount!] @goField(name: "BankAccounts", forceResolver: false)
  shippingaddresses: [ShippingAddress!] @goField(name: "ShippingAddresses", forceResolver: false)
  paymentmethods: [PaymentMethod!] @goField(name: "PaymentMethods", forceResolver: false)
}
type UserBuyer implements Node {
  id: ID!
  placeholder: Int
  userprofile: [User!] @goField(name: "UserProfile", forceResolver: false)
  reviews: [Review!]
  transactions: [Transaction!]
  linksclicked: [LinkVisit!] @goField(name: "LinksClicked", forceResolver: false)
}
"""A connection to a list of items."""
type UserBuyerConnection {
  """A list of edges."""
  edges: [UserBuyerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserBuyerEdge {
  """The item at the end of the edge."""
  node: UserBuyer
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for UserBuyer connections"""
input UserBuyerOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserBuyers."""
  field: UserBuyerOrderField!
}
"""Properties by which UserBuyer connections can be ordered."""
enum UserBuyerOrderField {
  PLACEHOLDER
}
"""
UserBuyerWhereInput is used for filtering UserBuyer objects.
Input was generated by ent.
"""
input UserBuyerWhereInput {
  not: UserBuyerWhereInput
  and: [UserBuyerWhereInput!]
  or: [UserBuyerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """placeholder field predicates"""
  placeholder: Int
  placeholderNEQ: Int
  placeholderIn: [Int!]
  placeholderNotIn: [Int!]
  placeholderGT: Int
  placeholderGTE: Int
  placeholderLT: Int
  placeholderLTE: Int
  placeholderIsNil: Boolean
  placeholderNotNil: Boolean
  """userProfile edge predicates"""
  hasUserProfile: Boolean
  hasUserProfileWith: [UserWhereInput!]
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [ReviewWhereInput!]
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
  """linksClicked edge predicates"""
  hasLinksClicked: Boolean
  hasLinksClickedWith: [LinkVisitWhereInput!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type UserInfluencer implements Node {
  id: ID!
  placeholder: Int
  userprofile: [User!] @goField(name: "UserProfile", forceResolver: false)
  referrallinks: [ReferralLink!] @goField(name: "ReferralLinks", forceResolver: false)
  reviews: [Review!]
  products: [Product!]
  tags: [Tag!]
}
"""A connection to a list of items."""
type UserInfluencerConnection {
  """A list of edges."""
  edges: [UserInfluencerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserInfluencerEdge {
  """The item at the end of the edge."""
  node: UserInfluencer
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for UserInfluencer connections"""
input UserInfluencerOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserInfluencers."""
  field: UserInfluencerOrderField!
}
"""Properties by which UserInfluencer connections can be ordered."""
enum UserInfluencerOrderField {
  PLACEHOLDER
}
"""
UserInfluencerWhereInput is used for filtering UserInfluencer objects.
Input was generated by ent.
"""
input UserInfluencerWhereInput {
  not: UserInfluencerWhereInput
  and: [UserInfluencerWhereInput!]
  or: [UserInfluencerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """placeholder field predicates"""
  placeholder: Int
  placeholderNEQ: Int
  placeholderIn: [Int!]
  placeholderNotIn: [Int!]
  placeholderGT: Int
  placeholderGTE: Int
  placeholderLT: Int
  placeholderLTE: Int
  placeholderIsNil: Boolean
  placeholderNotNil: Boolean
  """userProfile edge predicates"""
  hasUserProfile: Boolean
  hasUserProfileWith: [UserWhereInput!]
  """referralLinks edge predicates"""
  hasReferralLinks: Boolean
  hasReferralLinksWith: [ReferralLinkWhereInput!]
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [ReviewWhereInput!]
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  NAME
  EMAIL
  PHONE
  ADDRESS
  CITY
  STATE
  ZIP
  COUNTRY
  DATECREATED
  DATEUPDATED
}
type UserSeller implements Node {
  id: ID!
  brandname: String! @goField(name: "BrandName", forceResolver: false)
  userprofile: [User!] @goField(name: "UserProfile", forceResolver: false)
  shops: [Shop!]
}
"""A connection to a list of items."""
type UserSellerConnection {
  """A list of edges."""
  edges: [UserSellerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserSellerEdge {
  """The item at the end of the edge."""
  node: UserSeller
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for UserSeller connections"""
input UserSellerOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserSellers."""
  field: UserSellerOrderField!
}
"""Properties by which UserSeller connections can be ordered."""
enum UserSellerOrderField {
  BRANDNAME
}
"""
UserSellerWhereInput is used for filtering UserSeller objects.
Input was generated by ent.
"""
input UserSellerWhereInput {
  not: UserSellerWhereInput
  and: [UserSellerWhereInput!]
  or: [UserSellerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """brandName field predicates"""
  brandname: String
  brandnameNEQ: String
  brandnameIn: [String!]
  brandnameNotIn: [String!]
  brandnameGT: String
  brandnameGTE: String
  brandnameLT: String
  brandnameLTE: String
  brandnameContains: String
  brandnameHasPrefix: String
  brandnameHasSuffix: String
  brandnameEqualFold: String
  brandnameContainsFold: String
  """userProfile edge predicates"""
  hasUserProfile: Boolean
  hasUserProfileWith: [UserWhereInput!]
  """shops edge predicates"""
  hasShops: Boolean
  hasShopsWith: [ShopWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """city field predicates"""
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateEqualFold: String
  stateContainsFold: String
  """zip field predicates"""
  zip: String
  zipNEQ: String
  zipIn: [String!]
  zipNotIn: [String!]
  zipGT: String
  zipGTE: String
  zipLT: String
  zipLTE: String
  zipContains: String
  zipHasPrefix: String
  zipHasSuffix: String
  zipEqualFold: String
  zipContainsFold: String
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """dateUpdated field predicates"""
  dateupdated: String
  dateupdatedNEQ: String
  dateupdatedIn: [String!]
  dateupdatedNotIn: [String!]
  dateupdatedGT: String
  dateupdatedGTE: String
  dateupdatedLT: String
  dateupdatedLTE: String
  dateupdatedContains: String
  dateupdatedHasPrefix: String
  dateupdatedHasSuffix: String
  dateupdatedEqualFold: String
  dateupdatedContainsFold: String
  """notifications edge predicates"""
  hasNotifications: Boolean
  hasNotificationsWith: [NotificationWhereInput!]
  """bankAccounts edge predicates"""
  hasBankAccounts: Boolean
  hasBankAccountsWith: [BankAccountWhereInput!]
  """shippingAddresses edge predicates"""
  hasShippingAddresses: Boolean
  hasShippingAddressesWith: [ShippingAddressWhereInput!]
  """paymentMethods edge predicates"""
  hasPaymentMethods: Boolean
  hasPaymentMethodsWith: [PaymentMethodWhereInput!]
}
type ViewAnalytics implements Node {
  id: ID!
  views: Int!
  scrolls: Int!
  exits: Int!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  product: [Product!]
}
"""A connection to a list of items."""
type ViewAnalyticsConnection {
  """A list of edges."""
  edges: [ViewAnalyticsEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ViewAnalyticsEdge {
  """The item at the end of the edge."""
  node: ViewAnalytics
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ViewAnalytics connections"""
input ViewAnalyticsOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ViewAnalyticsSlice."""
  field: ViewAnalyticsOrderField!
}
"""Properties by which ViewAnalytics connections can be ordered."""
enum ViewAnalyticsOrderField {
  VIEWS
  SCROLLS
  EXITS
  DATECREATED
}
"""
ViewAnalyticsWhereInput is used for filtering ViewAnalytics objects.
Input was generated by ent.
"""
input ViewAnalyticsWhereInput {
  not: ViewAnalyticsWhereInput
  and: [ViewAnalyticsWhereInput!]
  or: [ViewAnalyticsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """views field predicates"""
  views: Int
  viewsNEQ: Int
  viewsIn: [Int!]
  viewsNotIn: [Int!]
  viewsGT: Int
  viewsGTE: Int
  viewsLT: Int
  viewsLTE: Int
  """scrolls field predicates"""
  scrolls: Int
  scrollsNEQ: Int
  scrollsIn: [Int!]
  scrollsNotIn: [Int!]
  scrollsGT: Int
  scrollsGTE: Int
  scrollsLT: Int
  scrollsLTE: Int
  """exits field predicates"""
  exits: Int
  exitsNEQ: Int
  exitsIn: [Int!]
  exitsNotIn: [Int!]
  exitsGT: Int
  exitsGTE: Int
  exitsLT: Int
  exitsLTE: Int
  """dateCreated field predicates"""
  datecreated: String
  datecreatedNEQ: String
  datecreatedIn: [String!]
  datecreatedNotIn: [String!]
  datecreatedGT: String
  datecreatedGTE: String
  datecreatedLT: String
  datecreatedLTE: String
  datecreatedContains: String
  datecreatedHasPrefix: String
  datecreatedHasSuffix: String
  datecreatedEqualFold: String
  datecreatedContainsFold: String
  """product edge predicates"""
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
}
