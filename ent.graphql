directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type BankAccount implements Node {
  id: ID!
  xid: Int!
}
type BlogPost implements Node {
  id: ID!
  title: String!
  content: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  author: [UserSeller!]
}
type Category implements Node {
  id: ID!
  name: String!
  description: String!
  products: [Product!]
}
type Chat implements Node {
  id: ID!
  xid: Int!
}
type CommissionStructure implements Node {
  id: ID!
  name: String!
  description: String!
  commissionvalue: String! @goField(name: "CommissionValue", forceResolver: false)
  commissionpercentage: String! @goField(name: "CommissionPercentage", forceResolver: false)
  productseller: [UserSeller!] @goField(name: "ProductSeller", forceResolver: false)
}
type ContentBlock implements Node {
  id: ID!
  primarymessage: String! @goField(name: "PrimaryMessage", forceResolver: false)
  secondarymessage: String! @goField(name: "SecondaryMessage", forceResolver: false)
  image: [Image!]
}
"""
CreateBankAccountInput is used for create BankAccount object.
Input was generated by ent.
"""
input CreateBankAccountInput {
  xid: Int!
}
"""
CreateBlogPostInput is used for create BlogPost object.
Input was generated by ent.
"""
input CreateBlogPostInput {
  title: String!
  content: String!
  datecreated: String!
  dateupdated: String!
  authorIDs: [ID!]
}
"""
CreateCategoryInput is used for create Category object.
Input was generated by ent.
"""
input CreateCategoryInput {
  name: String!
  description: String!
  productIDs: [ID!]
}
"""
CreateChatInput is used for create Chat object.
Input was generated by ent.
"""
input CreateChatInput {
  xid: Int!
}
"""
CreateCommissionStructureInput is used for create CommissionStructure object.
Input was generated by ent.
"""
input CreateCommissionStructureInput {
  name: String!
  description: String!
  commissionvalue: String!
  commissionpercentage: String!
  productsellerIDs: [ID!]
}
"""
CreateContentBlockInput is used for create ContentBlock object.
Input was generated by ent.
"""
input CreateContentBlockInput {
  primarymessage: String!
  secondarymessage: String!
  imageIDs: [ID!]
}
"""
CreateEmailCampaignInput is used for create EmailCampaign object.
Input was generated by ent.
"""
input CreateEmailCampaignInput {
  xid: Int!
}
"""
CreateGroupBuyInput is used for create GroupBuy object.
Input was generated by ent.
"""
input CreateGroupBuyInput {
  datecreated: String!
  productprice: Int!
  moq: Int!
  startdate: String!
  enddate: String!
  productIDs: [ID!]
  transactionIDs: [ID!]
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  name: String!
}
"""
CreateHeroContentInput is used for create HeroContent object.
Input was generated by ent.
"""
input CreateHeroContentInput {
  primarymessage: String!
  secondarymessage: String!
  imageIDs: [ID!]
}
"""
CreateImageInput is used for create Image object.
Input was generated by ent.
"""
input CreateImageInput {
  name: String!
  description: String!
  url: String!
}
"""
CreateLinkVisitInput is used for create LinkVisit object.
Input was generated by ent.
"""
input CreateLinkVisitInput {
  datecreated: String!
  ipaddress: String!
  salevalue: Int!
  commissionearned: Int!
}
"""
CreateMarketingCampaignInput is used for create MarketingCampaign object.
Input was generated by ent.
"""
input CreateMarketingCampaignInput {
  name: String!
  description: String!
  consumerpurchasevalue: String!
  customerapplicationlogic: String!
  initialisationlogic: String!
  startdate: String!
  enddate: String!
  datecreated: String!
  dateupdated: String!
  productIDs: [ID!]!
  consumerrewardIDs: [ID!]
}
"""
CreateNotificationInput is used for create Notification object.
Input was generated by ent.
"""
input CreateNotificationInput {
  title: String!
  content: String!
  datecreated: String
  dateupdated: String
  read: Boolean!
  recipientIDs: [ID!]
}
"""
CreatePaymentMethodInput is used for create PaymentMethod object.
Input was generated by ent.
"""
input CreatePaymentMethodInput {
  xid: Int!
}
"""
CreatePrimaryContentInput is used for create PrimaryContent object.
Input was generated by ent.
"""
input CreatePrimaryContentInput {
  placeholder: Int
  contentblockIDs: [ID!]
}
"""
CreateProductAttributeInput is used for create ProductAttribute object.
Input was generated by ent.
"""
input CreateProductAttributeInput {
  name: Int!
  description: Int!
  value: Int!
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  name: String!
  description: String!
  price: String!
  datecreated: String!
  dateupdated: String!
  productsellerIDs: [ID!]
  reviewIDs: [ID!]
  imageIDs: [ID!]
  categoryIDs: [ID!]
  tagIDs: [ID!]
  productattributeIDs: [ID!]
  variationIDs: [ID!]
  commissionstructureIDs: [ID!]
  shopIDs: [ID!]!
  groupbuyIDs: [ID!]
  productpageviewIDs: [ID!]
  blogpostIDs: [ID!]
  marketingcampaignIDs: [ID!]
  chatIDs: [ID!]
  emailcampaignIDs: [ID!]
}
"""
CreateProductPageViewInput is used for create ProductPageView object.
Input was generated by ent.
"""
input CreateProductPageViewInput {
  version: Int!
  herocontentIDs: [ID!]
  primarycontentIDs: [ID!]
  viewanalyticIDs: [ID!]
}
"""
CreateProductVariationInput is used for create ProductVariation object.
Input was generated by ent.
"""
input CreateProductVariationInput {
  name: String!
  description: String!
  price: String!
  productattributeIDs: [ID!]
}
"""
CreateReferralLinkInput is used for create ReferralLink object.
Input was generated by ent.
"""
input CreateReferralLinkInput {
  xid: Int!
  name: String!
  description: String!
  link: String!
  visitIDs: [ID!]
}
"""
CreateRefundTransactionsInput is used for create RefundTransactions object.
Input was generated by ent.
"""
input CreateRefundTransactionsInput {
  refundamount: String!
  refundcurrency: String!
  refundreason: String!
  refundstatus: String!
  datecreated: String!
  dateupdated: String!
  transactionIDs: [ID!]
}
"""
CreateReviewInput is used for create Review object.
Input was generated by ent.
"""
input CreateReviewInput {
  type: String!
  content: String!
  rating: String!
  datecreated: String!
  productIDs: [ID!]
  productcustomerIDs: [ID!]
}
"""
CreateRewardTypeInput is used for create RewardType object.
Input was generated by ent.
"""
input CreateRewardTypeInput {
  type: RewardTypeType!
  val: Int!
}
"""
CreateShippingAddressInput is used for create ShippingAddress object.
Input was generated by ent.
"""
input CreateShippingAddressInput {
  name: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String
  dateupdated: String
}
"""
CreateShopInput is used for create Shop object.
Input was generated by ent.
"""
input CreateShopInput {
  name: String!
  description: String!
  productIDs: [ID!]
  transactionIDs: [ID!]
  bankaccountIDs: [ID!]
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  name: String!
  description: String!
}
"""
CreateTransactionInput is used for create Transaction object.
Input was generated by ent.
"""
input CreateTransactionInput {
  datecreated: String!
  dateupdated: String!
  status: TransactionStatus
  paymentmethod: String!
  paymentstatus: String!
  paymentid: String!
  paymentamount: String!
  paymentcurrency: String!
  paymentdate: String!
  paymentfee: String!
  paymentnet: String!
  paymentpayeremail: String!
  paymentpayerfirstname: String!
  paymentpayerlastname: String!
  paymentpayerid: String!
  paymentpayerstatus: String!
  paymentreceiveremail: String!
  paymentreceiverid: String!
  paymenttax: String!
  paymenttransactionid: String!
  paymenttransactiontype: String!
  paymentpendingreason: String!
  paymentreasoncode: String!
  productIDs: [ID!]
  originlinkIDs: [ID!]
  productcustomerIDs: [ID!]
  shopIDs: [ID!]
  productinfluencerIDs: [ID!]
}
"""
CreateUserBuyerInput is used for create UserBuyer object.
Input was generated by ent.
"""
input CreateUserBuyerInput {
  placeholder: Int
  userprofileIDs: [ID!]
  reviewIDs: [ID!]
  transactionIDs: [ID!]
  linksclickedIDs: [ID!]
}
"""
CreateUserInfluencerInput is used for create UserInfluencer object.
Input was generated by ent.
"""
input CreateUserInfluencerInput {
  placeholder: Int
  userprofileIDs: [ID!]
  referrallinkIDs: [ID!]
  reviewIDs: [ID!]
  productIDs: [ID!]
  tagIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  email: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String
  dateupdated: String
  notificationIDs: [ID!]
  bankaccountIDs: [ID!]
  shippingaddressIDs: [ID!]
  paymentmethodIDs: [ID!]
}
"""
CreateUserSellerInput is used for create UserSeller object.
Input was generated by ent.
"""
input CreateUserSellerInput {
  brandname: String!
  userprofileIDs: [ID!]
  shopIDs: [ID!]
}
"""
CreateViewAnalyticsInput is used for create ViewAnalytics object.
Input was generated by ent.
"""
input CreateViewAnalyticsInput {
  views: Int!
  scrolls: Int!
  exits: Int!
  datecreated: String!
  productIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type EmailCampaign implements Node {
  id: ID!
  xid: Int!
}
type Group implements Node {
  id: ID!
  name: String!
}
type GroupBuy implements Node {
  id: ID!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  productprice: Int! @goField(name: "ProductPrice", forceResolver: false)
  moq: Int!
  startdate: String! @goField(name: "StartDate", forceResolver: false)
  enddate: String! @goField(name: "EndDate", forceResolver: false)
  product: [Product!]
  transaction: [Transaction!]
}
type HeroContent implements Node {
  id: ID!
  primarymessage: String! @goField(name: "PrimaryMessage", forceResolver: false)
  secondarymessage: String! @goField(name: "SecondaryMessage", forceResolver: false)
  image: [Image!]
}
type Image implements Node {
  id: ID!
  name: String!
  description: String!
  url: String!
}
type LinkVisit implements Node {
  id: ID!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  ipaddress: String! @goField(name: "IpAddress", forceResolver: false)
  salevalue: Int! @goField(name: "SaleValue", forceResolver: false)
  commissionearned: Int! @goField(name: "CommissionEarned", forceResolver: false)
}
type MarketingCampaign implements Node {
  id: ID!
  name: String!
  description: String!
  consumerpurchasevalue: String! @goField(name: "ConsumerPurchaseValue", forceResolver: false)
  customerapplicationlogic: String! @goField(name: "CustomerApplicationLogic", forceResolver: false)
  initialisationlogic: String! @goField(name: "InitialisationLogic", forceResolver: false)
  startdate: String! @goField(name: "StartDate", forceResolver: false)
  enddate: String! @goField(name: "EndDate", forceResolver: false)
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  product: [Product!]!
  consumerreward: [RewardType!] @goField(name: "ConsumerReward", forceResolver: false)
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "entdemo/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Notification implements Node {
  id: ID!
  title: String!
  content: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  read: Boolean!
  recipient: [User!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type PaymentMethod implements Node {
  id: ID!
  xid: Int!
}
type PrimaryContent implements Node {
  id: ID!
  placeholder: Int
  contentblock: [ContentBlock!] @goField(name: "ContentBlock", forceResolver: false)
}
type Product implements Node {
  id: ID!
  name: String!
  description: String!
  price: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  productseller: [UserSeller!] @goField(name: "ProductSeller", forceResolver: false)
  reviews: [Review!]
  images: [Image!]
  categories: [Category!]
  tags: [Tag!]
  productattributes: [ProductAttribute!] @goField(name: "ProductAttributes", forceResolver: false)
  variations: [ProductVariation!]
  commissionstructure: [CommissionStructure!] @goField(name: "CommissionStructure", forceResolver: false)
  shop: [Shop!]!
  groupbuys: [GroupBuy!] @goField(name: "GroupBuys", forceResolver: false)
  productpageviews: [ProductPageView!] @goField(name: "ProductPageViews", forceResolver: false)
  blogposts: [BlogPost!] @goField(name: "BlogPosts", forceResolver: false)
  marketingcampaigns: [MarketingCampaign!] @goField(name: "MarketingCampaigns", forceResolver: false)
  chats: [Chat!]
  emailcampaign: [EmailCampaign!] @goField(name: "EmailCampaign", forceResolver: false)
}
type ProductAttribute implements Node {
  id: ID!
  name: Int!
  description: Int!
  value: Int!
}
type ProductPageView implements Node {
  id: ID!
  version: Int!
  herocontent: [HeroContent!] @goField(name: "HeroContent", forceResolver: false)
  primarycontent: [PrimaryContent!] @goField(name: "PrimaryContent", forceResolver: false)
  viewanalytics: [ViewAnalytics!] @goField(name: "ViewAnalytics", forceResolver: false)
}
type ProductVariation implements Node {
  id: ID!
  name: String!
  description: String!
  price: String!
  productattributes: [ProductAttribute!] @goField(name: "ProductAttributes", forceResolver: false)
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  bankAccounts: [BankAccount!]!
  blogPosts: [BlogPost!]!
  categories: [Category!]!
  chats: [Chat!]!
  commissionStructures: [CommissionStructure!]!
  contentBlocks: [ContentBlock!]!
  emailCampaigns: [EmailCampaign!]!
  groups: [Group!]!
  groupBuys: [GroupBuy!]!
  heroContents: [HeroContent!]!
  images: [Image!]!
  linkVisits: [LinkVisit!]!
  marketingCampaigns: [MarketingCampaign!]!
  notifications: [Notification!]!
  paymentMethods: [PaymentMethod!]!
  primaryContents: [PrimaryContent!]!
  products: [Product!]!
  productAttributes: [ProductAttribute!]!
  productPageViews: [ProductPageView!]!
  productVariations: [ProductVariation!]!
  referralLinks: [ReferralLink!]!
  refundTransactionsSlice: [RefundTransactions!]!
  reviews: [Review!]!
  rewardTypes: [RewardType!]!
  shippingAddresses: [ShippingAddress!]!
  shops: [Shop!]!
  tags: [Tag!]!
  transactions: [Transaction!]!
  users: [User!]!
  userBuyers: [UserBuyer!]!
  userInfluencers: [UserInfluencer!]!
  userSellers: [UserSeller!]!
  viewAnalyticsSlice: [ViewAnalytics!]!
}
type ReferralLink implements Node {
  id: ID!
  xid: Int!
  name: String!
  description: String!
  link: String!
  visits: [LinkVisit!]
}
type RefundTransactions implements Node {
  id: ID!
  refundamount: String! @goField(name: "RefundAmount", forceResolver: false)
  refundcurrency: String! @goField(name: "RefundCurrency", forceResolver: false)
  refundreason: String! @goField(name: "RefundReason", forceResolver: false)
  refundstatus: String! @goField(name: "RefundStatus", forceResolver: false)
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  transaction: [Transaction!]
}
type Review implements Node {
  id: ID!
  type: String!
  content: String!
  rating: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  product: [Product!]
  productcustomer: [UserBuyer!] @goField(name: "ProductCustomer", forceResolver: false)
}
type RewardType implements Node {
  id: ID!
  type: RewardTypeType!
  val: Int!
}
"""RewardTypeType is enum for the field type"""
enum RewardTypeType @goModel(model: "entdemo/ent/rewardtype.Type") {
  DISCOUNT
  FREE_PRODUCT
  SHIPPING_DISCOUNT
}
type ShippingAddress implements Node {
  id: ID!
  name: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
}
type Shop implements Node {
  id: ID!
  name: String!
  description: String!
  products: [Product!]
  transactions: [Transaction!]
  bankaccounts: [BankAccount!] @goField(name: "BankAccounts", forceResolver: false)
}
type Tag implements Node {
  id: ID!
  name: String!
  description: String!
}
type Transaction implements Node {
  id: ID!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  status: TransactionStatus!
  paymentmethod: String! @goField(name: "PaymentMethod", forceResolver: false)
  paymentstatus: String! @goField(name: "PaymentStatus", forceResolver: false)
  paymentid: String! @goField(name: "PaymentId", forceResolver: false)
  paymentamount: String! @goField(name: "PaymentAmount", forceResolver: false)
  paymentcurrency: String! @goField(name: "PaymentCurrency", forceResolver: false)
  paymentdate: String! @goField(name: "PaymentDate", forceResolver: false)
  paymentfee: String! @goField(name: "PaymentFee", forceResolver: false)
  paymentnet: String! @goField(name: "PaymentNet", forceResolver: false)
  paymentpayeremail: String! @goField(name: "PaymentPayerEmail", forceResolver: false)
  paymentpayerfirstname: String! @goField(name: "PaymentPayerFirstName", forceResolver: false)
  paymentpayerlastname: String! @goField(name: "PaymentPayerLastName", forceResolver: false)
  paymentpayerid: String! @goField(name: "PaymentPayerId", forceResolver: false)
  paymentpayerstatus: String! @goField(name: "PaymentPayerStatus", forceResolver: false)
  paymentreceiveremail: String! @goField(name: "PaymentReceiverEmail", forceResolver: false)
  paymentreceiverid: String! @goField(name: "PaymentReceiverId", forceResolver: false)
  paymenttax: String! @goField(name: "PaymentTax", forceResolver: false)
  paymenttransactionid: String! @goField(name: "PaymentTransactionId", forceResolver: false)
  paymenttransactiontype: String! @goField(name: "PaymentTransactionType", forceResolver: false)
  paymentpendingreason: String! @goField(name: "PaymentPendingReason", forceResolver: false)
  paymentreasoncode: String! @goField(name: "PaymentReasonCode", forceResolver: false)
  product: [Product!]
  originlink: [LinkVisit!] @goField(name: "OriginLink", forceResolver: false)
  productcustomer: [UserBuyer!] @goField(name: "ProductCustomer", forceResolver: false)
  shop: [Shop!]
  productinfluencer: [UserInfluencer!] @goField(name: "ProductInfluencer", forceResolver: false)
}
"""TransactionStatus is enum for the field status"""
enum TransactionStatus @goModel(model: "entdemo/ent/transaction.Status") {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  DENIED
  FAILED
  EXPIRED
  VOIDED
  REVERSED
  PROCESSED
  PARTIALLY_REFUNDED
  PARTIALLY_REVERSED
  PARTIALLY_VOIDED
  PARTIALLY_PROCESSED
  PARTIALLY_COMPLETED
  PARTIALLY_CANCELLED
  PARTIALLY_DENIED
  PARTIALLY_FAILED
  PARTIALLY_EXPIRED
}
"""
UpdateBankAccountInput is used for update BankAccount object.
Input was generated by ent.
"""
input UpdateBankAccountInput {
  xid: Int
}
"""
UpdateBlogPostInput is used for update BlogPost object.
Input was generated by ent.
"""
input UpdateBlogPostInput {
  title: String
  content: String
  datecreated: String
  dateupdated: String
  addAuthorIDs: [ID!]
  removeAuthorIDs: [ID!]
  clearAuthor: Boolean
}
"""
UpdateCategoryInput is used for update Category object.
Input was generated by ent.
"""
input UpdateCategoryInput {
  name: String
  description: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
}
"""
UpdateChatInput is used for update Chat object.
Input was generated by ent.
"""
input UpdateChatInput {
  xid: Int
}
"""
UpdateCommissionStructureInput is used for update CommissionStructure object.
Input was generated by ent.
"""
input UpdateCommissionStructureInput {
  name: String
  description: String
  commissionvalue: String
  commissionpercentage: String
  addProductSellerIDs: [ID!]
  removeProductSellerIDs: [ID!]
  clearProductSeller: Boolean
}
"""
UpdateContentBlockInput is used for update ContentBlock object.
Input was generated by ent.
"""
input UpdateContentBlockInput {
  primarymessage: String
  secondarymessage: String
  addImageIDs: [ID!]
  removeImageIDs: [ID!]
  clearImage: Boolean
}
"""
UpdateEmailCampaignInput is used for update EmailCampaign object.
Input was generated by ent.
"""
input UpdateEmailCampaignInput {
  xid: Int
}
"""
UpdateGroupBuyInput is used for update GroupBuy object.
Input was generated by ent.
"""
input UpdateGroupBuyInput {
  datecreated: String
  productprice: Int
  moq: Int
  startdate: String
  enddate: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransaction: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  name: String
}
"""
UpdateHeroContentInput is used for update HeroContent object.
Input was generated by ent.
"""
input UpdateHeroContentInput {
  primarymessage: String
  secondarymessage: String
  addImageIDs: [ID!]
  removeImageIDs: [ID!]
  clearImage: Boolean
}
"""
UpdateImageInput is used for update Image object.
Input was generated by ent.
"""
input UpdateImageInput {
  name: String
  description: String
  url: String
}
"""
UpdateLinkVisitInput is used for update LinkVisit object.
Input was generated by ent.
"""
input UpdateLinkVisitInput {
  datecreated: String
  ipaddress: String
  salevalue: Int
  commissionearned: Int
}
"""
UpdateMarketingCampaignInput is used for update MarketingCampaign object.
Input was generated by ent.
"""
input UpdateMarketingCampaignInput {
  name: String
  description: String
  consumerpurchasevalue: String
  customerapplicationlogic: String
  initialisationlogic: String
  startdate: String
  enddate: String
  datecreated: String
  dateupdated: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  addConsumerRewardIDs: [ID!]
  removeConsumerRewardIDs: [ID!]
  clearConsumerReward: Boolean
}
"""
UpdateNotificationInput is used for update Notification object.
Input was generated by ent.
"""
input UpdateNotificationInput {
  title: String
  content: String
  dateupdated: String
  read: Boolean
  addRecipientIDs: [ID!]
  removeRecipientIDs: [ID!]
  clearRecipient: Boolean
}
"""
UpdatePaymentMethodInput is used for update PaymentMethod object.
Input was generated by ent.
"""
input UpdatePaymentMethodInput {
  xid: Int
}
"""
UpdatePrimaryContentInput is used for update PrimaryContent object.
Input was generated by ent.
"""
input UpdatePrimaryContentInput {
  placeholder: Int
  clearPlaceholder: Boolean
  addContentBlockIDs: [ID!]
  removeContentBlockIDs: [ID!]
  clearContentBlock: Boolean
}
"""
UpdateProductAttributeInput is used for update ProductAttribute object.
Input was generated by ent.
"""
input UpdateProductAttributeInput {
  name: Int
  description: Int
  value: Int
}
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  name: String
  description: String
  price: String
  datecreated: String
  dateupdated: String
  addProductSellerIDs: [ID!]
  removeProductSellerIDs: [ID!]
  clearProductSeller: Boolean
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
  clearReviews: Boolean
  addImageIDs: [ID!]
  removeImageIDs: [ID!]
  clearImages: Boolean
  addCategoryIDs: [ID!]
  removeCategoryIDs: [ID!]
  clearCategories: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addProductAttributeIDs: [ID!]
  removeProductAttributeIDs: [ID!]
  clearProductAttributes: Boolean
  addVariationIDs: [ID!]
  removeVariationIDs: [ID!]
  clearVariations: Boolean
  addCommissionStructureIDs: [ID!]
  removeCommissionStructureIDs: [ID!]
  clearCommissionStructure: Boolean
  addShopIDs: [ID!]
  removeShopIDs: [ID!]
  addGroupBuyIDs: [ID!]
  removeGroupBuyIDs: [ID!]
  clearGroupBuys: Boolean
  addProductPageViewIDs: [ID!]
  removeProductPageViewIDs: [ID!]
  clearProductPageViews: Boolean
  addBlogPostIDs: [ID!]
  removeBlogPostIDs: [ID!]
  clearBlogPosts: Boolean
  addMarketingCampaignIDs: [ID!]
  removeMarketingCampaignIDs: [ID!]
  clearMarketingCampaigns: Boolean
  addChatIDs: [ID!]
  removeChatIDs: [ID!]
  clearChats: Boolean
  addEmailCampaignIDs: [ID!]
  removeEmailCampaignIDs: [ID!]
  clearEmailCampaign: Boolean
}
"""
UpdateProductPageViewInput is used for update ProductPageView object.
Input was generated by ent.
"""
input UpdateProductPageViewInput {
  version: Int
  addHeroContentIDs: [ID!]
  removeHeroContentIDs: [ID!]
  clearHeroContent: Boolean
  addPrimaryContentIDs: [ID!]
  removePrimaryContentIDs: [ID!]
  clearPrimaryContent: Boolean
  addViewAnalyticIDs: [ID!]
  removeViewAnalyticIDs: [ID!]
  clearViewAnalytics: Boolean
}
"""
UpdateProductVariationInput is used for update ProductVariation object.
Input was generated by ent.
"""
input UpdateProductVariationInput {
  name: String
  description: String
  price: String
  addProductAttributeIDs: [ID!]
  removeProductAttributeIDs: [ID!]
  clearProductAttributes: Boolean
}
"""
UpdateReferralLinkInput is used for update ReferralLink object.
Input was generated by ent.
"""
input UpdateReferralLinkInput {
  xid: Int
  name: String
  description: String
  link: String
  addVisitIDs: [ID!]
  removeVisitIDs: [ID!]
  clearVisits: Boolean
}
"""
UpdateRefundTransactionsInput is used for update RefundTransactions object.
Input was generated by ent.
"""
input UpdateRefundTransactionsInput {
  refundamount: String
  refundcurrency: String
  refundreason: String
  refundstatus: String
  datecreated: String
  dateupdated: String
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransaction: Boolean
}
"""
UpdateReviewInput is used for update Review object.
Input was generated by ent.
"""
input UpdateReviewInput {
  type: String
  content: String
  rating: String
  datecreated: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
  addProductCustomerIDs: [ID!]
  removeProductCustomerIDs: [ID!]
  clearProductCustomer: Boolean
}
"""
UpdateRewardTypeInput is used for update RewardType object.
Input was generated by ent.
"""
input UpdateRewardTypeInput {
  type: RewardTypeType
  val: Int
}
"""
UpdateShippingAddressInput is used for update ShippingAddress object.
Input was generated by ent.
"""
input UpdateShippingAddressInput {
  name: String
  address: String
  city: String
  state: String
  zip: String
  country: String
  dateupdated: String
}
"""
UpdateShopInput is used for update Shop object.
Input was generated by ent.
"""
input UpdateShopInput {
  name: String
  description: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransactions: Boolean
  addBankAccountIDs: [ID!]
  removeBankAccountIDs: [ID!]
  clearBankAccounts: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  name: String
  description: String
}
"""
UpdateTransactionInput is used for update Transaction object.
Input was generated by ent.
"""
input UpdateTransactionInput {
  datecreated: String
  dateupdated: String
  status: TransactionStatus
  paymentmethod: String
  paymentstatus: String
  paymentid: String
  paymentamount: String
  paymentcurrency: String
  paymentdate: String
  paymentfee: String
  paymentnet: String
  paymentpayeremail: String
  paymentpayerfirstname: String
  paymentpayerlastname: String
  paymentpayerid: String
  paymentpayerstatus: String
  paymentreceiveremail: String
  paymentreceiverid: String
  paymenttax: String
  paymenttransactionid: String
  paymenttransactiontype: String
  paymentpendingreason: String
  paymentreasoncode: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
  addOriginLinkIDs: [ID!]
  removeOriginLinkIDs: [ID!]
  clearOriginLink: Boolean
  addProductCustomerIDs: [ID!]
  removeProductCustomerIDs: [ID!]
  clearProductCustomer: Boolean
  addShopIDs: [ID!]
  removeShopIDs: [ID!]
  clearShop: Boolean
  addProductInfluencerIDs: [ID!]
  removeProductInfluencerIDs: [ID!]
  clearProductInfluencer: Boolean
}
"""
UpdateUserBuyerInput is used for update UserBuyer object.
Input was generated by ent.
"""
input UpdateUserBuyerInput {
  placeholder: Int
  clearPlaceholder: Boolean
  addUserProfileIDs: [ID!]
  removeUserProfileIDs: [ID!]
  clearUserProfile: Boolean
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
  clearReviews: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransactions: Boolean
  addLinksClickedIDs: [ID!]
  removeLinksClickedIDs: [ID!]
  clearLinksClicked: Boolean
}
"""
UpdateUserInfluencerInput is used for update UserInfluencer object.
Input was generated by ent.
"""
input UpdateUserInfluencerInput {
  placeholder: Int
  clearPlaceholder: Boolean
  addUserProfileIDs: [ID!]
  removeUserProfileIDs: [ID!]
  clearUserProfile: Boolean
  addReferralLinkIDs: [ID!]
  removeReferralLinkIDs: [ID!]
  clearReferralLinks: Boolean
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
  clearReviews: Boolean
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  email: String
  phone: String
  address: String
  city: String
  state: String
  zip: String
  country: String
  dateupdated: String
  addNotificationIDs: [ID!]
  removeNotificationIDs: [ID!]
  clearNotifications: Boolean
  addBankAccountIDs: [ID!]
  removeBankAccountIDs: [ID!]
  clearBankAccounts: Boolean
  addShippingAddressIDs: [ID!]
  removeShippingAddressIDs: [ID!]
  clearShippingAddresses: Boolean
  addPaymentMethodIDs: [ID!]
  removePaymentMethodIDs: [ID!]
  clearPaymentMethods: Boolean
}
"""
UpdateUserSellerInput is used for update UserSeller object.
Input was generated by ent.
"""
input UpdateUserSellerInput {
  brandname: String
  addUserProfileIDs: [ID!]
  removeUserProfileIDs: [ID!]
  clearUserProfile: Boolean
  addShopIDs: [ID!]
  removeShopIDs: [ID!]
  clearShops: Boolean
}
"""
UpdateViewAnalyticsInput is used for update ViewAnalytics object.
Input was generated by ent.
"""
input UpdateViewAnalyticsInput {
  views: Int
  scrolls: Int
  exits: Int
  datecreated: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProduct: Boolean
}
type User implements Node {
  id: ID!
  name: String!
  email: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: String! @goField(name: "DateUpdated", forceResolver: false)
  notifications: [Notification!]
  bankaccounts: [BankAccount!] @goField(name: "BankAccounts", forceResolver: false)
  shippingaddresses: [ShippingAddress!] @goField(name: "ShippingAddresses", forceResolver: false)
  paymentmethods: [PaymentMethod!] @goField(name: "PaymentMethods", forceResolver: false)
}
type UserBuyer implements Node {
  id: ID!
  placeholder: Int
  userprofile: [User!] @goField(name: "UserProfile", forceResolver: false)
  reviews: [Review!]
  transactions: [Transaction!]
  linksclicked: [LinkVisit!] @goField(name: "LinksClicked", forceResolver: false)
}
type UserInfluencer implements Node {
  id: ID!
  placeholder: Int
  userprofile: [User!] @goField(name: "UserProfile", forceResolver: false)
  referrallinks: [ReferralLink!] @goField(name: "ReferralLinks", forceResolver: false)
  reviews: [Review!]
  products: [Product!]
  tags: [Tag!]
}
type UserSeller implements Node {
  id: ID!
  brandname: String! @goField(name: "BrandName", forceResolver: false)
  userprofile: [User!] @goField(name: "UserProfile", forceResolver: false)
  shops: [Shop!]
}
type ViewAnalytics implements Node {
  id: ID!
  views: Int!
  scrolls: Int!
  exits: Int!
  datecreated: String! @goField(name: "DateCreated", forceResolver: false)
  product: [Product!]
}
