package main

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"entdemo/ent"
)

// CreateBankAccount is the resolver for the CreateBankAccount field.
func (r *mutationResolver) CreateBankAccount(ctx context.Context, input ent.CreateBankAccountInput) (*ent.BankAccount, error) {
	return r.client.BankAccount.Create().SetInput(input).Save(ctx)
}

// UpdateBankAccount is the resolver for the UpdateBankAccount field.
func (r *mutationResolver) UpdateBankAccount(ctx context.Context, id int, input ent.UpdateBankAccountInput) (*ent.BankAccount, error) {
	return r.client.BankAccount.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateBlogPost is the resolver for the CreateBlogPost field.
func (r *mutationResolver) CreateBlogPost(ctx context.Context, input ent.CreateBlogPostInput) (*ent.BlogPost, error) {
	return r.client.BlogPost.Create().SetInput(input).Save(ctx)
}

// UpdateBlogPost is the resolver for the UpdateBlogPost field.
func (r *mutationResolver) UpdateBlogPost(ctx context.Context, id int, input ent.UpdateBlogPostInput) (*ent.BlogPost, error) {
	return r.client.BlogPost.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateCategory is the resolver for the CreateCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input ent.CreateCategoryInput) (*ent.Category, error) {
	return r.client.Category.Create().SetInput(input).Save(ctx)
}

// UpdateCategory is the resolver for the UpdateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id int, input ent.UpdateCategoryInput) (*ent.Category, error) {
	return r.client.Category.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateChat is the resolver for the CreateChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, input ent.CreateChatInput) (*ent.Chat, error) {
	return r.client.Chat.Create().SetInput(input).Save(ctx)
}

// UpdateChat is the resolver for the UpdateChat field.
func (r *mutationResolver) UpdateChat(ctx context.Context, id int, input ent.UpdateChatInput) (*ent.Chat, error) {
	return r.client.Chat.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateCommissionStructureSchema is the resolver for the CreateCommissionStructureSchema field.
func (r *mutationResolver) CreateCommissionStructureSchema(ctx context.Context, input ent.CreateCommissionStructureSchemaInput) (*ent.CommissionStructureSchema, error) {
	return r.client.CommissionStructureSchema.Create().SetInput(input).Save(ctx)
}

// UpdateCommissionStructureSchema is the resolver for the UpdateCommissionStructureSchema field.
func (r *mutationResolver) UpdateCommissionStructureSchema(ctx context.Context, id int, input ent.UpdateCommissionStructureSchemaInput) (*ent.CommissionStructureSchema, error) {
	return r.client.CommissionStructureSchema.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateContentBlock is the resolver for the CreateContentBlock field.
func (r *mutationResolver) CreateContentBlock(ctx context.Context, input ent.CreateContentBlockInput) (*ent.ContentBlock, error) {
	return r.client.ContentBlock.Create().SetInput(input).Save(ctx)
}

// UpdateContentBlock is the resolver for the UpdateContentBlock field.
func (r *mutationResolver) UpdateContentBlock(ctx context.Context, id int, input ent.UpdateContentBlockInput) (*ent.ContentBlock, error) {
	return r.client.ContentBlock.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateEmailCampaign is the resolver for the CreateEmailCampaign field.
func (r *mutationResolver) CreateEmailCampaign(ctx context.Context, input ent.CreateEmailCampaignInput) (*ent.EmailCampaign, error) {
	return r.client.EmailCampaign.Create().SetInput(input).Save(ctx)
}

// UpdateEmailCampaign is the resolver for the UpdateEmailCampaign field.
func (r *mutationResolver) UpdateEmailCampaign(ctx context.Context, id int, input ent.UpdateEmailCampaignInput) (*ent.EmailCampaign, error) {
	return r.client.EmailCampaign.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateGroup is the resolver for the CreateGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input ent.CreateGroupInput) (*ent.Group, error) {
	return r.client.Group.Create().SetInput(input).Save(ctx)
}

// UpdateGroup is the resolver for the UpdateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id int, input ent.UpdateGroupInput) (*ent.Group, error) {
	return r.client.Group.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateGroupBuy is the resolver for the CreateGroupBuy field.
func (r *mutationResolver) CreateGroupBuy(ctx context.Context, input ent.CreateGroupBuyInput) (*ent.GroupBuy, error) {
	return r.client.GroupBuy.Create().SetInput(input).Save(ctx)
}

// UpdateGroupBuy is the resolver for the UpdateGroupBuy field.
func (r *mutationResolver) UpdateGroupBuy(ctx context.Context, id int, input ent.UpdateGroupBuyInput) (*ent.GroupBuy, error) {
	return r.client.GroupBuy.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateHeroContent is the resolver for the CreateHeroContent field.
func (r *mutationResolver) CreateHeroContent(ctx context.Context, input ent.CreateHeroContentInput) (*ent.HeroContent, error) {
	return r.client.HeroContent.Create().SetInput(input).Save(ctx)
}

// UpdateHeroContent is the resolver for the UpdateHeroContent field.
func (r *mutationResolver) UpdateHeroContent(ctx context.Context, id int, input ent.UpdateHeroContentInput) (*ent.HeroContent, error) {
	return r.client.HeroContent.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateImage is the resolver for the CreateImage field.
func (r *mutationResolver) CreateImage(ctx context.Context, input ent.CreateImageInput) (*ent.Image, error) {
	return r.client.Image.Create().SetInput(input).Save(ctx)
}

// UpdateImage is the resolver for the UpdateImage field.
func (r *mutationResolver) UpdateImage(ctx context.Context, id int, input ent.UpdateImageInput) (*ent.Image, error) {
	return r.client.Image.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateLinkVisit is the resolver for the CreateLinkVisit field.
func (r *mutationResolver) CreateLinkVisit(ctx context.Context, input ent.CreateLinkVisitInput) (*ent.LinkVisit, error) {
	return r.client.LinkVisit.Create().SetInput(input).Save(ctx)
}

// UpdateLinkVisit is the resolver for the UpdateLinkVisit field.
func (r *mutationResolver) UpdateLinkVisit(ctx context.Context, id int, input ent.UpdateLinkVisitInput) (*ent.LinkVisit, error) {
	return r.client.LinkVisit.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateMarketingCampaign is the resolver for the CreateMarketingCampaign field.
func (r *mutationResolver) CreateMarketingCampaign(ctx context.Context, input ent.CreateMarketingCampaignInput) (*ent.MarketingCampaign, error) {
	return r.client.MarketingCampaign.Create().SetInput(input).Save(ctx)
}

// UpdateMarketingCampaign is the resolver for the UpdateMarketingCampaign field.
func (r *mutationResolver) UpdateMarketingCampaign(ctx context.Context, id int, input ent.UpdateMarketingCampaignInput) (*ent.MarketingCampaign, error) {
	return r.client.MarketingCampaign.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateNotification is the resolver for the CreateNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, input ent.CreateNotificationInput) (*ent.Notification, error) {
	return r.client.Notification.Create().SetInput(input).Save(ctx)
}

// UpdateNotification is the resolver for the UpdateNotification field.
func (r *mutationResolver) UpdateNotification(ctx context.Context, id int, input ent.UpdateNotificationInput) (*ent.Notification, error) {
	return r.client.Notification.UpdateOneID(id).SetInput(input).Save(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
