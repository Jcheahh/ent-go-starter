package main

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"entdemo/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// BankAccounts is the resolver for the bankAccounts field.
func (r *queryResolver) BankAccounts(ctx context.Context) ([]*ent.BankAccount, error) {
	return r.client.BankAccount.Query().All(ctx)
}

// BlogPosts is the resolver for the blogPosts field.
func (r *queryResolver) BlogPosts(ctx context.Context) ([]*ent.BlogPost, error) {
	return r.client.BlogPost.Query().All(ctx)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*ent.Category, error) {
	return r.client.Category.Query().All(ctx)
}

// Chats is the resolver for the chats field.
func (r *queryResolver) Chats(ctx context.Context) ([]*ent.Chat, error) {
	return r.client.Chat.Query().All(ctx)
}

// CommissionStructures is the resolver for the commissionStructures field.
func (r *queryResolver) CommissionStructures(ctx context.Context) ([]*ent.CommissionStructure, error) {
	return r.client.CommissionStructure.Query().All(ctx)
}

// ContentBlocks is the resolver for the contentBlocks field.
func (r *queryResolver) ContentBlocks(ctx context.Context) ([]*ent.ContentBlock, error) {
	return r.client.ContentBlock.Query().All(ctx)
}

// EmailCampaigns is the resolver for the emailCampaigns field.
func (r *queryResolver) EmailCampaigns(ctx context.Context) ([]*ent.EmailCampaign, error) {
	return r.client.EmailCampaign.Query().All(ctx)
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*ent.Group, error) {
	return r.client.Group.Query().All(ctx)
}

// GroupBuys is the resolver for the groupBuys field.
func (r *queryResolver) GroupBuys(ctx context.Context) ([]*ent.GroupBuy, error) {
	return r.client.GroupBuy.Query().All(ctx)
}

// HeroContents is the resolver for the heroContents field.
func (r *queryResolver) HeroContents(ctx context.Context) ([]*ent.HeroContent, error) {
	return r.client.HeroContent.Query().All(ctx)
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context) ([]*ent.Image, error) {
	return r.client.Image.Query().All(ctx)
}

// LinkVisits is the resolver for the linkVisits field.
func (r *queryResolver) LinkVisits(ctx context.Context) ([]*ent.LinkVisit, error) {
	return r.client.LinkVisit.Query().All(ctx)
}

// MarketingCampaigns is the resolver for the marketingCampaigns field.
func (r *queryResolver) MarketingCampaigns(ctx context.Context) ([]*ent.MarketingCampaign, error) {
	return r.client.MarketingCampaign.Query().All(ctx)
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context) ([]*ent.Notification, error) {
	return r.client.Notification.Query().All(ctx)
}

// PaymentMethods is the resolver for the paymentMethods field.
func (r *queryResolver) PaymentMethods(ctx context.Context) ([]*ent.PaymentMethod, error) {
	return r.client.PaymentMethod.Query().All(ctx)
}

// PrimaryContents is the resolver for the primaryContents field.
func (r *queryResolver) PrimaryContents(ctx context.Context) ([]*ent.PrimaryContent, error) {
	return r.client.PrimaryContent.Query().All(ctx)
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*ent.Product, error) {
	return r.client.Product.Query().All(ctx)
}

// ProductAttributes is the resolver for the productAttributes field.
func (r *queryResolver) ProductAttributes(ctx context.Context) ([]*ent.ProductAttribute, error) {
	return r.client.ProductAttribute.Query().All(ctx)
}

// ProductPageViews is the resolver for the productPageViews field.
func (r *queryResolver) ProductPageViews(ctx context.Context) ([]*ent.ProductPageView, error) {
	return r.client.ProductPageView.Query().All(ctx)
}

// ProductVariations is the resolver for the productVariations field.
func (r *queryResolver) ProductVariations(ctx context.Context) ([]*ent.ProductVariation, error) {
	return r.client.ProductVariation.Query().All(ctx)
}

// ReferralLinks is the resolver for the referralLinks field.
func (r *queryResolver) ReferralLinks(ctx context.Context) ([]*ent.ReferralLink, error) {
	return r.client.ReferralLink.Query().All(ctx)
}

// RefundTransactionsSlice is the resolver for the refundTransactionsSlice field.
func (r *queryResolver) RefundTransactionsSlice(ctx context.Context) ([]*ent.RefundTransactions, error) {
	return r.client.RefundTransactions.Query().All(ctx)
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context) ([]*ent.Review, error) {
	return r.client.Review.Query().All(ctx)
}

// RewardTypes is the resolver for the rewardTypes field.
func (r *queryResolver) RewardTypes(ctx context.Context) ([]*ent.RewardType, error) {
	return r.client.RewardType.Query().All(ctx)
}

// ShippingAddresses is the resolver for the shippingAddresses field.
func (r *queryResolver) ShippingAddresses(ctx context.Context) ([]*ent.ShippingAddress, error) {
	return r.client.ShippingAddress.Query().All(ctx)
}

// Shops is the resolver for the shops field.
func (r *queryResolver) Shops(ctx context.Context) ([]*ent.Shop, error) {
	return r.client.Shop.Query().All(ctx)
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*ent.Tag, error) {
	return r.client.Tag.Query().All(ctx)
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context) ([]*ent.Transaction, error) {
	return r.client.Transaction.Query().All(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.client.User.Query().All(ctx)
}

// UserBuyers is the resolver for the userBuyers field.
func (r *queryResolver) UserBuyers(ctx context.Context) ([]*ent.UserBuyer, error) {
	return r.client.UserBuyer.Query().All(ctx)
}

// UserInfluencers is the resolver for the userInfluencers field.
func (r *queryResolver) UserInfluencers(ctx context.Context) ([]*ent.UserInfluencer, error) {
	return r.client.UserInfluencer.Query().All(ctx)
}

// UserSellers is the resolver for the userSellers field.
func (r *queryResolver) UserSellers(ctx context.Context) ([]*ent.UserSeller, error) {
	return r.client.UserSeller.Query().All(ctx)
}

// ViewAnalyticsSlice is the resolver for the viewAnalyticsSlice field.
func (r *queryResolver) ViewAnalyticsSlice(ctx context.Context) ([]*ent.ViewAnalytics, error) {
	return r.client.ViewAnalytics.Query().All(ctx)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
