// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/groupbuy"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/transaction"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupBuyUpdate is the builder for updating GroupBuy entities.
type GroupBuyUpdate struct {
	config
	hooks    []Hook
	mutation *GroupBuyMutation
}

// Where appends a list predicates to the GroupBuyUpdate builder.
func (gbu *GroupBuyUpdate) Where(ps ...predicate.GroupBuy) *GroupBuyUpdate {
	gbu.mutation.Where(ps...)
	return gbu
}

// SetDateCreated sets the "dateCreated" field.
func (gbu *GroupBuyUpdate) SetDateCreated(s string) *GroupBuyUpdate {
	gbu.mutation.SetDateCreated(s)
	return gbu
}

// SetProductPrice sets the "productPrice" field.
func (gbu *GroupBuyUpdate) SetProductPrice(i int) *GroupBuyUpdate {
	gbu.mutation.ResetProductPrice()
	gbu.mutation.SetProductPrice(i)
	return gbu
}

// AddProductPrice adds i to the "productPrice" field.
func (gbu *GroupBuyUpdate) AddProductPrice(i int) *GroupBuyUpdate {
	gbu.mutation.AddProductPrice(i)
	return gbu
}

// SetMoq sets the "moq" field.
func (gbu *GroupBuyUpdate) SetMoq(i int) *GroupBuyUpdate {
	gbu.mutation.ResetMoq()
	gbu.mutation.SetMoq(i)
	return gbu
}

// AddMoq adds i to the "moq" field.
func (gbu *GroupBuyUpdate) AddMoq(i int) *GroupBuyUpdate {
	gbu.mutation.AddMoq(i)
	return gbu
}

// SetStartDate sets the "startDate" field.
func (gbu *GroupBuyUpdate) SetStartDate(s string) *GroupBuyUpdate {
	gbu.mutation.SetStartDate(s)
	return gbu
}

// SetEndDate sets the "endDate" field.
func (gbu *GroupBuyUpdate) SetEndDate(s string) *GroupBuyUpdate {
	gbu.mutation.SetEndDate(s)
	return gbu
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (gbu *GroupBuyUpdate) AddProductIDs(ids ...int) *GroupBuyUpdate {
	gbu.mutation.AddProductIDs(ids...)
	return gbu
}

// AddProduct adds the "product" edges to the Product entity.
func (gbu *GroupBuyUpdate) AddProduct(p ...*Product) *GroupBuyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gbu.AddProductIDs(ids...)
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (gbu *GroupBuyUpdate) AddTransactionIDs(ids ...int) *GroupBuyUpdate {
	gbu.mutation.AddTransactionIDs(ids...)
	return gbu
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (gbu *GroupBuyUpdate) AddTransaction(t ...*Transaction) *GroupBuyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbu.AddTransactionIDs(ids...)
}

// Mutation returns the GroupBuyMutation object of the builder.
func (gbu *GroupBuyUpdate) Mutation() *GroupBuyMutation {
	return gbu.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (gbu *GroupBuyUpdate) ClearProduct() *GroupBuyUpdate {
	gbu.mutation.ClearProduct()
	return gbu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (gbu *GroupBuyUpdate) RemoveProductIDs(ids ...int) *GroupBuyUpdate {
	gbu.mutation.RemoveProductIDs(ids...)
	return gbu
}

// RemoveProduct removes "product" edges to Product entities.
func (gbu *GroupBuyUpdate) RemoveProduct(p ...*Product) *GroupBuyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gbu.RemoveProductIDs(ids...)
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (gbu *GroupBuyUpdate) ClearTransaction() *GroupBuyUpdate {
	gbu.mutation.ClearTransaction()
	return gbu
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (gbu *GroupBuyUpdate) RemoveTransactionIDs(ids ...int) *GroupBuyUpdate {
	gbu.mutation.RemoveTransactionIDs(ids...)
	return gbu
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (gbu *GroupBuyUpdate) RemoveTransaction(t ...*Transaction) *GroupBuyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gbu *GroupBuyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GroupBuyMutation](ctx, gbu.sqlSave, gbu.mutation, gbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gbu *GroupBuyUpdate) SaveX(ctx context.Context) int {
	affected, err := gbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gbu *GroupBuyUpdate) Exec(ctx context.Context) error {
	_, err := gbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbu *GroupBuyUpdate) ExecX(ctx context.Context) {
	if err := gbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gbu *GroupBuyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(groupbuy.Table, groupbuy.Columns, sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt))
	if ps := gbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbu.mutation.DateCreated(); ok {
		_spec.SetField(groupbuy.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := gbu.mutation.ProductPrice(); ok {
		_spec.SetField(groupbuy.FieldProductPrice, field.TypeInt, value)
	}
	if value, ok := gbu.mutation.AddedProductPrice(); ok {
		_spec.AddField(groupbuy.FieldProductPrice, field.TypeInt, value)
	}
	if value, ok := gbu.mutation.Moq(); ok {
		_spec.SetField(groupbuy.FieldMoq, field.TypeInt, value)
	}
	if value, ok := gbu.mutation.AddedMoq(); ok {
		_spec.AddField(groupbuy.FieldMoq, field.TypeInt, value)
	}
	if value, ok := gbu.mutation.StartDate(); ok {
		_spec.SetField(groupbuy.FieldStartDate, field.TypeString, value)
	}
	if value, ok := gbu.mutation.EndDate(); ok {
		_spec.SetField(groupbuy.FieldEndDate, field.TypeString, value)
	}
	if gbu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.RemovedProductIDs(); len(nodes) > 0 && !gbu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gbu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !gbu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupbuy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gbu.mutation.done = true
	return n, nil
}

// GroupBuyUpdateOne is the builder for updating a single GroupBuy entity.
type GroupBuyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupBuyMutation
}

// SetDateCreated sets the "dateCreated" field.
func (gbuo *GroupBuyUpdateOne) SetDateCreated(s string) *GroupBuyUpdateOne {
	gbuo.mutation.SetDateCreated(s)
	return gbuo
}

// SetProductPrice sets the "productPrice" field.
func (gbuo *GroupBuyUpdateOne) SetProductPrice(i int) *GroupBuyUpdateOne {
	gbuo.mutation.ResetProductPrice()
	gbuo.mutation.SetProductPrice(i)
	return gbuo
}

// AddProductPrice adds i to the "productPrice" field.
func (gbuo *GroupBuyUpdateOne) AddProductPrice(i int) *GroupBuyUpdateOne {
	gbuo.mutation.AddProductPrice(i)
	return gbuo
}

// SetMoq sets the "moq" field.
func (gbuo *GroupBuyUpdateOne) SetMoq(i int) *GroupBuyUpdateOne {
	gbuo.mutation.ResetMoq()
	gbuo.mutation.SetMoq(i)
	return gbuo
}

// AddMoq adds i to the "moq" field.
func (gbuo *GroupBuyUpdateOne) AddMoq(i int) *GroupBuyUpdateOne {
	gbuo.mutation.AddMoq(i)
	return gbuo
}

// SetStartDate sets the "startDate" field.
func (gbuo *GroupBuyUpdateOne) SetStartDate(s string) *GroupBuyUpdateOne {
	gbuo.mutation.SetStartDate(s)
	return gbuo
}

// SetEndDate sets the "endDate" field.
func (gbuo *GroupBuyUpdateOne) SetEndDate(s string) *GroupBuyUpdateOne {
	gbuo.mutation.SetEndDate(s)
	return gbuo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (gbuo *GroupBuyUpdateOne) AddProductIDs(ids ...int) *GroupBuyUpdateOne {
	gbuo.mutation.AddProductIDs(ids...)
	return gbuo
}

// AddProduct adds the "product" edges to the Product entity.
func (gbuo *GroupBuyUpdateOne) AddProduct(p ...*Product) *GroupBuyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gbuo.AddProductIDs(ids...)
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (gbuo *GroupBuyUpdateOne) AddTransactionIDs(ids ...int) *GroupBuyUpdateOne {
	gbuo.mutation.AddTransactionIDs(ids...)
	return gbuo
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (gbuo *GroupBuyUpdateOne) AddTransaction(t ...*Transaction) *GroupBuyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbuo.AddTransactionIDs(ids...)
}

// Mutation returns the GroupBuyMutation object of the builder.
func (gbuo *GroupBuyUpdateOne) Mutation() *GroupBuyMutation {
	return gbuo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (gbuo *GroupBuyUpdateOne) ClearProduct() *GroupBuyUpdateOne {
	gbuo.mutation.ClearProduct()
	return gbuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (gbuo *GroupBuyUpdateOne) RemoveProductIDs(ids ...int) *GroupBuyUpdateOne {
	gbuo.mutation.RemoveProductIDs(ids...)
	return gbuo
}

// RemoveProduct removes "product" edges to Product entities.
func (gbuo *GroupBuyUpdateOne) RemoveProduct(p ...*Product) *GroupBuyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gbuo.RemoveProductIDs(ids...)
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (gbuo *GroupBuyUpdateOne) ClearTransaction() *GroupBuyUpdateOne {
	gbuo.mutation.ClearTransaction()
	return gbuo
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (gbuo *GroupBuyUpdateOne) RemoveTransactionIDs(ids ...int) *GroupBuyUpdateOne {
	gbuo.mutation.RemoveTransactionIDs(ids...)
	return gbuo
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (gbuo *GroupBuyUpdateOne) RemoveTransaction(t ...*Transaction) *GroupBuyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbuo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the GroupBuyUpdate builder.
func (gbuo *GroupBuyUpdateOne) Where(ps ...predicate.GroupBuy) *GroupBuyUpdateOne {
	gbuo.mutation.Where(ps...)
	return gbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gbuo *GroupBuyUpdateOne) Select(field string, fields ...string) *GroupBuyUpdateOne {
	gbuo.fields = append([]string{field}, fields...)
	return gbuo
}

// Save executes the query and returns the updated GroupBuy entity.
func (gbuo *GroupBuyUpdateOne) Save(ctx context.Context) (*GroupBuy, error) {
	return withHooks[*GroupBuy, GroupBuyMutation](ctx, gbuo.sqlSave, gbuo.mutation, gbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gbuo *GroupBuyUpdateOne) SaveX(ctx context.Context) *GroupBuy {
	node, err := gbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gbuo *GroupBuyUpdateOne) Exec(ctx context.Context) error {
	_, err := gbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbuo *GroupBuyUpdateOne) ExecX(ctx context.Context) {
	if err := gbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gbuo *GroupBuyUpdateOne) sqlSave(ctx context.Context) (_node *GroupBuy, err error) {
	_spec := sqlgraph.NewUpdateSpec(groupbuy.Table, groupbuy.Columns, sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt))
	id, ok := gbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupBuy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupbuy.FieldID)
		for _, f := range fields {
			if !groupbuy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupbuy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbuo.mutation.DateCreated(); ok {
		_spec.SetField(groupbuy.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := gbuo.mutation.ProductPrice(); ok {
		_spec.SetField(groupbuy.FieldProductPrice, field.TypeInt, value)
	}
	if value, ok := gbuo.mutation.AddedProductPrice(); ok {
		_spec.AddField(groupbuy.FieldProductPrice, field.TypeInt, value)
	}
	if value, ok := gbuo.mutation.Moq(); ok {
		_spec.SetField(groupbuy.FieldMoq, field.TypeInt, value)
	}
	if value, ok := gbuo.mutation.AddedMoq(); ok {
		_spec.AddField(groupbuy.FieldMoq, field.TypeInt, value)
	}
	if value, ok := gbuo.mutation.StartDate(); ok {
		_spec.SetField(groupbuy.FieldStartDate, field.TypeString, value)
	}
	if value, ok := gbuo.mutation.EndDate(); ok {
		_spec.SetField(groupbuy.FieldEndDate, field.TypeString, value)
	}
	if gbuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !gbuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gbuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !gbuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupBuy{config: gbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupbuy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gbuo.mutation.done = true
	return _node, nil
}
