// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/productattribute"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductAttribute is the model entity for the ProductAttribute schema.
type ProductAttribute struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name int `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description int `json:"description,omitempty"`
	// Value holds the value of the "value" field.
	Value                                int `json:"value,omitempty"`
	product_product_attributes           *int
	product_variation_product_attributes *int
	selectValues                         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productattribute.FieldID, productattribute.FieldName, productattribute.FieldDescription, productattribute.FieldValue:
			values[i] = new(sql.NullInt64)
		case productattribute.ForeignKeys[0]: // product_product_attributes
			values[i] = new(sql.NullInt64)
		case productattribute.ForeignKeys[1]: // product_variation_product_attributes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductAttribute fields.
func (pa *ProductAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productattribute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case productattribute.FieldName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = int(value.Int64)
			}
		case productattribute.FieldDescription:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pa.Description = int(value.Int64)
			}
		case productattribute.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pa.Value = int(value.Int64)
			}
		case productattribute.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_product_attributes", value)
			} else if value.Valid {
				pa.product_product_attributes = new(int)
				*pa.product_product_attributes = int(value.Int64)
			}
		case productattribute.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_variation_product_attributes", value)
			} else if value.Valid {
				pa.product_variation_product_attributes = new(int)
				*pa.product_variation_product_attributes = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the ProductAttribute.
// This includes values selected through modifiers, order, etc.
func (pa *ProductAttribute) GetValue(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// Update returns a builder for updating this ProductAttribute.
// Note that you need to call ProductAttribute.Unwrap() before calling this method if this ProductAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *ProductAttribute) Update() *ProductAttributeUpdateOne {
	return NewProductAttributeClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the ProductAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *ProductAttribute) Unwrap() *ProductAttribute {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductAttribute is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *ProductAttribute) String() string {
	var builder strings.Builder
	builder.WriteString("ProductAttribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", pa.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", pa.Description))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", pa.Value))
	builder.WriteByte(')')
	return builder.String()
}

// ProductAttributes is a parsable slice of ProductAttribute.
type ProductAttributes []*ProductAttribute
