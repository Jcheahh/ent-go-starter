// Code generated by ent, DO NOT EDIT.

package rewardtype

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the rewardtype type in the database.
	Label = "reward_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVal holds the string denoting the val field in the database.
	FieldVal = "val"
	// Table holds the table name of the rewardtype in the database.
	Table = "reward_types"
)

// Columns holds all SQL columns for rewardtype fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldVal,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reward_types"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"marketing_campaign_consumer_reward",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDISCOUNT          Type = "DISCOUNT"
	TypeFREE_PRODUCT      Type = "FREE_PRODUCT"
	TypeSHIPPING_DISCOUNT Type = "SHIPPING_DISCOUNT"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDISCOUNT, TypeFREE_PRODUCT, TypeSHIPPING_DISCOUNT:
		return nil
	default:
		return fmt.Errorf("rewardtype: invalid enum value for type field: %q", _type)
	}
}

// Order defines the ordering method for the RewardType queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVal orders the results by the val field.
func ByVal(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldVal, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
