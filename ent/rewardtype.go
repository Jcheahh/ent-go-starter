// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/rewardtype"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RewardType is the model entity for the RewardType schema.
type RewardType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type rewardtype.Type `json:"type,omitempty"`
	// Val holds the value of the "val" field.
	Val                                int `json:"val,omitempty"`
	marketing_campaign_consumer_reward *int
	selectValues                       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RewardType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rewardtype.FieldID, rewardtype.FieldVal:
			values[i] = new(sql.NullInt64)
		case rewardtype.FieldType:
			values[i] = new(sql.NullString)
		case rewardtype.ForeignKeys[0]: // marketing_campaign_consumer_reward
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RewardType fields.
func (rt *RewardType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rewardtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case rewardtype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rt.Type = rewardtype.Type(value.String)
			}
		case rewardtype.FieldVal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field val", values[i])
			} else if value.Valid {
				rt.Val = int(value.Int64)
			}
		case rewardtype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field marketing_campaign_consumer_reward", value)
			} else if value.Valid {
				rt.marketing_campaign_consumer_reward = new(int)
				*rt.marketing_campaign_consumer_reward = int(value.Int64)
			}
		default:
			rt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RewardType.
// This includes values selected through modifiers, order, etc.
func (rt *RewardType) Value(name string) (ent.Value, error) {
	return rt.selectValues.Get(name)
}

// Update returns a builder for updating this RewardType.
// Note that you need to call RewardType.Unwrap() before calling this method if this RewardType
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RewardType) Update() *RewardTypeUpdateOne {
	return NewRewardTypeClient(rt.config).UpdateOne(rt)
}

// Unwrap unwraps the RewardType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RewardType) Unwrap() *RewardType {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RewardType is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RewardType) String() string {
	var builder strings.Builder
	builder.WriteString("RewardType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", rt.Type))
	builder.WriteString(", ")
	builder.WriteString("val=")
	builder.WriteString(fmt.Sprintf("%v", rt.Val))
	builder.WriteByte(')')
	return builder.String()
}

// RewardTypes is a parsable slice of RewardType.
type RewardTypes []*RewardType
