// Code generated by ent, DO NOT EDIT.

package viewanalytics

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLTE(FieldID, id))
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldViews, v))
}

// Scrolls applies equality check predicate on the "scrolls" field. It's identical to ScrollsEQ.
func Scrolls(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldScrolls, v))
}

// Exits applies equality check predicate on the "exits" field. It's identical to ExitsEQ.
func Exits(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldExits, v))
}

// DateCreated applies equality check predicate on the "dateCreated" field. It's identical to DateCreatedEQ.
func DateCreated(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldDateCreated, v))
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldViews, v))
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNEQ(FieldViews, v))
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldIn(FieldViews, vs...))
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNotIn(FieldViews, vs...))
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGT(FieldViews, v))
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGTE(FieldViews, v))
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLT(FieldViews, v))
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLTE(FieldViews, v))
}

// ScrollsEQ applies the EQ predicate on the "scrolls" field.
func ScrollsEQ(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldScrolls, v))
}

// ScrollsNEQ applies the NEQ predicate on the "scrolls" field.
func ScrollsNEQ(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNEQ(FieldScrolls, v))
}

// ScrollsIn applies the In predicate on the "scrolls" field.
func ScrollsIn(vs ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldIn(FieldScrolls, vs...))
}

// ScrollsNotIn applies the NotIn predicate on the "scrolls" field.
func ScrollsNotIn(vs ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNotIn(FieldScrolls, vs...))
}

// ScrollsGT applies the GT predicate on the "scrolls" field.
func ScrollsGT(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGT(FieldScrolls, v))
}

// ScrollsGTE applies the GTE predicate on the "scrolls" field.
func ScrollsGTE(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGTE(FieldScrolls, v))
}

// ScrollsLT applies the LT predicate on the "scrolls" field.
func ScrollsLT(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLT(FieldScrolls, v))
}

// ScrollsLTE applies the LTE predicate on the "scrolls" field.
func ScrollsLTE(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLTE(FieldScrolls, v))
}

// ExitsEQ applies the EQ predicate on the "exits" field.
func ExitsEQ(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldExits, v))
}

// ExitsNEQ applies the NEQ predicate on the "exits" field.
func ExitsNEQ(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNEQ(FieldExits, v))
}

// ExitsIn applies the In predicate on the "exits" field.
func ExitsIn(vs ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldIn(FieldExits, vs...))
}

// ExitsNotIn applies the NotIn predicate on the "exits" field.
func ExitsNotIn(vs ...int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNotIn(FieldExits, vs...))
}

// ExitsGT applies the GT predicate on the "exits" field.
func ExitsGT(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGT(FieldExits, v))
}

// ExitsGTE applies the GTE predicate on the "exits" field.
func ExitsGTE(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGTE(FieldExits, v))
}

// ExitsLT applies the LT predicate on the "exits" field.
func ExitsLT(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLT(FieldExits, v))
}

// ExitsLTE applies the LTE predicate on the "exits" field.
func ExitsLTE(v int) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLTE(FieldExits, v))
}

// DateCreatedEQ applies the EQ predicate on the "dateCreated" field.
func DateCreatedEQ(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "dateCreated" field.
func DateCreatedNEQ(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "dateCreated" field.
func DateCreatedIn(vs ...string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "dateCreated" field.
func DateCreatedNotIn(vs ...string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "dateCreated" field.
func DateCreatedGT(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "dateCreated" field.
func DateCreatedGTE(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "dateCreated" field.
func DateCreatedLT(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "dateCreated" field.
func DateCreatedLTE(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldLTE(FieldDateCreated, v))
}

// DateCreatedContains applies the Contains predicate on the "dateCreated" field.
func DateCreatedContains(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldContains(FieldDateCreated, v))
}

// DateCreatedHasPrefix applies the HasPrefix predicate on the "dateCreated" field.
func DateCreatedHasPrefix(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldHasPrefix(FieldDateCreated, v))
}

// DateCreatedHasSuffix applies the HasSuffix predicate on the "dateCreated" field.
func DateCreatedHasSuffix(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldHasSuffix(FieldDateCreated, v))
}

// DateCreatedEqualFold applies the EqualFold predicate on the "dateCreated" field.
func DateCreatedEqualFold(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldEqualFold(FieldDateCreated, v))
}

// DateCreatedContainsFold applies the ContainsFold predicate on the "dateCreated" field.
func DateCreatedContainsFold(v string) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(sql.FieldContainsFold(FieldDateCreated, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ViewAnalytics {
	return predicate.ViewAnalytics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ViewAnalytics) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ViewAnalytics) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ViewAnalytics) predicate.ViewAnalytics {
	return predicate.ViewAnalytics(func(s *sql.Selector) {
		p(s.Not())
	})
}
