// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/referrallink"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReferralLink is the model entity for the ReferralLink schema.
type ReferralLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Xid holds the value of the "xid" field.
	Xid int `json:"xid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReferralLinkQuery when eager-loading is set.
	Edges                          ReferralLinkEdges `json:"edges"`
	user_influencer_referral_links *int
	selectValues                   sql.SelectValues
}

// ReferralLinkEdges holds the relations/edges for other nodes in the graph.
type ReferralLinkEdges struct {
	// Visits holds the value of the visits edge.
	Visits []*LinkVisit `json:"visits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedVisits map[string][]*LinkVisit
}

// VisitsOrErr returns the Visits value or an error if the edge
// was not loaded in eager-loading.
func (e ReferralLinkEdges) VisitsOrErr() ([]*LinkVisit, error) {
	if e.loadedTypes[0] {
		return e.Visits, nil
	}
	return nil, &NotLoadedError{edge: "visits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReferralLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case referrallink.FieldID, referrallink.FieldXid:
			values[i] = new(sql.NullInt64)
		case referrallink.FieldName, referrallink.FieldDescription, referrallink.FieldLink:
			values[i] = new(sql.NullString)
		case referrallink.ForeignKeys[0]: // user_influencer_referral_links
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReferralLink fields.
func (rl *ReferralLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case referrallink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rl.ID = int(value.Int64)
		case referrallink.FieldXid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field xid", values[i])
			} else if value.Valid {
				rl.Xid = int(value.Int64)
			}
		case referrallink.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rl.Name = value.String
			}
		case referrallink.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rl.Description = value.String
			}
		case referrallink.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				rl.Link = value.String
			}
		case referrallink.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_influencer_referral_links", value)
			} else if value.Valid {
				rl.user_influencer_referral_links = new(int)
				*rl.user_influencer_referral_links = int(value.Int64)
			}
		default:
			rl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReferralLink.
// This includes values selected through modifiers, order, etc.
func (rl *ReferralLink) Value(name string) (ent.Value, error) {
	return rl.selectValues.Get(name)
}

// QueryVisits queries the "visits" edge of the ReferralLink entity.
func (rl *ReferralLink) QueryVisits() *LinkVisitQuery {
	return NewReferralLinkClient(rl.config).QueryVisits(rl)
}

// Update returns a builder for updating this ReferralLink.
// Note that you need to call ReferralLink.Unwrap() before calling this method if this ReferralLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *ReferralLink) Update() *ReferralLinkUpdateOne {
	return NewReferralLinkClient(rl.config).UpdateOne(rl)
}

// Unwrap unwraps the ReferralLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *ReferralLink) Unwrap() *ReferralLink {
	_tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReferralLink is not a transactional entity")
	}
	rl.config.driver = _tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *ReferralLink) String() string {
	var builder strings.Builder
	builder.WriteString("ReferralLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rl.ID))
	builder.WriteString("xid=")
	builder.WriteString(fmt.Sprintf("%v", rl.Xid))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rl.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rl.Description)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(rl.Link)
	builder.WriteByte(')')
	return builder.String()
}

// NamedVisits returns the Visits named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rl *ReferralLink) NamedVisits(name string) ([]*LinkVisit, error) {
	if rl.Edges.namedVisits == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rl.Edges.namedVisits[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rl *ReferralLink) appendNamedVisits(name string, edges ...*LinkVisit) {
	if rl.Edges.namedVisits == nil {
		rl.Edges.namedVisits = make(map[string][]*LinkVisit)
	}
	if len(edges) == 0 {
		rl.Edges.namedVisits[name] = []*LinkVisit{}
	} else {
		rl.Edges.namedVisits[name] = append(rl.Edges.namedVisits[name], edges...)
	}
}

// ReferralLinks is a parsable slice of ReferralLink.
type ReferralLinks []*ReferralLink
