// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// DateCreated applies equality check predicate on the "dateCreated" field. It's identical to DateCreatedEQ.
func DateCreated(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDateCreated, v))
}

// DateUpdated applies equality check predicate on the "dateUpdated" field. It's identical to DateUpdatedEQ.
func DateUpdated(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDateUpdated, v))
}

// PaymentMethod applies equality check predicate on the "paymentMethod" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentStatus applies equality check predicate on the "paymentStatus" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentId applies equality check predicate on the "paymentId" field. It's identical to PaymentIdEQ.
func PaymentId(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentId, v))
}

// PaymentAmount applies equality check predicate on the "paymentAmount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentAmount, v))
}

// PaymentCurrency applies equality check predicate on the "paymentCurrency" field. It's identical to PaymentCurrencyEQ.
func PaymentCurrency(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentCurrency, v))
}

// PaymentDate applies equality check predicate on the "paymentDate" field. It's identical to PaymentDateEQ.
func PaymentDate(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentDate, v))
}

// PaymentFee applies equality check predicate on the "paymentFee" field. It's identical to PaymentFeeEQ.
func PaymentFee(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentFee, v))
}

// PaymentNet applies equality check predicate on the "paymentNet" field. It's identical to PaymentNetEQ.
func PaymentNet(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentNet, v))
}

// PaymentPayerEmail applies equality check predicate on the "paymentPayerEmail" field. It's identical to PaymentPayerEmailEQ.
func PaymentPayerEmail(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerEmail, v))
}

// PaymentPayerFirstName applies equality check predicate on the "paymentPayerFirstName" field. It's identical to PaymentPayerFirstNameEQ.
func PaymentPayerFirstName(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerFirstName, v))
}

// PaymentPayerLastName applies equality check predicate on the "paymentPayerLastName" field. It's identical to PaymentPayerLastNameEQ.
func PaymentPayerLastName(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerLastName, v))
}

// PaymentPayerId applies equality check predicate on the "paymentPayerId" field. It's identical to PaymentPayerIdEQ.
func PaymentPayerId(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerId, v))
}

// PaymentPayerStatus applies equality check predicate on the "paymentPayerStatus" field. It's identical to PaymentPayerStatusEQ.
func PaymentPayerStatus(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerStatus, v))
}

// PaymentReceiverEmail applies equality check predicate on the "paymentReceiverEmail" field. It's identical to PaymentReceiverEmailEQ.
func PaymentReceiverEmail(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverId applies equality check predicate on the "paymentReceiverId" field. It's identical to PaymentReceiverIdEQ.
func PaymentReceiverId(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentReceiverId, v))
}

// PaymentTax applies equality check predicate on the "paymentTax" field. It's identical to PaymentTaxEQ.
func PaymentTax(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentTax, v))
}

// PaymentTransactionId applies equality check predicate on the "paymentTransactionId" field. It's identical to PaymentTransactionIdEQ.
func PaymentTransactionId(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentTransactionId, v))
}

// PaymentTransactionType applies equality check predicate on the "paymentTransactionType" field. It's identical to PaymentTransactionTypeEQ.
func PaymentTransactionType(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentTransactionType, v))
}

// PaymentPendingReason applies equality check predicate on the "paymentPendingReason" field. It's identical to PaymentPendingReasonEQ.
func PaymentPendingReason(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPendingReason, v))
}

// PaymentReasonCode applies equality check predicate on the "paymentReasonCode" field. It's identical to PaymentReasonCodeEQ.
func PaymentReasonCode(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentReasonCode, v))
}

// DateCreatedEQ applies the EQ predicate on the "dateCreated" field.
func DateCreatedEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "dateCreated" field.
func DateCreatedNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "dateCreated" field.
func DateCreatedIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "dateCreated" field.
func DateCreatedNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "dateCreated" field.
func DateCreatedGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "dateCreated" field.
func DateCreatedGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "dateCreated" field.
func DateCreatedLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "dateCreated" field.
func DateCreatedLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDateCreated, v))
}

// DateCreatedContains applies the Contains predicate on the "dateCreated" field.
func DateCreatedContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldDateCreated, v))
}

// DateCreatedHasPrefix applies the HasPrefix predicate on the "dateCreated" field.
func DateCreatedHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldDateCreated, v))
}

// DateCreatedHasSuffix applies the HasSuffix predicate on the "dateCreated" field.
func DateCreatedHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldDateCreated, v))
}

// DateCreatedEqualFold applies the EqualFold predicate on the "dateCreated" field.
func DateCreatedEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldDateCreated, v))
}

// DateCreatedContainsFold applies the ContainsFold predicate on the "dateCreated" field.
func DateCreatedContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldDateCreated, v))
}

// DateUpdatedEQ applies the EQ predicate on the "dateUpdated" field.
func DateUpdatedEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDateUpdated, v))
}

// DateUpdatedNEQ applies the NEQ predicate on the "dateUpdated" field.
func DateUpdatedNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDateUpdated, v))
}

// DateUpdatedIn applies the In predicate on the "dateUpdated" field.
func DateUpdatedIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDateUpdated, vs...))
}

// DateUpdatedNotIn applies the NotIn predicate on the "dateUpdated" field.
func DateUpdatedNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDateUpdated, vs...))
}

// DateUpdatedGT applies the GT predicate on the "dateUpdated" field.
func DateUpdatedGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDateUpdated, v))
}

// DateUpdatedGTE applies the GTE predicate on the "dateUpdated" field.
func DateUpdatedGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDateUpdated, v))
}

// DateUpdatedLT applies the LT predicate on the "dateUpdated" field.
func DateUpdatedLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDateUpdated, v))
}

// DateUpdatedLTE applies the LTE predicate on the "dateUpdated" field.
func DateUpdatedLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDateUpdated, v))
}

// DateUpdatedContains applies the Contains predicate on the "dateUpdated" field.
func DateUpdatedContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldDateUpdated, v))
}

// DateUpdatedHasPrefix applies the HasPrefix predicate on the "dateUpdated" field.
func DateUpdatedHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldDateUpdated, v))
}

// DateUpdatedHasSuffix applies the HasSuffix predicate on the "dateUpdated" field.
func DateUpdatedHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldDateUpdated, v))
}

// DateUpdatedEqualFold applies the EqualFold predicate on the "dateUpdated" field.
func DateUpdatedEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldDateUpdated, v))
}

// DateUpdatedContainsFold applies the ContainsFold predicate on the "dateUpdated" field.
func DateUpdatedContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldDateUpdated, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldStatus, vs...))
}

// PaymentMethodEQ applies the EQ predicate on the "paymentMethod" field.
func PaymentMethodEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "paymentMethod" field.
func PaymentMethodNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "paymentMethod" field.
func PaymentMethodIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "paymentMethod" field.
func PaymentMethodNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "paymentMethod" field.
func PaymentMethodGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "paymentMethod" field.
func PaymentMethodGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "paymentMethod" field.
func PaymentMethodLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "paymentMethod" field.
func PaymentMethodLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "paymentMethod" field.
func PaymentMethodContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "paymentMethod" field.
func PaymentMethodHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "paymentMethod" field.
func PaymentMethodHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "paymentMethod" field.
func PaymentMethodEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "paymentMethod" field.
func PaymentMethodContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// PaymentStatusEQ applies the EQ predicate on the "paymentStatus" field.
func PaymentStatusEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "paymentStatus" field.
func PaymentStatusNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "paymentStatus" field.
func PaymentStatusIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "paymentStatus" field.
func PaymentStatusNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// PaymentStatusGT applies the GT predicate on the "paymentStatus" field.
func PaymentStatusGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentStatus, v))
}

// PaymentStatusGTE applies the GTE predicate on the "paymentStatus" field.
func PaymentStatusGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentStatus, v))
}

// PaymentStatusLT applies the LT predicate on the "paymentStatus" field.
func PaymentStatusLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentStatus, v))
}

// PaymentStatusLTE applies the LTE predicate on the "paymentStatus" field.
func PaymentStatusLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentStatus, v))
}

// PaymentStatusContains applies the Contains predicate on the "paymentStatus" field.
func PaymentStatusContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentStatus, v))
}

// PaymentStatusHasPrefix applies the HasPrefix predicate on the "paymentStatus" field.
func PaymentStatusHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentStatus, v))
}

// PaymentStatusHasSuffix applies the HasSuffix predicate on the "paymentStatus" field.
func PaymentStatusHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentStatus, v))
}

// PaymentStatusEqualFold applies the EqualFold predicate on the "paymentStatus" field.
func PaymentStatusEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentStatus, v))
}

// PaymentStatusContainsFold applies the ContainsFold predicate on the "paymentStatus" field.
func PaymentStatusContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentStatus, v))
}

// PaymentIdEQ applies the EQ predicate on the "paymentId" field.
func PaymentIdEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentId, v))
}

// PaymentIdNEQ applies the NEQ predicate on the "paymentId" field.
func PaymentIdNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentId, v))
}

// PaymentIdIn applies the In predicate on the "paymentId" field.
func PaymentIdIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentId, vs...))
}

// PaymentIdNotIn applies the NotIn predicate on the "paymentId" field.
func PaymentIdNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentId, vs...))
}

// PaymentIdGT applies the GT predicate on the "paymentId" field.
func PaymentIdGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentId, v))
}

// PaymentIdGTE applies the GTE predicate on the "paymentId" field.
func PaymentIdGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentId, v))
}

// PaymentIdLT applies the LT predicate on the "paymentId" field.
func PaymentIdLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentId, v))
}

// PaymentIdLTE applies the LTE predicate on the "paymentId" field.
func PaymentIdLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentId, v))
}

// PaymentIdContains applies the Contains predicate on the "paymentId" field.
func PaymentIdContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentId, v))
}

// PaymentIdHasPrefix applies the HasPrefix predicate on the "paymentId" field.
func PaymentIdHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentId, v))
}

// PaymentIdHasSuffix applies the HasSuffix predicate on the "paymentId" field.
func PaymentIdHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentId, v))
}

// PaymentIdEqualFold applies the EqualFold predicate on the "paymentId" field.
func PaymentIdEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentId, v))
}

// PaymentIdContainsFold applies the ContainsFold predicate on the "paymentId" field.
func PaymentIdContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentId, v))
}

// PaymentAmountEQ applies the EQ predicate on the "paymentAmount" field.
func PaymentAmountEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentAmount, v))
}

// PaymentAmountNEQ applies the NEQ predicate on the "paymentAmount" field.
func PaymentAmountNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentAmount, v))
}

// PaymentAmountIn applies the In predicate on the "paymentAmount" field.
func PaymentAmountIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentAmount, vs...))
}

// PaymentAmountNotIn applies the NotIn predicate on the "paymentAmount" field.
func PaymentAmountNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentAmount, vs...))
}

// PaymentAmountGT applies the GT predicate on the "paymentAmount" field.
func PaymentAmountGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentAmount, v))
}

// PaymentAmountGTE applies the GTE predicate on the "paymentAmount" field.
func PaymentAmountGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentAmount, v))
}

// PaymentAmountLT applies the LT predicate on the "paymentAmount" field.
func PaymentAmountLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentAmount, v))
}

// PaymentAmountLTE applies the LTE predicate on the "paymentAmount" field.
func PaymentAmountLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentAmount, v))
}

// PaymentAmountContains applies the Contains predicate on the "paymentAmount" field.
func PaymentAmountContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentAmount, v))
}

// PaymentAmountHasPrefix applies the HasPrefix predicate on the "paymentAmount" field.
func PaymentAmountHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentAmount, v))
}

// PaymentAmountHasSuffix applies the HasSuffix predicate on the "paymentAmount" field.
func PaymentAmountHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentAmount, v))
}

// PaymentAmountEqualFold applies the EqualFold predicate on the "paymentAmount" field.
func PaymentAmountEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentAmount, v))
}

// PaymentAmountContainsFold applies the ContainsFold predicate on the "paymentAmount" field.
func PaymentAmountContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentAmount, v))
}

// PaymentCurrencyEQ applies the EQ predicate on the "paymentCurrency" field.
func PaymentCurrencyEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentCurrency, v))
}

// PaymentCurrencyNEQ applies the NEQ predicate on the "paymentCurrency" field.
func PaymentCurrencyNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentCurrency, v))
}

// PaymentCurrencyIn applies the In predicate on the "paymentCurrency" field.
func PaymentCurrencyIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentCurrency, vs...))
}

// PaymentCurrencyNotIn applies the NotIn predicate on the "paymentCurrency" field.
func PaymentCurrencyNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentCurrency, vs...))
}

// PaymentCurrencyGT applies the GT predicate on the "paymentCurrency" field.
func PaymentCurrencyGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentCurrency, v))
}

// PaymentCurrencyGTE applies the GTE predicate on the "paymentCurrency" field.
func PaymentCurrencyGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentCurrency, v))
}

// PaymentCurrencyLT applies the LT predicate on the "paymentCurrency" field.
func PaymentCurrencyLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentCurrency, v))
}

// PaymentCurrencyLTE applies the LTE predicate on the "paymentCurrency" field.
func PaymentCurrencyLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentCurrency, v))
}

// PaymentCurrencyContains applies the Contains predicate on the "paymentCurrency" field.
func PaymentCurrencyContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentCurrency, v))
}

// PaymentCurrencyHasPrefix applies the HasPrefix predicate on the "paymentCurrency" field.
func PaymentCurrencyHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentCurrency, v))
}

// PaymentCurrencyHasSuffix applies the HasSuffix predicate on the "paymentCurrency" field.
func PaymentCurrencyHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentCurrency, v))
}

// PaymentCurrencyEqualFold applies the EqualFold predicate on the "paymentCurrency" field.
func PaymentCurrencyEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentCurrency, v))
}

// PaymentCurrencyContainsFold applies the ContainsFold predicate on the "paymentCurrency" field.
func PaymentCurrencyContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentCurrency, v))
}

// PaymentDateEQ applies the EQ predicate on the "paymentDate" field.
func PaymentDateEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentDate, v))
}

// PaymentDateNEQ applies the NEQ predicate on the "paymentDate" field.
func PaymentDateNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentDate, v))
}

// PaymentDateIn applies the In predicate on the "paymentDate" field.
func PaymentDateIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentDate, vs...))
}

// PaymentDateNotIn applies the NotIn predicate on the "paymentDate" field.
func PaymentDateNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentDate, vs...))
}

// PaymentDateGT applies the GT predicate on the "paymentDate" field.
func PaymentDateGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentDate, v))
}

// PaymentDateGTE applies the GTE predicate on the "paymentDate" field.
func PaymentDateGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentDate, v))
}

// PaymentDateLT applies the LT predicate on the "paymentDate" field.
func PaymentDateLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentDate, v))
}

// PaymentDateLTE applies the LTE predicate on the "paymentDate" field.
func PaymentDateLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentDate, v))
}

// PaymentDateContains applies the Contains predicate on the "paymentDate" field.
func PaymentDateContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentDate, v))
}

// PaymentDateHasPrefix applies the HasPrefix predicate on the "paymentDate" field.
func PaymentDateHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentDate, v))
}

// PaymentDateHasSuffix applies the HasSuffix predicate on the "paymentDate" field.
func PaymentDateHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentDate, v))
}

// PaymentDateEqualFold applies the EqualFold predicate on the "paymentDate" field.
func PaymentDateEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentDate, v))
}

// PaymentDateContainsFold applies the ContainsFold predicate on the "paymentDate" field.
func PaymentDateContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentDate, v))
}

// PaymentFeeEQ applies the EQ predicate on the "paymentFee" field.
func PaymentFeeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentFee, v))
}

// PaymentFeeNEQ applies the NEQ predicate on the "paymentFee" field.
func PaymentFeeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentFee, v))
}

// PaymentFeeIn applies the In predicate on the "paymentFee" field.
func PaymentFeeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentFee, vs...))
}

// PaymentFeeNotIn applies the NotIn predicate on the "paymentFee" field.
func PaymentFeeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentFee, vs...))
}

// PaymentFeeGT applies the GT predicate on the "paymentFee" field.
func PaymentFeeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentFee, v))
}

// PaymentFeeGTE applies the GTE predicate on the "paymentFee" field.
func PaymentFeeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentFee, v))
}

// PaymentFeeLT applies the LT predicate on the "paymentFee" field.
func PaymentFeeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentFee, v))
}

// PaymentFeeLTE applies the LTE predicate on the "paymentFee" field.
func PaymentFeeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentFee, v))
}

// PaymentFeeContains applies the Contains predicate on the "paymentFee" field.
func PaymentFeeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentFee, v))
}

// PaymentFeeHasPrefix applies the HasPrefix predicate on the "paymentFee" field.
func PaymentFeeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentFee, v))
}

// PaymentFeeHasSuffix applies the HasSuffix predicate on the "paymentFee" field.
func PaymentFeeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentFee, v))
}

// PaymentFeeEqualFold applies the EqualFold predicate on the "paymentFee" field.
func PaymentFeeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentFee, v))
}

// PaymentFeeContainsFold applies the ContainsFold predicate on the "paymentFee" field.
func PaymentFeeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentFee, v))
}

// PaymentNetEQ applies the EQ predicate on the "paymentNet" field.
func PaymentNetEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentNet, v))
}

// PaymentNetNEQ applies the NEQ predicate on the "paymentNet" field.
func PaymentNetNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentNet, v))
}

// PaymentNetIn applies the In predicate on the "paymentNet" field.
func PaymentNetIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentNet, vs...))
}

// PaymentNetNotIn applies the NotIn predicate on the "paymentNet" field.
func PaymentNetNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentNet, vs...))
}

// PaymentNetGT applies the GT predicate on the "paymentNet" field.
func PaymentNetGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentNet, v))
}

// PaymentNetGTE applies the GTE predicate on the "paymentNet" field.
func PaymentNetGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentNet, v))
}

// PaymentNetLT applies the LT predicate on the "paymentNet" field.
func PaymentNetLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentNet, v))
}

// PaymentNetLTE applies the LTE predicate on the "paymentNet" field.
func PaymentNetLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentNet, v))
}

// PaymentNetContains applies the Contains predicate on the "paymentNet" field.
func PaymentNetContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentNet, v))
}

// PaymentNetHasPrefix applies the HasPrefix predicate on the "paymentNet" field.
func PaymentNetHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentNet, v))
}

// PaymentNetHasSuffix applies the HasSuffix predicate on the "paymentNet" field.
func PaymentNetHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentNet, v))
}

// PaymentNetEqualFold applies the EqualFold predicate on the "paymentNet" field.
func PaymentNetEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentNet, v))
}

// PaymentNetContainsFold applies the ContainsFold predicate on the "paymentNet" field.
func PaymentNetContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentNet, v))
}

// PaymentPayerEmailEQ applies the EQ predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailNEQ applies the NEQ predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailIn applies the In predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentPayerEmail, vs...))
}

// PaymentPayerEmailNotIn applies the NotIn predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentPayerEmail, vs...))
}

// PaymentPayerEmailGT applies the GT predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailGTE applies the GTE predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailLT applies the LT predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailLTE applies the LTE predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailContains applies the Contains predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailHasPrefix applies the HasPrefix predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailHasSuffix applies the HasSuffix predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailEqualFold applies the EqualFold predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentPayerEmail, v))
}

// PaymentPayerEmailContainsFold applies the ContainsFold predicate on the "paymentPayerEmail" field.
func PaymentPayerEmailContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentPayerEmail, v))
}

// PaymentPayerFirstNameEQ applies the EQ predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameNEQ applies the NEQ predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameIn applies the In predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentPayerFirstName, vs...))
}

// PaymentPayerFirstNameNotIn applies the NotIn predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentPayerFirstName, vs...))
}

// PaymentPayerFirstNameGT applies the GT predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameGTE applies the GTE predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameLT applies the LT predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameLTE applies the LTE predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameContains applies the Contains predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameHasPrefix applies the HasPrefix predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameHasSuffix applies the HasSuffix predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameEqualFold applies the EqualFold predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentPayerFirstName, v))
}

// PaymentPayerFirstNameContainsFold applies the ContainsFold predicate on the "paymentPayerFirstName" field.
func PaymentPayerFirstNameContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentPayerFirstName, v))
}

// PaymentPayerLastNameEQ applies the EQ predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameNEQ applies the NEQ predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameIn applies the In predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentPayerLastName, vs...))
}

// PaymentPayerLastNameNotIn applies the NotIn predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentPayerLastName, vs...))
}

// PaymentPayerLastNameGT applies the GT predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameGTE applies the GTE predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameLT applies the LT predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameLTE applies the LTE predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameContains applies the Contains predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameHasPrefix applies the HasPrefix predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameHasSuffix applies the HasSuffix predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameEqualFold applies the EqualFold predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentPayerLastName, v))
}

// PaymentPayerLastNameContainsFold applies the ContainsFold predicate on the "paymentPayerLastName" field.
func PaymentPayerLastNameContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentPayerLastName, v))
}

// PaymentPayerIdEQ applies the EQ predicate on the "paymentPayerId" field.
func PaymentPayerIdEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerId, v))
}

// PaymentPayerIdNEQ applies the NEQ predicate on the "paymentPayerId" field.
func PaymentPayerIdNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentPayerId, v))
}

// PaymentPayerIdIn applies the In predicate on the "paymentPayerId" field.
func PaymentPayerIdIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentPayerId, vs...))
}

// PaymentPayerIdNotIn applies the NotIn predicate on the "paymentPayerId" field.
func PaymentPayerIdNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentPayerId, vs...))
}

// PaymentPayerIdGT applies the GT predicate on the "paymentPayerId" field.
func PaymentPayerIdGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentPayerId, v))
}

// PaymentPayerIdGTE applies the GTE predicate on the "paymentPayerId" field.
func PaymentPayerIdGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentPayerId, v))
}

// PaymentPayerIdLT applies the LT predicate on the "paymentPayerId" field.
func PaymentPayerIdLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentPayerId, v))
}

// PaymentPayerIdLTE applies the LTE predicate on the "paymentPayerId" field.
func PaymentPayerIdLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentPayerId, v))
}

// PaymentPayerIdContains applies the Contains predicate on the "paymentPayerId" field.
func PaymentPayerIdContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentPayerId, v))
}

// PaymentPayerIdHasPrefix applies the HasPrefix predicate on the "paymentPayerId" field.
func PaymentPayerIdHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentPayerId, v))
}

// PaymentPayerIdHasSuffix applies the HasSuffix predicate on the "paymentPayerId" field.
func PaymentPayerIdHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentPayerId, v))
}

// PaymentPayerIdEqualFold applies the EqualFold predicate on the "paymentPayerId" field.
func PaymentPayerIdEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentPayerId, v))
}

// PaymentPayerIdContainsFold applies the ContainsFold predicate on the "paymentPayerId" field.
func PaymentPayerIdContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentPayerId, v))
}

// PaymentPayerStatusEQ applies the EQ predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusNEQ applies the NEQ predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusIn applies the In predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentPayerStatus, vs...))
}

// PaymentPayerStatusNotIn applies the NotIn predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentPayerStatus, vs...))
}

// PaymentPayerStatusGT applies the GT predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusGTE applies the GTE predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusLT applies the LT predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusLTE applies the LTE predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusContains applies the Contains predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusHasPrefix applies the HasPrefix predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusHasSuffix applies the HasSuffix predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusEqualFold applies the EqualFold predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentPayerStatus, v))
}

// PaymentPayerStatusContainsFold applies the ContainsFold predicate on the "paymentPayerStatus" field.
func PaymentPayerStatusContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentPayerStatus, v))
}

// PaymentReceiverEmailEQ applies the EQ predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailNEQ applies the NEQ predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailIn applies the In predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentReceiverEmail, vs...))
}

// PaymentReceiverEmailNotIn applies the NotIn predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentReceiverEmail, vs...))
}

// PaymentReceiverEmailGT applies the GT predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailGTE applies the GTE predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailLT applies the LT predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailLTE applies the LTE predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailContains applies the Contains predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailHasPrefix applies the HasPrefix predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailHasSuffix applies the HasSuffix predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailEqualFold applies the EqualFold predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverEmailContainsFold applies the ContainsFold predicate on the "paymentReceiverEmail" field.
func PaymentReceiverEmailContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentReceiverEmail, v))
}

// PaymentReceiverIdEQ applies the EQ predicate on the "paymentReceiverId" field.
func PaymentReceiverIdEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdNEQ applies the NEQ predicate on the "paymentReceiverId" field.
func PaymentReceiverIdNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdIn applies the In predicate on the "paymentReceiverId" field.
func PaymentReceiverIdIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentReceiverId, vs...))
}

// PaymentReceiverIdNotIn applies the NotIn predicate on the "paymentReceiverId" field.
func PaymentReceiverIdNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentReceiverId, vs...))
}

// PaymentReceiverIdGT applies the GT predicate on the "paymentReceiverId" field.
func PaymentReceiverIdGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdGTE applies the GTE predicate on the "paymentReceiverId" field.
func PaymentReceiverIdGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdLT applies the LT predicate on the "paymentReceiverId" field.
func PaymentReceiverIdLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdLTE applies the LTE predicate on the "paymentReceiverId" field.
func PaymentReceiverIdLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdContains applies the Contains predicate on the "paymentReceiverId" field.
func PaymentReceiverIdContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdHasPrefix applies the HasPrefix predicate on the "paymentReceiverId" field.
func PaymentReceiverIdHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdHasSuffix applies the HasSuffix predicate on the "paymentReceiverId" field.
func PaymentReceiverIdHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdEqualFold applies the EqualFold predicate on the "paymentReceiverId" field.
func PaymentReceiverIdEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentReceiverId, v))
}

// PaymentReceiverIdContainsFold applies the ContainsFold predicate on the "paymentReceiverId" field.
func PaymentReceiverIdContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentReceiverId, v))
}

// PaymentTaxEQ applies the EQ predicate on the "paymentTax" field.
func PaymentTaxEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentTax, v))
}

// PaymentTaxNEQ applies the NEQ predicate on the "paymentTax" field.
func PaymentTaxNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentTax, v))
}

// PaymentTaxIn applies the In predicate on the "paymentTax" field.
func PaymentTaxIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentTax, vs...))
}

// PaymentTaxNotIn applies the NotIn predicate on the "paymentTax" field.
func PaymentTaxNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentTax, vs...))
}

// PaymentTaxGT applies the GT predicate on the "paymentTax" field.
func PaymentTaxGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentTax, v))
}

// PaymentTaxGTE applies the GTE predicate on the "paymentTax" field.
func PaymentTaxGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentTax, v))
}

// PaymentTaxLT applies the LT predicate on the "paymentTax" field.
func PaymentTaxLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentTax, v))
}

// PaymentTaxLTE applies the LTE predicate on the "paymentTax" field.
func PaymentTaxLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentTax, v))
}

// PaymentTaxContains applies the Contains predicate on the "paymentTax" field.
func PaymentTaxContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentTax, v))
}

// PaymentTaxHasPrefix applies the HasPrefix predicate on the "paymentTax" field.
func PaymentTaxHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentTax, v))
}

// PaymentTaxHasSuffix applies the HasSuffix predicate on the "paymentTax" field.
func PaymentTaxHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentTax, v))
}

// PaymentTaxEqualFold applies the EqualFold predicate on the "paymentTax" field.
func PaymentTaxEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentTax, v))
}

// PaymentTaxContainsFold applies the ContainsFold predicate on the "paymentTax" field.
func PaymentTaxContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentTax, v))
}

// PaymentTransactionIdEQ applies the EQ predicate on the "paymentTransactionId" field.
func PaymentTransactionIdEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdNEQ applies the NEQ predicate on the "paymentTransactionId" field.
func PaymentTransactionIdNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdIn applies the In predicate on the "paymentTransactionId" field.
func PaymentTransactionIdIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentTransactionId, vs...))
}

// PaymentTransactionIdNotIn applies the NotIn predicate on the "paymentTransactionId" field.
func PaymentTransactionIdNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentTransactionId, vs...))
}

// PaymentTransactionIdGT applies the GT predicate on the "paymentTransactionId" field.
func PaymentTransactionIdGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdGTE applies the GTE predicate on the "paymentTransactionId" field.
func PaymentTransactionIdGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdLT applies the LT predicate on the "paymentTransactionId" field.
func PaymentTransactionIdLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdLTE applies the LTE predicate on the "paymentTransactionId" field.
func PaymentTransactionIdLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdContains applies the Contains predicate on the "paymentTransactionId" field.
func PaymentTransactionIdContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdHasPrefix applies the HasPrefix predicate on the "paymentTransactionId" field.
func PaymentTransactionIdHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdHasSuffix applies the HasSuffix predicate on the "paymentTransactionId" field.
func PaymentTransactionIdHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdEqualFold applies the EqualFold predicate on the "paymentTransactionId" field.
func PaymentTransactionIdEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentTransactionId, v))
}

// PaymentTransactionIdContainsFold applies the ContainsFold predicate on the "paymentTransactionId" field.
func PaymentTransactionIdContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentTransactionId, v))
}

// PaymentTransactionTypeEQ applies the EQ predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeNEQ applies the NEQ predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeIn applies the In predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentTransactionType, vs...))
}

// PaymentTransactionTypeNotIn applies the NotIn predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentTransactionType, vs...))
}

// PaymentTransactionTypeGT applies the GT predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeGTE applies the GTE predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeLT applies the LT predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeLTE applies the LTE predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeContains applies the Contains predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeHasPrefix applies the HasPrefix predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeHasSuffix applies the HasSuffix predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeEqualFold applies the EqualFold predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentTransactionType, v))
}

// PaymentTransactionTypeContainsFold applies the ContainsFold predicate on the "paymentTransactionType" field.
func PaymentTransactionTypeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentTransactionType, v))
}

// PaymentPendingReasonEQ applies the EQ predicate on the "paymentPendingReason" field.
func PaymentPendingReasonEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonNEQ applies the NEQ predicate on the "paymentPendingReason" field.
func PaymentPendingReasonNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonIn applies the In predicate on the "paymentPendingReason" field.
func PaymentPendingReasonIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentPendingReason, vs...))
}

// PaymentPendingReasonNotIn applies the NotIn predicate on the "paymentPendingReason" field.
func PaymentPendingReasonNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentPendingReason, vs...))
}

// PaymentPendingReasonGT applies the GT predicate on the "paymentPendingReason" field.
func PaymentPendingReasonGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonGTE applies the GTE predicate on the "paymentPendingReason" field.
func PaymentPendingReasonGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonLT applies the LT predicate on the "paymentPendingReason" field.
func PaymentPendingReasonLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonLTE applies the LTE predicate on the "paymentPendingReason" field.
func PaymentPendingReasonLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonContains applies the Contains predicate on the "paymentPendingReason" field.
func PaymentPendingReasonContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonHasPrefix applies the HasPrefix predicate on the "paymentPendingReason" field.
func PaymentPendingReasonHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonHasSuffix applies the HasSuffix predicate on the "paymentPendingReason" field.
func PaymentPendingReasonHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonEqualFold applies the EqualFold predicate on the "paymentPendingReason" field.
func PaymentPendingReasonEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentPendingReason, v))
}

// PaymentPendingReasonContainsFold applies the ContainsFold predicate on the "paymentPendingReason" field.
func PaymentPendingReasonContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentPendingReason, v))
}

// PaymentReasonCodeEQ applies the EQ predicate on the "paymentReasonCode" field.
func PaymentReasonCodeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeNEQ applies the NEQ predicate on the "paymentReasonCode" field.
func PaymentReasonCodeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeIn applies the In predicate on the "paymentReasonCode" field.
func PaymentReasonCodeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentReasonCode, vs...))
}

// PaymentReasonCodeNotIn applies the NotIn predicate on the "paymentReasonCode" field.
func PaymentReasonCodeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentReasonCode, vs...))
}

// PaymentReasonCodeGT applies the GT predicate on the "paymentReasonCode" field.
func PaymentReasonCodeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeGTE applies the GTE predicate on the "paymentReasonCode" field.
func PaymentReasonCodeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeLT applies the LT predicate on the "paymentReasonCode" field.
func PaymentReasonCodeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeLTE applies the LTE predicate on the "paymentReasonCode" field.
func PaymentReasonCodeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeContains applies the Contains predicate on the "paymentReasonCode" field.
func PaymentReasonCodeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeHasPrefix applies the HasPrefix predicate on the "paymentReasonCode" field.
func PaymentReasonCodeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeHasSuffix applies the HasSuffix predicate on the "paymentReasonCode" field.
func PaymentReasonCodeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeEqualFold applies the EqualFold predicate on the "paymentReasonCode" field.
func PaymentReasonCodeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentReasonCode, v))
}

// PaymentReasonCodeContainsFold applies the ContainsFold predicate on the "paymentReasonCode" field.
func PaymentReasonCodeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentReasonCode, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginLink applies the HasEdge predicate on the "originLink" edge.
func HasOriginLink() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OriginLinkTable, OriginLinkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginLinkWith applies the HasEdge predicate on the "originLink" edge with a given conditions (other predicates).
func HasOriginLinkWith(preds ...predicate.LinkVisit) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newOriginLinkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductCustomer applies the HasEdge predicate on the "productCustomer" edge.
func HasProductCustomer() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductCustomerTable, ProductCustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductCustomerWith applies the HasEdge predicate on the "productCustomer" edge with a given conditions (other predicates).
func HasProductCustomerWith(preds ...predicate.UserBuyer) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newProductCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShop applies the HasEdge predicate on the "shop" edge.
func HasShop() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShopTable, ShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShopWith applies the HasEdge predicate on the "shop" edge with a given conditions (other predicates).
func HasShopWith(preds ...predicate.Shop) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductInfluencer applies the HasEdge predicate on the "productInfluencer" edge.
func HasProductInfluencer() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductInfluencerTable, ProductInfluencerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductInfluencerWith applies the HasEdge predicate on the "productInfluencer" edge with a given conditions (other predicates).
func HasProductInfluencerWith(preds ...predicate.UserInfluencer) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newProductInfluencerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
