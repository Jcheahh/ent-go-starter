// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/marketingcampaign"
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MarketingCampaignDelete is the builder for deleting a MarketingCampaign entity.
type MarketingCampaignDelete struct {
	config
	hooks    []Hook
	mutation *MarketingCampaignMutation
}

// Where appends a list predicates to the MarketingCampaignDelete builder.
func (mcd *MarketingCampaignDelete) Where(ps ...predicate.MarketingCampaign) *MarketingCampaignDelete {
	mcd.mutation.Where(ps...)
	return mcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mcd *MarketingCampaignDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MarketingCampaignMutation](ctx, mcd.sqlExec, mcd.mutation, mcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mcd *MarketingCampaignDelete) ExecX(ctx context.Context) int {
	n, err := mcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mcd *MarketingCampaignDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(marketingcampaign.Table, sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt))
	if ps := mcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mcd.mutation.done = true
	return affected, err
}

// MarketingCampaignDeleteOne is the builder for deleting a single MarketingCampaign entity.
type MarketingCampaignDeleteOne struct {
	mcd *MarketingCampaignDelete
}

// Where appends a list predicates to the MarketingCampaignDelete builder.
func (mcdo *MarketingCampaignDeleteOne) Where(ps ...predicate.MarketingCampaign) *MarketingCampaignDeleteOne {
	mcdo.mcd.mutation.Where(ps...)
	return mcdo
}

// Exec executes the deletion query.
func (mcdo *MarketingCampaignDeleteOne) Exec(ctx context.Context) error {
	n, err := mcdo.mcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{marketingcampaign.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mcdo *MarketingCampaignDeleteOne) ExecX(ctx context.Context) {
	if err := mcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
