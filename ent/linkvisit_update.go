// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/linkvisit"
	"entdemo/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkVisitUpdate is the builder for updating LinkVisit entities.
type LinkVisitUpdate struct {
	config
	hooks    []Hook
	mutation *LinkVisitMutation
}

// Where appends a list predicates to the LinkVisitUpdate builder.
func (lvu *LinkVisitUpdate) Where(ps ...predicate.LinkVisit) *LinkVisitUpdate {
	lvu.mutation.Where(ps...)
	return lvu
}

// SetDateCreated sets the "dateCreated" field.
func (lvu *LinkVisitUpdate) SetDateCreated(s string) *LinkVisitUpdate {
	lvu.mutation.SetDateCreated(s)
	return lvu
}

// SetIpAddress sets the "ipAddress" field.
func (lvu *LinkVisitUpdate) SetIpAddress(s string) *LinkVisitUpdate {
	lvu.mutation.SetIpAddress(s)
	return lvu
}

// SetSaleValue sets the "saleValue" field.
func (lvu *LinkVisitUpdate) SetSaleValue(i int) *LinkVisitUpdate {
	lvu.mutation.ResetSaleValue()
	lvu.mutation.SetSaleValue(i)
	return lvu
}

// AddSaleValue adds i to the "saleValue" field.
func (lvu *LinkVisitUpdate) AddSaleValue(i int) *LinkVisitUpdate {
	lvu.mutation.AddSaleValue(i)
	return lvu
}

// SetCommissionEarned sets the "commissionEarned" field.
func (lvu *LinkVisitUpdate) SetCommissionEarned(i int) *LinkVisitUpdate {
	lvu.mutation.ResetCommissionEarned()
	lvu.mutation.SetCommissionEarned(i)
	return lvu
}

// AddCommissionEarned adds i to the "commissionEarned" field.
func (lvu *LinkVisitUpdate) AddCommissionEarned(i int) *LinkVisitUpdate {
	lvu.mutation.AddCommissionEarned(i)
	return lvu
}

// Mutation returns the LinkVisitMutation object of the builder.
func (lvu *LinkVisitUpdate) Mutation() *LinkVisitMutation {
	return lvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lvu *LinkVisitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LinkVisitMutation](ctx, lvu.sqlSave, lvu.mutation, lvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lvu *LinkVisitUpdate) SaveX(ctx context.Context) int {
	affected, err := lvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lvu *LinkVisitUpdate) Exec(ctx context.Context) error {
	_, err := lvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvu *LinkVisitUpdate) ExecX(ctx context.Context) {
	if err := lvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lvu *LinkVisitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(linkvisit.Table, linkvisit.Columns, sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt))
	if ps := lvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lvu.mutation.DateCreated(); ok {
		_spec.SetField(linkvisit.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := lvu.mutation.IpAddress(); ok {
		_spec.SetField(linkvisit.FieldIpAddress, field.TypeString, value)
	}
	if value, ok := lvu.mutation.SaleValue(); ok {
		_spec.SetField(linkvisit.FieldSaleValue, field.TypeInt, value)
	}
	if value, ok := lvu.mutation.AddedSaleValue(); ok {
		_spec.AddField(linkvisit.FieldSaleValue, field.TypeInt, value)
	}
	if value, ok := lvu.mutation.CommissionEarned(); ok {
		_spec.SetField(linkvisit.FieldCommissionEarned, field.TypeInt, value)
	}
	if value, ok := lvu.mutation.AddedCommissionEarned(); ok {
		_spec.AddField(linkvisit.FieldCommissionEarned, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkvisit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lvu.mutation.done = true
	return n, nil
}

// LinkVisitUpdateOne is the builder for updating a single LinkVisit entity.
type LinkVisitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinkVisitMutation
}

// SetDateCreated sets the "dateCreated" field.
func (lvuo *LinkVisitUpdateOne) SetDateCreated(s string) *LinkVisitUpdateOne {
	lvuo.mutation.SetDateCreated(s)
	return lvuo
}

// SetIpAddress sets the "ipAddress" field.
func (lvuo *LinkVisitUpdateOne) SetIpAddress(s string) *LinkVisitUpdateOne {
	lvuo.mutation.SetIpAddress(s)
	return lvuo
}

// SetSaleValue sets the "saleValue" field.
func (lvuo *LinkVisitUpdateOne) SetSaleValue(i int) *LinkVisitUpdateOne {
	lvuo.mutation.ResetSaleValue()
	lvuo.mutation.SetSaleValue(i)
	return lvuo
}

// AddSaleValue adds i to the "saleValue" field.
func (lvuo *LinkVisitUpdateOne) AddSaleValue(i int) *LinkVisitUpdateOne {
	lvuo.mutation.AddSaleValue(i)
	return lvuo
}

// SetCommissionEarned sets the "commissionEarned" field.
func (lvuo *LinkVisitUpdateOne) SetCommissionEarned(i int) *LinkVisitUpdateOne {
	lvuo.mutation.ResetCommissionEarned()
	lvuo.mutation.SetCommissionEarned(i)
	return lvuo
}

// AddCommissionEarned adds i to the "commissionEarned" field.
func (lvuo *LinkVisitUpdateOne) AddCommissionEarned(i int) *LinkVisitUpdateOne {
	lvuo.mutation.AddCommissionEarned(i)
	return lvuo
}

// Mutation returns the LinkVisitMutation object of the builder.
func (lvuo *LinkVisitUpdateOne) Mutation() *LinkVisitMutation {
	return lvuo.mutation
}

// Where appends a list predicates to the LinkVisitUpdate builder.
func (lvuo *LinkVisitUpdateOne) Where(ps ...predicate.LinkVisit) *LinkVisitUpdateOne {
	lvuo.mutation.Where(ps...)
	return lvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lvuo *LinkVisitUpdateOne) Select(field string, fields ...string) *LinkVisitUpdateOne {
	lvuo.fields = append([]string{field}, fields...)
	return lvuo
}

// Save executes the query and returns the updated LinkVisit entity.
func (lvuo *LinkVisitUpdateOne) Save(ctx context.Context) (*LinkVisit, error) {
	return withHooks[*LinkVisit, LinkVisitMutation](ctx, lvuo.sqlSave, lvuo.mutation, lvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lvuo *LinkVisitUpdateOne) SaveX(ctx context.Context) *LinkVisit {
	node, err := lvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lvuo *LinkVisitUpdateOne) Exec(ctx context.Context) error {
	_, err := lvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvuo *LinkVisitUpdateOne) ExecX(ctx context.Context) {
	if err := lvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lvuo *LinkVisitUpdateOne) sqlSave(ctx context.Context) (_node *LinkVisit, err error) {
	_spec := sqlgraph.NewUpdateSpec(linkvisit.Table, linkvisit.Columns, sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt))
	id, ok := lvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LinkVisit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linkvisit.FieldID)
		for _, f := range fields {
			if !linkvisit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != linkvisit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lvuo.mutation.DateCreated(); ok {
		_spec.SetField(linkvisit.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := lvuo.mutation.IpAddress(); ok {
		_spec.SetField(linkvisit.FieldIpAddress, field.TypeString, value)
	}
	if value, ok := lvuo.mutation.SaleValue(); ok {
		_spec.SetField(linkvisit.FieldSaleValue, field.TypeInt, value)
	}
	if value, ok := lvuo.mutation.AddedSaleValue(); ok {
		_spec.AddField(linkvisit.FieldSaleValue, field.TypeInt, value)
	}
	if value, ok := lvuo.mutation.CommissionEarned(); ok {
		_spec.SetField(linkvisit.FieldCommissionEarned, field.TypeInt, value)
	}
	if value, ok := lvuo.mutation.AddedCommissionEarned(); ok {
		_spec.AddField(linkvisit.FieldCommissionEarned, field.TypeInt, value)
	}
	_node = &LinkVisit{config: lvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkvisit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lvuo.mutation.done = true
	return _node, nil
}
