// Code generated by ent, DO NOT EDIT.

package commissionstructure

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the commissionstructure type in the database.
	Label = "commission_structure"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCommissionValue holds the string denoting the commissionvalue field in the database.
	FieldCommissionValue = "commission_value"
	// FieldCommissionPercentage holds the string denoting the commissionpercentage field in the database.
	FieldCommissionPercentage = "commission_percentage"
	// EdgeProductSeller holds the string denoting the productseller edge name in mutations.
	EdgeProductSeller = "productSeller"
	// Table holds the table name of the commissionstructure in the database.
	Table = "commission_structures"
	// ProductSellerTable is the table that holds the productSeller relation/edge.
	ProductSellerTable = "user_sellers"
	// ProductSellerInverseTable is the table name for the UserSeller entity.
	// It exists in this package in order to avoid circular dependency with the "userseller" package.
	ProductSellerInverseTable = "user_sellers"
	// ProductSellerColumn is the table column denoting the productSeller relation/edge.
	ProductSellerColumn = "commission_structure_product_seller"
)

// Columns holds all SQL columns for commissionstructure fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldCommissionValue,
	FieldCommissionPercentage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "commission_structures"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_commission_structure",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the CommissionStructure queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCommissionValue orders the results by the commissionValue field.
func ByCommissionValue(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCommissionValue, opts...).ToFunc()
}

// ByCommissionPercentage orders the results by the commissionPercentage field.
func ByCommissionPercentage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCommissionPercentage, opts...).ToFunc()
}

// ByProductSellerCount orders the results by productSeller count.
func ByProductSellerCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductSellerStep(), opts...)
	}
}

// ByProductSeller orders the results by productSeller terms.
func ByProductSeller(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductSellerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductSellerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductSellerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductSellerTable, ProductSellerColumn),
	)
}
