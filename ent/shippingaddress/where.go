// Code generated by ent, DO NOT EDIT.

package shippingaddress

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldState, v))
}

// Zip applies equality check predicate on the "zip" field. It's identical to ZipEQ.
func Zip(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldZip, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldCountry, v))
}

// DateCreated applies equality check predicate on the "dateCreated" field. It's identical to DateCreatedEQ.
func DateCreated(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldDateCreated, v))
}

// DateUpdated applies equality check predicate on the "dateUpdated" field. It's identical to DateUpdatedEQ.
func DateUpdated(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldDateUpdated, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldState, v))
}

// ZipEQ applies the EQ predicate on the "zip" field.
func ZipEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldZip, v))
}

// ZipNEQ applies the NEQ predicate on the "zip" field.
func ZipNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldZip, v))
}

// ZipIn applies the In predicate on the "zip" field.
func ZipIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldZip, vs...))
}

// ZipNotIn applies the NotIn predicate on the "zip" field.
func ZipNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldZip, vs...))
}

// ZipGT applies the GT predicate on the "zip" field.
func ZipGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldZip, v))
}

// ZipGTE applies the GTE predicate on the "zip" field.
func ZipGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldZip, v))
}

// ZipLT applies the LT predicate on the "zip" field.
func ZipLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldZip, v))
}

// ZipLTE applies the LTE predicate on the "zip" field.
func ZipLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldZip, v))
}

// ZipContains applies the Contains predicate on the "zip" field.
func ZipContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldZip, v))
}

// ZipHasPrefix applies the HasPrefix predicate on the "zip" field.
func ZipHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldZip, v))
}

// ZipHasSuffix applies the HasSuffix predicate on the "zip" field.
func ZipHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldZip, v))
}

// ZipEqualFold applies the EqualFold predicate on the "zip" field.
func ZipEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldZip, v))
}

// ZipContainsFold applies the ContainsFold predicate on the "zip" field.
func ZipContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldZip, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldCountry, v))
}

// DateCreatedEQ applies the EQ predicate on the "dateCreated" field.
func DateCreatedEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "dateCreated" field.
func DateCreatedNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "dateCreated" field.
func DateCreatedIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "dateCreated" field.
func DateCreatedNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "dateCreated" field.
func DateCreatedGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "dateCreated" field.
func DateCreatedGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "dateCreated" field.
func DateCreatedLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "dateCreated" field.
func DateCreatedLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldDateCreated, v))
}

// DateCreatedContains applies the Contains predicate on the "dateCreated" field.
func DateCreatedContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldDateCreated, v))
}

// DateCreatedHasPrefix applies the HasPrefix predicate on the "dateCreated" field.
func DateCreatedHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldDateCreated, v))
}

// DateCreatedHasSuffix applies the HasSuffix predicate on the "dateCreated" field.
func DateCreatedHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldDateCreated, v))
}

// DateCreatedEqualFold applies the EqualFold predicate on the "dateCreated" field.
func DateCreatedEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldDateCreated, v))
}

// DateCreatedContainsFold applies the ContainsFold predicate on the "dateCreated" field.
func DateCreatedContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldDateCreated, v))
}

// DateUpdatedEQ applies the EQ predicate on the "dateUpdated" field.
func DateUpdatedEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEQ(FieldDateUpdated, v))
}

// DateUpdatedNEQ applies the NEQ predicate on the "dateUpdated" field.
func DateUpdatedNEQ(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNEQ(FieldDateUpdated, v))
}

// DateUpdatedIn applies the In predicate on the "dateUpdated" field.
func DateUpdatedIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldIn(FieldDateUpdated, vs...))
}

// DateUpdatedNotIn applies the NotIn predicate on the "dateUpdated" field.
func DateUpdatedNotIn(vs ...string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldNotIn(FieldDateUpdated, vs...))
}

// DateUpdatedGT applies the GT predicate on the "dateUpdated" field.
func DateUpdatedGT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGT(FieldDateUpdated, v))
}

// DateUpdatedGTE applies the GTE predicate on the "dateUpdated" field.
func DateUpdatedGTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldGTE(FieldDateUpdated, v))
}

// DateUpdatedLT applies the LT predicate on the "dateUpdated" field.
func DateUpdatedLT(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLT(FieldDateUpdated, v))
}

// DateUpdatedLTE applies the LTE predicate on the "dateUpdated" field.
func DateUpdatedLTE(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldLTE(FieldDateUpdated, v))
}

// DateUpdatedContains applies the Contains predicate on the "dateUpdated" field.
func DateUpdatedContains(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContains(FieldDateUpdated, v))
}

// DateUpdatedHasPrefix applies the HasPrefix predicate on the "dateUpdated" field.
func DateUpdatedHasPrefix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasPrefix(FieldDateUpdated, v))
}

// DateUpdatedHasSuffix applies the HasSuffix predicate on the "dateUpdated" field.
func DateUpdatedHasSuffix(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldHasSuffix(FieldDateUpdated, v))
}

// DateUpdatedEqualFold applies the EqualFold predicate on the "dateUpdated" field.
func DateUpdatedEqualFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldEqualFold(FieldDateUpdated, v))
}

// DateUpdatedContainsFold applies the ContainsFold predicate on the "dateUpdated" field.
func DateUpdatedContainsFold(v string) predicate.ShippingAddress {
	return predicate.ShippingAddress(sql.FieldContainsFold(FieldDateUpdated, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShippingAddress) predicate.ShippingAddress {
	return predicate.ShippingAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShippingAddress) predicate.ShippingAddress {
	return predicate.ShippingAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShippingAddress) predicate.ShippingAddress {
	return predicate.ShippingAddress(func(s *sql.Selector) {
		p(s.Not())
	})
}
