// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/bankaccount"
	"entdemo/ent/notification"
	"entdemo/ent/paymentmethod"
	"entdemo/ent/predicate"
	"entdemo/ent/shippingaddress"
	"entdemo/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetState sets the "state" field.
func (uu *UserUpdate) SetState(s string) *UserUpdate {
	uu.mutation.SetState(s)
	return uu
}

// SetZip sets the "zip" field.
func (uu *UserUpdate) SetZip(s string) *UserUpdate {
	uu.mutation.SetZip(s)
	return uu
}

// SetCountry sets the "country" field.
func (uu *UserUpdate) SetCountry(s string) *UserUpdate {
	uu.mutation.SetCountry(s)
	return uu
}

// SetDateUpdated sets the "dateUpdated" field.
func (uu *UserUpdate) SetDateUpdated(s string) *UserUpdate {
	uu.mutation.SetDateUpdated(s)
	return uu
}

// SetNillableDateUpdated sets the "dateUpdated" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDateUpdated(s *string) *UserUpdate {
	if s != nil {
		uu.SetDateUpdated(*s)
	}
	return uu
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uu *UserUpdate) AddNotificationIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNotificationIDs(ids...)
	return uu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uu *UserUpdate) AddNotifications(n ...*Notification) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotificationIDs(ids...)
}

// AddBankAccountIDs adds the "bankAccounts" edge to the BankAccount entity by IDs.
func (uu *UserUpdate) AddBankAccountIDs(ids ...int) *UserUpdate {
	uu.mutation.AddBankAccountIDs(ids...)
	return uu
}

// AddBankAccounts adds the "bankAccounts" edges to the BankAccount entity.
func (uu *UserUpdate) AddBankAccounts(b ...*BankAccount) *UserUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBankAccountIDs(ids...)
}

// AddShippingAddressIDs adds the "shippingAddresses" edge to the ShippingAddress entity by IDs.
func (uu *UserUpdate) AddShippingAddressIDs(ids ...int) *UserUpdate {
	uu.mutation.AddShippingAddressIDs(ids...)
	return uu
}

// AddShippingAddresses adds the "shippingAddresses" edges to the ShippingAddress entity.
func (uu *UserUpdate) AddShippingAddresses(s ...*ShippingAddress) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddShippingAddressIDs(ids...)
}

// AddPaymentMethodIDs adds the "paymentMethods" edge to the PaymentMethod entity by IDs.
func (uu *UserUpdate) AddPaymentMethodIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPaymentMethodIDs(ids...)
	return uu
}

// AddPaymentMethods adds the "paymentMethods" edges to the PaymentMethod entity.
func (uu *UserUpdate) AddPaymentMethods(p ...*PaymentMethod) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPaymentMethodIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uu *UserUpdate) ClearNotifications() *UserUpdate {
	uu.mutation.ClearNotifications()
	return uu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uu *UserUpdate) RemoveNotificationIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNotificationIDs(ids...)
	return uu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uu *UserUpdate) RemoveNotifications(n ...*Notification) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotificationIDs(ids...)
}

// ClearBankAccounts clears all "bankAccounts" edges to the BankAccount entity.
func (uu *UserUpdate) ClearBankAccounts() *UserUpdate {
	uu.mutation.ClearBankAccounts()
	return uu
}

// RemoveBankAccountIDs removes the "bankAccounts" edge to BankAccount entities by IDs.
func (uu *UserUpdate) RemoveBankAccountIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveBankAccountIDs(ids...)
	return uu
}

// RemoveBankAccounts removes "bankAccounts" edges to BankAccount entities.
func (uu *UserUpdate) RemoveBankAccounts(b ...*BankAccount) *UserUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBankAccountIDs(ids...)
}

// ClearShippingAddresses clears all "shippingAddresses" edges to the ShippingAddress entity.
func (uu *UserUpdate) ClearShippingAddresses() *UserUpdate {
	uu.mutation.ClearShippingAddresses()
	return uu
}

// RemoveShippingAddressIDs removes the "shippingAddresses" edge to ShippingAddress entities by IDs.
func (uu *UserUpdate) RemoveShippingAddressIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveShippingAddressIDs(ids...)
	return uu
}

// RemoveShippingAddresses removes "shippingAddresses" edges to ShippingAddress entities.
func (uu *UserUpdate) RemoveShippingAddresses(s ...*ShippingAddress) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveShippingAddressIDs(ids...)
}

// ClearPaymentMethods clears all "paymentMethods" edges to the PaymentMethod entity.
func (uu *UserUpdate) ClearPaymentMethods() *UserUpdate {
	uu.mutation.ClearPaymentMethods()
	return uu
}

// RemovePaymentMethodIDs removes the "paymentMethods" edge to PaymentMethod entities by IDs.
func (uu *UserUpdate) RemovePaymentMethodIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePaymentMethodIDs(ids...)
	return uu
}

// RemovePaymentMethods removes "paymentMethods" edges to PaymentMethod entities.
func (uu *UserUpdate) RemovePaymentMethods(p ...*PaymentMethod) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePaymentMethodIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uu.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
	}
	if value, ok := uu.mutation.Zip(); ok {
		_spec.SetField(user.FieldZip, field.TypeString, value)
	}
	if value, ok := uu.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if value, ok := uu.mutation.DateUpdated(); ok {
		_spec.SetField(user.FieldDateUpdated, field.TypeString, value)
	}
	if uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !uu.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ShippingAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedShippingAddressesIDs(); len(nodes) > 0 && !uu.mutation.ShippingAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ShippingAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPaymentMethodsIDs(); len(nodes) > 0 && !uu.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetState sets the "state" field.
func (uuo *UserUpdateOne) SetState(s string) *UserUpdateOne {
	uuo.mutation.SetState(s)
	return uuo
}

// SetZip sets the "zip" field.
func (uuo *UserUpdateOne) SetZip(s string) *UserUpdateOne {
	uuo.mutation.SetZip(s)
	return uuo
}

// SetCountry sets the "country" field.
func (uuo *UserUpdateOne) SetCountry(s string) *UserUpdateOne {
	uuo.mutation.SetCountry(s)
	return uuo
}

// SetDateUpdated sets the "dateUpdated" field.
func (uuo *UserUpdateOne) SetDateUpdated(s string) *UserUpdateOne {
	uuo.mutation.SetDateUpdated(s)
	return uuo
}

// SetNillableDateUpdated sets the "dateUpdated" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDateUpdated(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDateUpdated(*s)
	}
	return uuo
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uuo *UserUpdateOne) AddNotificationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNotificationIDs(ids...)
	return uuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) AddNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotificationIDs(ids...)
}

// AddBankAccountIDs adds the "bankAccounts" edge to the BankAccount entity by IDs.
func (uuo *UserUpdateOne) AddBankAccountIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddBankAccountIDs(ids...)
	return uuo
}

// AddBankAccounts adds the "bankAccounts" edges to the BankAccount entity.
func (uuo *UserUpdateOne) AddBankAccounts(b ...*BankAccount) *UserUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBankAccountIDs(ids...)
}

// AddShippingAddressIDs adds the "shippingAddresses" edge to the ShippingAddress entity by IDs.
func (uuo *UserUpdateOne) AddShippingAddressIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddShippingAddressIDs(ids...)
	return uuo
}

// AddShippingAddresses adds the "shippingAddresses" edges to the ShippingAddress entity.
func (uuo *UserUpdateOne) AddShippingAddresses(s ...*ShippingAddress) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddShippingAddressIDs(ids...)
}

// AddPaymentMethodIDs adds the "paymentMethods" edge to the PaymentMethod entity by IDs.
func (uuo *UserUpdateOne) AddPaymentMethodIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPaymentMethodIDs(ids...)
	return uuo
}

// AddPaymentMethods adds the "paymentMethods" edges to the PaymentMethod entity.
func (uuo *UserUpdateOne) AddPaymentMethods(p ...*PaymentMethod) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPaymentMethodIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) ClearNotifications() *UserUpdateOne {
	uuo.mutation.ClearNotifications()
	return uuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uuo *UserUpdateOne) RemoveNotificationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNotificationIDs(ids...)
	return uuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uuo *UserUpdateOne) RemoveNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotificationIDs(ids...)
}

// ClearBankAccounts clears all "bankAccounts" edges to the BankAccount entity.
func (uuo *UserUpdateOne) ClearBankAccounts() *UserUpdateOne {
	uuo.mutation.ClearBankAccounts()
	return uuo
}

// RemoveBankAccountIDs removes the "bankAccounts" edge to BankAccount entities by IDs.
func (uuo *UserUpdateOne) RemoveBankAccountIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveBankAccountIDs(ids...)
	return uuo
}

// RemoveBankAccounts removes "bankAccounts" edges to BankAccount entities.
func (uuo *UserUpdateOne) RemoveBankAccounts(b ...*BankAccount) *UserUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBankAccountIDs(ids...)
}

// ClearShippingAddresses clears all "shippingAddresses" edges to the ShippingAddress entity.
func (uuo *UserUpdateOne) ClearShippingAddresses() *UserUpdateOne {
	uuo.mutation.ClearShippingAddresses()
	return uuo
}

// RemoveShippingAddressIDs removes the "shippingAddresses" edge to ShippingAddress entities by IDs.
func (uuo *UserUpdateOne) RemoveShippingAddressIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveShippingAddressIDs(ids...)
	return uuo
}

// RemoveShippingAddresses removes "shippingAddresses" edges to ShippingAddress entities.
func (uuo *UserUpdateOne) RemoveShippingAddresses(s ...*ShippingAddress) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveShippingAddressIDs(ids...)
}

// ClearPaymentMethods clears all "paymentMethods" edges to the PaymentMethod entity.
func (uuo *UserUpdateOne) ClearPaymentMethods() *UserUpdateOne {
	uuo.mutation.ClearPaymentMethods()
	return uuo
}

// RemovePaymentMethodIDs removes the "paymentMethods" edge to PaymentMethod entities by IDs.
func (uuo *UserUpdateOne) RemovePaymentMethodIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePaymentMethodIDs(ids...)
	return uuo
}

// RemovePaymentMethods removes "paymentMethods" edges to PaymentMethod entities.
func (uuo *UserUpdateOne) RemovePaymentMethods(p ...*PaymentMethod) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePaymentMethodIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uuo.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Zip(); ok {
		_spec.SetField(user.FieldZip, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DateUpdated(); ok {
		_spec.SetField(user.FieldDateUpdated, field.TypeString, value)
	}
	if uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !uuo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ShippingAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedShippingAddressesIDs(); len(nodes) > 0 && !uuo.mutation.ShippingAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ShippingAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPaymentMethodsIDs(); len(nodes) > 0 && !uuo.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
