// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/linkvisit"
	"entdemo/ent/product"
	"entdemo/ent/shop"
	"entdemo/ent/transaction"
	"entdemo/ent/userbuyer"
	"entdemo/ent/userinfluencer"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetDateCreated sets the "dateCreated" field.
func (tc *TransactionCreate) SetDateCreated(s string) *TransactionCreate {
	tc.mutation.SetDateCreated(s)
	return tc
}

// SetDateUpdated sets the "dateUpdated" field.
func (tc *TransactionCreate) SetDateUpdated(s string) *TransactionCreate {
	tc.mutation.SetDateUpdated(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransactionCreate) SetStatus(t transaction.Status) *TransactionCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableStatus(t *transaction.Status) *TransactionCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetPaymentMethod sets the "paymentMethod" field.
func (tc *TransactionCreate) SetPaymentMethod(s string) *TransactionCreate {
	tc.mutation.SetPaymentMethod(s)
	return tc
}

// SetPaymentStatus sets the "paymentStatus" field.
func (tc *TransactionCreate) SetPaymentStatus(s string) *TransactionCreate {
	tc.mutation.SetPaymentStatus(s)
	return tc
}

// SetPaymentId sets the "paymentId" field.
func (tc *TransactionCreate) SetPaymentId(s string) *TransactionCreate {
	tc.mutation.SetPaymentId(s)
	return tc
}

// SetPaymentAmount sets the "paymentAmount" field.
func (tc *TransactionCreate) SetPaymentAmount(s string) *TransactionCreate {
	tc.mutation.SetPaymentAmount(s)
	return tc
}

// SetPaymentCurrency sets the "paymentCurrency" field.
func (tc *TransactionCreate) SetPaymentCurrency(s string) *TransactionCreate {
	tc.mutation.SetPaymentCurrency(s)
	return tc
}

// SetPaymentDate sets the "paymentDate" field.
func (tc *TransactionCreate) SetPaymentDate(s string) *TransactionCreate {
	tc.mutation.SetPaymentDate(s)
	return tc
}

// SetPaymentFee sets the "paymentFee" field.
func (tc *TransactionCreate) SetPaymentFee(s string) *TransactionCreate {
	tc.mutation.SetPaymentFee(s)
	return tc
}

// SetPaymentNet sets the "paymentNet" field.
func (tc *TransactionCreate) SetPaymentNet(s string) *TransactionCreate {
	tc.mutation.SetPaymentNet(s)
	return tc
}

// SetPaymentPayerEmail sets the "paymentPayerEmail" field.
func (tc *TransactionCreate) SetPaymentPayerEmail(s string) *TransactionCreate {
	tc.mutation.SetPaymentPayerEmail(s)
	return tc
}

// SetPaymentPayerFirstName sets the "paymentPayerFirstName" field.
func (tc *TransactionCreate) SetPaymentPayerFirstName(s string) *TransactionCreate {
	tc.mutation.SetPaymentPayerFirstName(s)
	return tc
}

// SetPaymentPayerLastName sets the "paymentPayerLastName" field.
func (tc *TransactionCreate) SetPaymentPayerLastName(s string) *TransactionCreate {
	tc.mutation.SetPaymentPayerLastName(s)
	return tc
}

// SetPaymentPayerId sets the "paymentPayerId" field.
func (tc *TransactionCreate) SetPaymentPayerId(s string) *TransactionCreate {
	tc.mutation.SetPaymentPayerId(s)
	return tc
}

// SetPaymentPayerStatus sets the "paymentPayerStatus" field.
func (tc *TransactionCreate) SetPaymentPayerStatus(s string) *TransactionCreate {
	tc.mutation.SetPaymentPayerStatus(s)
	return tc
}

// SetPaymentReceiverEmail sets the "paymentReceiverEmail" field.
func (tc *TransactionCreate) SetPaymentReceiverEmail(s string) *TransactionCreate {
	tc.mutation.SetPaymentReceiverEmail(s)
	return tc
}

// SetPaymentReceiverId sets the "paymentReceiverId" field.
func (tc *TransactionCreate) SetPaymentReceiverId(s string) *TransactionCreate {
	tc.mutation.SetPaymentReceiverId(s)
	return tc
}

// SetPaymentTax sets the "paymentTax" field.
func (tc *TransactionCreate) SetPaymentTax(s string) *TransactionCreate {
	tc.mutation.SetPaymentTax(s)
	return tc
}

// SetPaymentTransactionId sets the "paymentTransactionId" field.
func (tc *TransactionCreate) SetPaymentTransactionId(s string) *TransactionCreate {
	tc.mutation.SetPaymentTransactionId(s)
	return tc
}

// SetPaymentTransactionType sets the "paymentTransactionType" field.
func (tc *TransactionCreate) SetPaymentTransactionType(s string) *TransactionCreate {
	tc.mutation.SetPaymentTransactionType(s)
	return tc
}

// SetPaymentPendingReason sets the "paymentPendingReason" field.
func (tc *TransactionCreate) SetPaymentPendingReason(s string) *TransactionCreate {
	tc.mutation.SetPaymentPendingReason(s)
	return tc
}

// SetPaymentReasonCode sets the "paymentReasonCode" field.
func (tc *TransactionCreate) SetPaymentReasonCode(s string) *TransactionCreate {
	tc.mutation.SetPaymentReasonCode(s)
	return tc
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (tc *TransactionCreate) AddProductIDs(ids ...int) *TransactionCreate {
	tc.mutation.AddProductIDs(ids...)
	return tc
}

// AddProduct adds the "product" edges to the Product entity.
func (tc *TransactionCreate) AddProduct(p ...*Product) *TransactionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddProductIDs(ids...)
}

// AddOriginLinkIDs adds the "originLink" edge to the LinkVisit entity by IDs.
func (tc *TransactionCreate) AddOriginLinkIDs(ids ...int) *TransactionCreate {
	tc.mutation.AddOriginLinkIDs(ids...)
	return tc
}

// AddOriginLink adds the "originLink" edges to the LinkVisit entity.
func (tc *TransactionCreate) AddOriginLink(l ...*LinkVisit) *TransactionCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tc.AddOriginLinkIDs(ids...)
}

// AddProductCustomerIDs adds the "productCustomer" edge to the UserBuyer entity by IDs.
func (tc *TransactionCreate) AddProductCustomerIDs(ids ...int) *TransactionCreate {
	tc.mutation.AddProductCustomerIDs(ids...)
	return tc
}

// AddProductCustomer adds the "productCustomer" edges to the UserBuyer entity.
func (tc *TransactionCreate) AddProductCustomer(u ...*UserBuyer) *TransactionCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddProductCustomerIDs(ids...)
}

// AddShopIDs adds the "shop" edge to the Shop entity by IDs.
func (tc *TransactionCreate) AddShopIDs(ids ...int) *TransactionCreate {
	tc.mutation.AddShopIDs(ids...)
	return tc
}

// AddShop adds the "shop" edges to the Shop entity.
func (tc *TransactionCreate) AddShop(s ...*Shop) *TransactionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddShopIDs(ids...)
}

// AddProductInfluencerIDs adds the "productInfluencer" edge to the UserInfluencer entity by IDs.
func (tc *TransactionCreate) AddProductInfluencerIDs(ids ...int) *TransactionCreate {
	tc.mutation.AddProductInfluencerIDs(ids...)
	return tc
}

// AddProductInfluencer adds the "productInfluencer" edges to the UserInfluencer entity.
func (tc *TransactionCreate) AddProductInfluencer(u ...*UserInfluencer) *TransactionCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddProductInfluencerIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	tc.defaults()
	return withHooks[*Transaction, TransactionMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.Status(); !ok {
		v := transaction.DefaultStatus
		tc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "Transaction.dateCreated"`)}
	}
	if _, ok := tc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "Transaction.dateUpdated"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Transaction.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "paymentMethod", err: errors.New(`ent: missing required field "Transaction.paymentMethod"`)}
	}
	if _, ok := tc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "paymentStatus", err: errors.New(`ent: missing required field "Transaction.paymentStatus"`)}
	}
	if _, ok := tc.mutation.PaymentId(); !ok {
		return &ValidationError{Name: "paymentId", err: errors.New(`ent: missing required field "Transaction.paymentId"`)}
	}
	if _, ok := tc.mutation.PaymentAmount(); !ok {
		return &ValidationError{Name: "paymentAmount", err: errors.New(`ent: missing required field "Transaction.paymentAmount"`)}
	}
	if _, ok := tc.mutation.PaymentCurrency(); !ok {
		return &ValidationError{Name: "paymentCurrency", err: errors.New(`ent: missing required field "Transaction.paymentCurrency"`)}
	}
	if _, ok := tc.mutation.PaymentDate(); !ok {
		return &ValidationError{Name: "paymentDate", err: errors.New(`ent: missing required field "Transaction.paymentDate"`)}
	}
	if _, ok := tc.mutation.PaymentFee(); !ok {
		return &ValidationError{Name: "paymentFee", err: errors.New(`ent: missing required field "Transaction.paymentFee"`)}
	}
	if _, ok := tc.mutation.PaymentNet(); !ok {
		return &ValidationError{Name: "paymentNet", err: errors.New(`ent: missing required field "Transaction.paymentNet"`)}
	}
	if _, ok := tc.mutation.PaymentPayerEmail(); !ok {
		return &ValidationError{Name: "paymentPayerEmail", err: errors.New(`ent: missing required field "Transaction.paymentPayerEmail"`)}
	}
	if _, ok := tc.mutation.PaymentPayerFirstName(); !ok {
		return &ValidationError{Name: "paymentPayerFirstName", err: errors.New(`ent: missing required field "Transaction.paymentPayerFirstName"`)}
	}
	if _, ok := tc.mutation.PaymentPayerLastName(); !ok {
		return &ValidationError{Name: "paymentPayerLastName", err: errors.New(`ent: missing required field "Transaction.paymentPayerLastName"`)}
	}
	if _, ok := tc.mutation.PaymentPayerId(); !ok {
		return &ValidationError{Name: "paymentPayerId", err: errors.New(`ent: missing required field "Transaction.paymentPayerId"`)}
	}
	if _, ok := tc.mutation.PaymentPayerStatus(); !ok {
		return &ValidationError{Name: "paymentPayerStatus", err: errors.New(`ent: missing required field "Transaction.paymentPayerStatus"`)}
	}
	if _, ok := tc.mutation.PaymentReceiverEmail(); !ok {
		return &ValidationError{Name: "paymentReceiverEmail", err: errors.New(`ent: missing required field "Transaction.paymentReceiverEmail"`)}
	}
	if _, ok := tc.mutation.PaymentReceiverId(); !ok {
		return &ValidationError{Name: "paymentReceiverId", err: errors.New(`ent: missing required field "Transaction.paymentReceiverId"`)}
	}
	if _, ok := tc.mutation.PaymentTax(); !ok {
		return &ValidationError{Name: "paymentTax", err: errors.New(`ent: missing required field "Transaction.paymentTax"`)}
	}
	if _, ok := tc.mutation.PaymentTransactionId(); !ok {
		return &ValidationError{Name: "paymentTransactionId", err: errors.New(`ent: missing required field "Transaction.paymentTransactionId"`)}
	}
	if _, ok := tc.mutation.PaymentTransactionType(); !ok {
		return &ValidationError{Name: "paymentTransactionType", err: errors.New(`ent: missing required field "Transaction.paymentTransactionType"`)}
	}
	if _, ok := tc.mutation.PaymentPendingReason(); !ok {
		return &ValidationError{Name: "paymentPendingReason", err: errors.New(`ent: missing required field "Transaction.paymentPendingReason"`)}
	}
	if _, ok := tc.mutation.PaymentReasonCode(); !ok {
		return &ValidationError{Name: "paymentReasonCode", err: errors.New(`ent: missing required field "Transaction.paymentReasonCode"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.DateCreated(); ok {
		_spec.SetField(transaction.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := tc.mutation.DateUpdated(); ok {
		_spec.SetField(transaction.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.PaymentMethod(); ok {
		_spec.SetField(transaction.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := tc.mutation.PaymentStatus(); ok {
		_spec.SetField(transaction.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := tc.mutation.PaymentId(); ok {
		_spec.SetField(transaction.FieldPaymentId, field.TypeString, value)
		_node.PaymentId = value
	}
	if value, ok := tc.mutation.PaymentAmount(); ok {
		_spec.SetField(transaction.FieldPaymentAmount, field.TypeString, value)
		_node.PaymentAmount = value
	}
	if value, ok := tc.mutation.PaymentCurrency(); ok {
		_spec.SetField(transaction.FieldPaymentCurrency, field.TypeString, value)
		_node.PaymentCurrency = value
	}
	if value, ok := tc.mutation.PaymentDate(); ok {
		_spec.SetField(transaction.FieldPaymentDate, field.TypeString, value)
		_node.PaymentDate = value
	}
	if value, ok := tc.mutation.PaymentFee(); ok {
		_spec.SetField(transaction.FieldPaymentFee, field.TypeString, value)
		_node.PaymentFee = value
	}
	if value, ok := tc.mutation.PaymentNet(); ok {
		_spec.SetField(transaction.FieldPaymentNet, field.TypeString, value)
		_node.PaymentNet = value
	}
	if value, ok := tc.mutation.PaymentPayerEmail(); ok {
		_spec.SetField(transaction.FieldPaymentPayerEmail, field.TypeString, value)
		_node.PaymentPayerEmail = value
	}
	if value, ok := tc.mutation.PaymentPayerFirstName(); ok {
		_spec.SetField(transaction.FieldPaymentPayerFirstName, field.TypeString, value)
		_node.PaymentPayerFirstName = value
	}
	if value, ok := tc.mutation.PaymentPayerLastName(); ok {
		_spec.SetField(transaction.FieldPaymentPayerLastName, field.TypeString, value)
		_node.PaymentPayerLastName = value
	}
	if value, ok := tc.mutation.PaymentPayerId(); ok {
		_spec.SetField(transaction.FieldPaymentPayerId, field.TypeString, value)
		_node.PaymentPayerId = value
	}
	if value, ok := tc.mutation.PaymentPayerStatus(); ok {
		_spec.SetField(transaction.FieldPaymentPayerStatus, field.TypeString, value)
		_node.PaymentPayerStatus = value
	}
	if value, ok := tc.mutation.PaymentReceiverEmail(); ok {
		_spec.SetField(transaction.FieldPaymentReceiverEmail, field.TypeString, value)
		_node.PaymentReceiverEmail = value
	}
	if value, ok := tc.mutation.PaymentReceiverId(); ok {
		_spec.SetField(transaction.FieldPaymentReceiverId, field.TypeString, value)
		_node.PaymentReceiverId = value
	}
	if value, ok := tc.mutation.PaymentTax(); ok {
		_spec.SetField(transaction.FieldPaymentTax, field.TypeString, value)
		_node.PaymentTax = value
	}
	if value, ok := tc.mutation.PaymentTransactionId(); ok {
		_spec.SetField(transaction.FieldPaymentTransactionId, field.TypeString, value)
		_node.PaymentTransactionId = value
	}
	if value, ok := tc.mutation.PaymentTransactionType(); ok {
		_spec.SetField(transaction.FieldPaymentTransactionType, field.TypeString, value)
		_node.PaymentTransactionType = value
	}
	if value, ok := tc.mutation.PaymentPendingReason(); ok {
		_spec.SetField(transaction.FieldPaymentPendingReason, field.TypeString, value)
		_node.PaymentPendingReason = value
	}
	if value, ok := tc.mutation.PaymentReasonCode(); ok {
		_spec.SetField(transaction.FieldPaymentReasonCode, field.TypeString, value)
		_node.PaymentReasonCode = value
	}
	if nodes := tc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.OriginLinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProductCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProductInfluencerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
