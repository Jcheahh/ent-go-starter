// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/viewanalytics"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ViewAnalyticsQuery is the builder for querying ViewAnalytics entities.
type ViewAnalyticsQuery struct {
	config
	ctx              *QueryContext
	order            []viewanalytics.Order
	inters           []Interceptor
	predicates       []predicate.ViewAnalytics
	withProduct      *ProductQuery
	withFKs          bool
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*ViewAnalytics) error
	withNamedProduct map[string]*ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ViewAnalyticsQuery builder.
func (vaq *ViewAnalyticsQuery) Where(ps ...predicate.ViewAnalytics) *ViewAnalyticsQuery {
	vaq.predicates = append(vaq.predicates, ps...)
	return vaq
}

// Limit the number of records to be returned by this query.
func (vaq *ViewAnalyticsQuery) Limit(limit int) *ViewAnalyticsQuery {
	vaq.ctx.Limit = &limit
	return vaq
}

// Offset to start from.
func (vaq *ViewAnalyticsQuery) Offset(offset int) *ViewAnalyticsQuery {
	vaq.ctx.Offset = &offset
	return vaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vaq *ViewAnalyticsQuery) Unique(unique bool) *ViewAnalyticsQuery {
	vaq.ctx.Unique = &unique
	return vaq
}

// Order specifies how the records should be ordered.
func (vaq *ViewAnalyticsQuery) Order(o ...viewanalytics.Order) *ViewAnalyticsQuery {
	vaq.order = append(vaq.order, o...)
	return vaq
}

// QueryProduct chains the current query on the "product" edge.
func (vaq *ViewAnalyticsQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: vaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(viewanalytics.Table, viewanalytics.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, viewanalytics.ProductTable, viewanalytics.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(vaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ViewAnalytics entity from the query.
// Returns a *NotFoundError when no ViewAnalytics was found.
func (vaq *ViewAnalyticsQuery) First(ctx context.Context) (*ViewAnalytics, error) {
	nodes, err := vaq.Limit(1).All(setContextOp(ctx, vaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{viewanalytics.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) FirstX(ctx context.Context) *ViewAnalytics {
	node, err := vaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ViewAnalytics ID from the query.
// Returns a *NotFoundError when no ViewAnalytics ID was found.
func (vaq *ViewAnalyticsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vaq.Limit(1).IDs(setContextOp(ctx, vaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{viewanalytics.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) FirstIDX(ctx context.Context) int {
	id, err := vaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ViewAnalytics entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ViewAnalytics entity is found.
// Returns a *NotFoundError when no ViewAnalytics entities are found.
func (vaq *ViewAnalyticsQuery) Only(ctx context.Context) (*ViewAnalytics, error) {
	nodes, err := vaq.Limit(2).All(setContextOp(ctx, vaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{viewanalytics.Label}
	default:
		return nil, &NotSingularError{viewanalytics.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) OnlyX(ctx context.Context) *ViewAnalytics {
	node, err := vaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ViewAnalytics ID in the query.
// Returns a *NotSingularError when more than one ViewAnalytics ID is found.
// Returns a *NotFoundError when no entities are found.
func (vaq *ViewAnalyticsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vaq.Limit(2).IDs(setContextOp(ctx, vaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{viewanalytics.Label}
	default:
		err = &NotSingularError{viewanalytics.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) OnlyIDX(ctx context.Context) int {
	id, err := vaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ViewAnalyticsSlice.
func (vaq *ViewAnalyticsQuery) All(ctx context.Context) ([]*ViewAnalytics, error) {
	ctx = setContextOp(ctx, vaq.ctx, "All")
	if err := vaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ViewAnalytics, *ViewAnalyticsQuery]()
	return withInterceptors[[]*ViewAnalytics](ctx, vaq, qr, vaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) AllX(ctx context.Context) []*ViewAnalytics {
	nodes, err := vaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ViewAnalytics IDs.
func (vaq *ViewAnalyticsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if vaq.ctx.Unique == nil && vaq.path != nil {
		vaq.Unique(true)
	}
	ctx = setContextOp(ctx, vaq.ctx, "IDs")
	if err = vaq.Select(viewanalytics.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) IDsX(ctx context.Context) []int {
	ids, err := vaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vaq *ViewAnalyticsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vaq.ctx, "Count")
	if err := vaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vaq, querierCount[*ViewAnalyticsQuery](), vaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) CountX(ctx context.Context) int {
	count, err := vaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vaq *ViewAnalyticsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vaq.ctx, "Exist")
	switch _, err := vaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vaq *ViewAnalyticsQuery) ExistX(ctx context.Context) bool {
	exist, err := vaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ViewAnalyticsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vaq *ViewAnalyticsQuery) Clone() *ViewAnalyticsQuery {
	if vaq == nil {
		return nil
	}
	return &ViewAnalyticsQuery{
		config:      vaq.config,
		ctx:         vaq.ctx.Clone(),
		order:       append([]viewanalytics.Order{}, vaq.order...),
		inters:      append([]Interceptor{}, vaq.inters...),
		predicates:  append([]predicate.ViewAnalytics{}, vaq.predicates...),
		withProduct: vaq.withProduct.Clone(),
		// clone intermediate query.
		sql:  vaq.sql.Clone(),
		path: vaq.path,
	}
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (vaq *ViewAnalyticsQuery) WithProduct(opts ...func(*ProductQuery)) *ViewAnalyticsQuery {
	query := (&ProductClient{config: vaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vaq.withProduct = query
	return vaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Views int `json:"views,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ViewAnalytics.Query().
//		GroupBy(viewanalytics.FieldViews).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vaq *ViewAnalyticsQuery) GroupBy(field string, fields ...string) *ViewAnalyticsGroupBy {
	vaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ViewAnalyticsGroupBy{build: vaq}
	grbuild.flds = &vaq.ctx.Fields
	grbuild.label = viewanalytics.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Views int `json:"views,omitempty"`
//	}
//
//	client.ViewAnalytics.Query().
//		Select(viewanalytics.FieldViews).
//		Scan(ctx, &v)
func (vaq *ViewAnalyticsQuery) Select(fields ...string) *ViewAnalyticsSelect {
	vaq.ctx.Fields = append(vaq.ctx.Fields, fields...)
	sbuild := &ViewAnalyticsSelect{ViewAnalyticsQuery: vaq}
	sbuild.label = viewanalytics.Label
	sbuild.flds, sbuild.scan = &vaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ViewAnalyticsSelect configured with the given aggregations.
func (vaq *ViewAnalyticsQuery) Aggregate(fns ...AggregateFunc) *ViewAnalyticsSelect {
	return vaq.Select().Aggregate(fns...)
}

func (vaq *ViewAnalyticsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vaq); err != nil {
				return err
			}
		}
	}
	for _, f := range vaq.ctx.Fields {
		if !viewanalytics.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vaq.path != nil {
		prev, err := vaq.path(ctx)
		if err != nil {
			return err
		}
		vaq.sql = prev
	}
	return nil
}

func (vaq *ViewAnalyticsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ViewAnalytics, error) {
	var (
		nodes       = []*ViewAnalytics{}
		withFKs     = vaq.withFKs
		_spec       = vaq.querySpec()
		loadedTypes = [1]bool{
			vaq.withProduct != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, viewanalytics.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ViewAnalytics).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ViewAnalytics{config: vaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(vaq.modifiers) > 0 {
		_spec.Modifiers = vaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vaq.withProduct; query != nil {
		if err := vaq.loadProduct(ctx, query, nodes,
			func(n *ViewAnalytics) { n.Edges.Product = []*Product{} },
			func(n *ViewAnalytics, e *Product) { n.Edges.Product = append(n.Edges.Product, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vaq.withNamedProduct {
		if err := vaq.loadProduct(ctx, query, nodes,
			func(n *ViewAnalytics) { n.appendNamedProduct(name) },
			func(n *ViewAnalytics, e *Product) { n.appendNamedProduct(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range vaq.loadTotal {
		if err := vaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vaq *ViewAnalyticsQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*ViewAnalytics, init func(*ViewAnalytics), assign func(*ViewAnalytics, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ViewAnalytics)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(viewanalytics.ProductColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.view_analytics_product
		if fk == nil {
			return fmt.Errorf(`foreign-key "view_analytics_product" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "view_analytics_product" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vaq *ViewAnalyticsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vaq.querySpec()
	if len(vaq.modifiers) > 0 {
		_spec.Modifiers = vaq.modifiers
	}
	_spec.Node.Columns = vaq.ctx.Fields
	if len(vaq.ctx.Fields) > 0 {
		_spec.Unique = vaq.ctx.Unique != nil && *vaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vaq.driver, _spec)
}

func (vaq *ViewAnalyticsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(viewanalytics.Table, viewanalytics.Columns, sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt))
	_spec.From = vaq.sql
	if unique := vaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vaq.path != nil {
		_spec.Unique = true
	}
	if fields := vaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, viewanalytics.FieldID)
		for i := range fields {
			if fields[i] != viewanalytics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vaq *ViewAnalyticsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vaq.driver.Dialect())
	t1 := builder.Table(viewanalytics.Table)
	columns := vaq.ctx.Fields
	if len(columns) == 0 {
		columns = viewanalytics.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vaq.sql != nil {
		selector = vaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vaq.ctx.Unique != nil && *vaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vaq.predicates {
		p(selector)
	}
	for _, p := range vaq.order {
		p(selector)
	}
	if offset := vaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProduct tells the query-builder to eager-load the nodes that are connected to the "product"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vaq *ViewAnalyticsQuery) WithNamedProduct(name string, opts ...func(*ProductQuery)) *ViewAnalyticsQuery {
	query := (&ProductClient{config: vaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vaq.withNamedProduct == nil {
		vaq.withNamedProduct = make(map[string]*ProductQuery)
	}
	vaq.withNamedProduct[name] = query
	return vaq
}

// ViewAnalyticsGroupBy is the group-by builder for ViewAnalytics entities.
type ViewAnalyticsGroupBy struct {
	selector
	build *ViewAnalyticsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vagb *ViewAnalyticsGroupBy) Aggregate(fns ...AggregateFunc) *ViewAnalyticsGroupBy {
	vagb.fns = append(vagb.fns, fns...)
	return vagb
}

// Scan applies the selector query and scans the result into the given value.
func (vagb *ViewAnalyticsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vagb.build.ctx, "GroupBy")
	if err := vagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ViewAnalyticsQuery, *ViewAnalyticsGroupBy](ctx, vagb.build, vagb, vagb.build.inters, v)
}

func (vagb *ViewAnalyticsGroupBy) sqlScan(ctx context.Context, root *ViewAnalyticsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vagb.fns))
	for _, fn := range vagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vagb.flds)+len(vagb.fns))
		for _, f := range *vagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ViewAnalyticsSelect is the builder for selecting fields of ViewAnalytics entities.
type ViewAnalyticsSelect struct {
	*ViewAnalyticsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vas *ViewAnalyticsSelect) Aggregate(fns ...AggregateFunc) *ViewAnalyticsSelect {
	vas.fns = append(vas.fns, fns...)
	return vas
}

// Scan applies the selector query and scans the result into the given value.
func (vas *ViewAnalyticsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vas.ctx, "Select")
	if err := vas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ViewAnalyticsQuery, *ViewAnalyticsSelect](ctx, vas.ViewAnalyticsQuery, vas, vas.inters, v)
}

func (vas *ViewAnalyticsSelect) sqlScan(ctx context.Context, root *ViewAnalyticsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vas.fns))
	for _, fn := range vas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
