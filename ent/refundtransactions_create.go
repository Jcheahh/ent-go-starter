// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/refundtransactions"
	"entdemo/ent/transaction"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefundTransactionsCreate is the builder for creating a RefundTransactions entity.
type RefundTransactionsCreate struct {
	config
	mutation *RefundTransactionsMutation
	hooks    []Hook
}

// SetRefundAmount sets the "refundAmount" field.
func (rtc *RefundTransactionsCreate) SetRefundAmount(s string) *RefundTransactionsCreate {
	rtc.mutation.SetRefundAmount(s)
	return rtc
}

// SetRefundCurrency sets the "refundCurrency" field.
func (rtc *RefundTransactionsCreate) SetRefundCurrency(s string) *RefundTransactionsCreate {
	rtc.mutation.SetRefundCurrency(s)
	return rtc
}

// SetRefundReason sets the "refundReason" field.
func (rtc *RefundTransactionsCreate) SetRefundReason(s string) *RefundTransactionsCreate {
	rtc.mutation.SetRefundReason(s)
	return rtc
}

// SetRefundStatus sets the "refundStatus" field.
func (rtc *RefundTransactionsCreate) SetRefundStatus(s string) *RefundTransactionsCreate {
	rtc.mutation.SetRefundStatus(s)
	return rtc
}

// SetDateCreated sets the "dateCreated" field.
func (rtc *RefundTransactionsCreate) SetDateCreated(s string) *RefundTransactionsCreate {
	rtc.mutation.SetDateCreated(s)
	return rtc
}

// SetDateUpdated sets the "dateUpdated" field.
func (rtc *RefundTransactionsCreate) SetDateUpdated(s string) *RefundTransactionsCreate {
	rtc.mutation.SetDateUpdated(s)
	return rtc
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (rtc *RefundTransactionsCreate) AddTransactionIDs(ids ...int) *RefundTransactionsCreate {
	rtc.mutation.AddTransactionIDs(ids...)
	return rtc
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (rtc *RefundTransactionsCreate) AddTransaction(t ...*Transaction) *RefundTransactionsCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtc.AddTransactionIDs(ids...)
}

// Mutation returns the RefundTransactionsMutation object of the builder.
func (rtc *RefundTransactionsCreate) Mutation() *RefundTransactionsMutation {
	return rtc.mutation
}

// Save creates the RefundTransactions in the database.
func (rtc *RefundTransactionsCreate) Save(ctx context.Context) (*RefundTransactions, error) {
	return withHooks[*RefundTransactions, RefundTransactionsMutation](ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RefundTransactionsCreate) SaveX(ctx context.Context) *RefundTransactions {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RefundTransactionsCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RefundTransactionsCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RefundTransactionsCreate) check() error {
	if _, ok := rtc.mutation.RefundAmount(); !ok {
		return &ValidationError{Name: "refundAmount", err: errors.New(`ent: missing required field "RefundTransactions.refundAmount"`)}
	}
	if _, ok := rtc.mutation.RefundCurrency(); !ok {
		return &ValidationError{Name: "refundCurrency", err: errors.New(`ent: missing required field "RefundTransactions.refundCurrency"`)}
	}
	if _, ok := rtc.mutation.RefundReason(); !ok {
		return &ValidationError{Name: "refundReason", err: errors.New(`ent: missing required field "RefundTransactions.refundReason"`)}
	}
	if _, ok := rtc.mutation.RefundStatus(); !ok {
		return &ValidationError{Name: "refundStatus", err: errors.New(`ent: missing required field "RefundTransactions.refundStatus"`)}
	}
	if _, ok := rtc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "RefundTransactions.dateCreated"`)}
	}
	if _, ok := rtc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "RefundTransactions.dateUpdated"`)}
	}
	return nil
}

func (rtc *RefundTransactionsCreate) sqlSave(ctx context.Context) (*RefundTransactions, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *RefundTransactionsCreate) createSpec() (*RefundTransactions, *sqlgraph.CreateSpec) {
	var (
		_node = &RefundTransactions{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(refundtransactions.Table, sqlgraph.NewFieldSpec(refundtransactions.FieldID, field.TypeInt))
	)
	if value, ok := rtc.mutation.RefundAmount(); ok {
		_spec.SetField(refundtransactions.FieldRefundAmount, field.TypeString, value)
		_node.RefundAmount = value
	}
	if value, ok := rtc.mutation.RefundCurrency(); ok {
		_spec.SetField(refundtransactions.FieldRefundCurrency, field.TypeString, value)
		_node.RefundCurrency = value
	}
	if value, ok := rtc.mutation.RefundReason(); ok {
		_spec.SetField(refundtransactions.FieldRefundReason, field.TypeString, value)
		_node.RefundReason = value
	}
	if value, ok := rtc.mutation.RefundStatus(); ok {
		_spec.SetField(refundtransactions.FieldRefundStatus, field.TypeString, value)
		_node.RefundStatus = value
	}
	if value, ok := rtc.mutation.DateCreated(); ok {
		_spec.SetField(refundtransactions.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := rtc.mutation.DateUpdated(); ok {
		_spec.SetField(refundtransactions.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if nodes := rtc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RefundTransactionsCreateBulk is the builder for creating many RefundTransactions entities in bulk.
type RefundTransactionsCreateBulk struct {
	config
	builders []*RefundTransactionsCreate
}

// Save creates the RefundTransactions entities in the database.
func (rtcb *RefundTransactionsCreateBulk) Save(ctx context.Context) ([]*RefundTransactions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RefundTransactions, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefundTransactionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RefundTransactionsCreateBulk) SaveX(ctx context.Context) []*RefundTransactions {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RefundTransactionsCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RefundTransactionsCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
