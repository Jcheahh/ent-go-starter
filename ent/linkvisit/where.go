// Code generated by ent, DO NOT EDIT.

package linkvisit

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLTE(FieldID, id))
}

// DateCreated applies equality check predicate on the "dateCreated" field. It's identical to DateCreatedEQ.
func DateCreated(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldDateCreated, v))
}

// IpAddress applies equality check predicate on the "ipAddress" field. It's identical to IpAddressEQ.
func IpAddress(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldIpAddress, v))
}

// SaleValue applies equality check predicate on the "saleValue" field. It's identical to SaleValueEQ.
func SaleValue(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldSaleValue, v))
}

// CommissionEarned applies equality check predicate on the "commissionEarned" field. It's identical to CommissionEarnedEQ.
func CommissionEarned(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldCommissionEarned, v))
}

// DateCreatedEQ applies the EQ predicate on the "dateCreated" field.
func DateCreatedEQ(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "dateCreated" field.
func DateCreatedNEQ(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "dateCreated" field.
func DateCreatedIn(vs ...string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "dateCreated" field.
func DateCreatedNotIn(vs ...string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "dateCreated" field.
func DateCreatedGT(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "dateCreated" field.
func DateCreatedGTE(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "dateCreated" field.
func DateCreatedLT(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "dateCreated" field.
func DateCreatedLTE(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLTE(FieldDateCreated, v))
}

// DateCreatedContains applies the Contains predicate on the "dateCreated" field.
func DateCreatedContains(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldContains(FieldDateCreated, v))
}

// DateCreatedHasPrefix applies the HasPrefix predicate on the "dateCreated" field.
func DateCreatedHasPrefix(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldHasPrefix(FieldDateCreated, v))
}

// DateCreatedHasSuffix applies the HasSuffix predicate on the "dateCreated" field.
func DateCreatedHasSuffix(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldHasSuffix(FieldDateCreated, v))
}

// DateCreatedEqualFold applies the EqualFold predicate on the "dateCreated" field.
func DateCreatedEqualFold(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEqualFold(FieldDateCreated, v))
}

// DateCreatedContainsFold applies the ContainsFold predicate on the "dateCreated" field.
func DateCreatedContainsFold(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldContainsFold(FieldDateCreated, v))
}

// IpAddressEQ applies the EQ predicate on the "ipAddress" field.
func IpAddressEQ(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldIpAddress, v))
}

// IpAddressNEQ applies the NEQ predicate on the "ipAddress" field.
func IpAddressNEQ(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNEQ(FieldIpAddress, v))
}

// IpAddressIn applies the In predicate on the "ipAddress" field.
func IpAddressIn(vs ...string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldIn(FieldIpAddress, vs...))
}

// IpAddressNotIn applies the NotIn predicate on the "ipAddress" field.
func IpAddressNotIn(vs ...string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNotIn(FieldIpAddress, vs...))
}

// IpAddressGT applies the GT predicate on the "ipAddress" field.
func IpAddressGT(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGT(FieldIpAddress, v))
}

// IpAddressGTE applies the GTE predicate on the "ipAddress" field.
func IpAddressGTE(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGTE(FieldIpAddress, v))
}

// IpAddressLT applies the LT predicate on the "ipAddress" field.
func IpAddressLT(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLT(FieldIpAddress, v))
}

// IpAddressLTE applies the LTE predicate on the "ipAddress" field.
func IpAddressLTE(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLTE(FieldIpAddress, v))
}

// IpAddressContains applies the Contains predicate on the "ipAddress" field.
func IpAddressContains(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldContains(FieldIpAddress, v))
}

// IpAddressHasPrefix applies the HasPrefix predicate on the "ipAddress" field.
func IpAddressHasPrefix(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldHasPrefix(FieldIpAddress, v))
}

// IpAddressHasSuffix applies the HasSuffix predicate on the "ipAddress" field.
func IpAddressHasSuffix(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldHasSuffix(FieldIpAddress, v))
}

// IpAddressEqualFold applies the EqualFold predicate on the "ipAddress" field.
func IpAddressEqualFold(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEqualFold(FieldIpAddress, v))
}

// IpAddressContainsFold applies the ContainsFold predicate on the "ipAddress" field.
func IpAddressContainsFold(v string) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldContainsFold(FieldIpAddress, v))
}

// SaleValueEQ applies the EQ predicate on the "saleValue" field.
func SaleValueEQ(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldSaleValue, v))
}

// SaleValueNEQ applies the NEQ predicate on the "saleValue" field.
func SaleValueNEQ(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNEQ(FieldSaleValue, v))
}

// SaleValueIn applies the In predicate on the "saleValue" field.
func SaleValueIn(vs ...int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldIn(FieldSaleValue, vs...))
}

// SaleValueNotIn applies the NotIn predicate on the "saleValue" field.
func SaleValueNotIn(vs ...int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNotIn(FieldSaleValue, vs...))
}

// SaleValueGT applies the GT predicate on the "saleValue" field.
func SaleValueGT(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGT(FieldSaleValue, v))
}

// SaleValueGTE applies the GTE predicate on the "saleValue" field.
func SaleValueGTE(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGTE(FieldSaleValue, v))
}

// SaleValueLT applies the LT predicate on the "saleValue" field.
func SaleValueLT(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLT(FieldSaleValue, v))
}

// SaleValueLTE applies the LTE predicate on the "saleValue" field.
func SaleValueLTE(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLTE(FieldSaleValue, v))
}

// CommissionEarnedEQ applies the EQ predicate on the "commissionEarned" field.
func CommissionEarnedEQ(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldEQ(FieldCommissionEarned, v))
}

// CommissionEarnedNEQ applies the NEQ predicate on the "commissionEarned" field.
func CommissionEarnedNEQ(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNEQ(FieldCommissionEarned, v))
}

// CommissionEarnedIn applies the In predicate on the "commissionEarned" field.
func CommissionEarnedIn(vs ...int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldIn(FieldCommissionEarned, vs...))
}

// CommissionEarnedNotIn applies the NotIn predicate on the "commissionEarned" field.
func CommissionEarnedNotIn(vs ...int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldNotIn(FieldCommissionEarned, vs...))
}

// CommissionEarnedGT applies the GT predicate on the "commissionEarned" field.
func CommissionEarnedGT(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGT(FieldCommissionEarned, v))
}

// CommissionEarnedGTE applies the GTE predicate on the "commissionEarned" field.
func CommissionEarnedGTE(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldGTE(FieldCommissionEarned, v))
}

// CommissionEarnedLT applies the LT predicate on the "commissionEarned" field.
func CommissionEarnedLT(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLT(FieldCommissionEarned, v))
}

// CommissionEarnedLTE applies the LTE predicate on the "commissionEarned" field.
func CommissionEarnedLTE(v int) predicate.LinkVisit {
	return predicate.LinkVisit(sql.FieldLTE(FieldCommissionEarned, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LinkVisit) predicate.LinkVisit {
	return predicate.LinkVisit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LinkVisit) predicate.LinkVisit {
	return predicate.LinkVisit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LinkVisit) predicate.LinkVisit {
	return predicate.LinkVisit(func(s *sql.Selector) {
		p(s.Not())
	})
}
