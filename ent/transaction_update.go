// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/linkvisit"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/shop"
	"entdemo/ent/transaction"
	"entdemo/ent/userbuyer"
	"entdemo/ent/userinfluencer"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetDateCreated sets the "dateCreated" field.
func (tu *TransactionUpdate) SetDateCreated(s string) *TransactionUpdate {
	tu.mutation.SetDateCreated(s)
	return tu
}

// SetDateUpdated sets the "dateUpdated" field.
func (tu *TransactionUpdate) SetDateUpdated(s string) *TransactionUpdate {
	tu.mutation.SetDateUpdated(s)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransactionUpdate) SetStatus(t transaction.Status) *TransactionUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableStatus(t *transaction.Status) *TransactionUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetPaymentMethod sets the "paymentMethod" field.
func (tu *TransactionUpdate) SetPaymentMethod(s string) *TransactionUpdate {
	tu.mutation.SetPaymentMethod(s)
	return tu
}

// SetPaymentStatus sets the "paymentStatus" field.
func (tu *TransactionUpdate) SetPaymentStatus(s string) *TransactionUpdate {
	tu.mutation.SetPaymentStatus(s)
	return tu
}

// SetPaymentId sets the "paymentId" field.
func (tu *TransactionUpdate) SetPaymentId(s string) *TransactionUpdate {
	tu.mutation.SetPaymentId(s)
	return tu
}

// SetPaymentAmount sets the "paymentAmount" field.
func (tu *TransactionUpdate) SetPaymentAmount(s string) *TransactionUpdate {
	tu.mutation.SetPaymentAmount(s)
	return tu
}

// SetPaymentCurrency sets the "paymentCurrency" field.
func (tu *TransactionUpdate) SetPaymentCurrency(s string) *TransactionUpdate {
	tu.mutation.SetPaymentCurrency(s)
	return tu
}

// SetPaymentDate sets the "paymentDate" field.
func (tu *TransactionUpdate) SetPaymentDate(s string) *TransactionUpdate {
	tu.mutation.SetPaymentDate(s)
	return tu
}

// SetPaymentFee sets the "paymentFee" field.
func (tu *TransactionUpdate) SetPaymentFee(s string) *TransactionUpdate {
	tu.mutation.SetPaymentFee(s)
	return tu
}

// SetPaymentNet sets the "paymentNet" field.
func (tu *TransactionUpdate) SetPaymentNet(s string) *TransactionUpdate {
	tu.mutation.SetPaymentNet(s)
	return tu
}

// SetPaymentPayerEmail sets the "paymentPayerEmail" field.
func (tu *TransactionUpdate) SetPaymentPayerEmail(s string) *TransactionUpdate {
	tu.mutation.SetPaymentPayerEmail(s)
	return tu
}

// SetPaymentPayerFirstName sets the "paymentPayerFirstName" field.
func (tu *TransactionUpdate) SetPaymentPayerFirstName(s string) *TransactionUpdate {
	tu.mutation.SetPaymentPayerFirstName(s)
	return tu
}

// SetPaymentPayerLastName sets the "paymentPayerLastName" field.
func (tu *TransactionUpdate) SetPaymentPayerLastName(s string) *TransactionUpdate {
	tu.mutation.SetPaymentPayerLastName(s)
	return tu
}

// SetPaymentPayerId sets the "paymentPayerId" field.
func (tu *TransactionUpdate) SetPaymentPayerId(s string) *TransactionUpdate {
	tu.mutation.SetPaymentPayerId(s)
	return tu
}

// SetPaymentPayerStatus sets the "paymentPayerStatus" field.
func (tu *TransactionUpdate) SetPaymentPayerStatus(s string) *TransactionUpdate {
	tu.mutation.SetPaymentPayerStatus(s)
	return tu
}

// SetPaymentReceiverEmail sets the "paymentReceiverEmail" field.
func (tu *TransactionUpdate) SetPaymentReceiverEmail(s string) *TransactionUpdate {
	tu.mutation.SetPaymentReceiverEmail(s)
	return tu
}

// SetPaymentReceiverId sets the "paymentReceiverId" field.
func (tu *TransactionUpdate) SetPaymentReceiverId(s string) *TransactionUpdate {
	tu.mutation.SetPaymentReceiverId(s)
	return tu
}

// SetPaymentTax sets the "paymentTax" field.
func (tu *TransactionUpdate) SetPaymentTax(s string) *TransactionUpdate {
	tu.mutation.SetPaymentTax(s)
	return tu
}

// SetPaymentTransactionId sets the "paymentTransactionId" field.
func (tu *TransactionUpdate) SetPaymentTransactionId(s string) *TransactionUpdate {
	tu.mutation.SetPaymentTransactionId(s)
	return tu
}

// SetPaymentTransactionType sets the "paymentTransactionType" field.
func (tu *TransactionUpdate) SetPaymentTransactionType(s string) *TransactionUpdate {
	tu.mutation.SetPaymentTransactionType(s)
	return tu
}

// SetPaymentPendingReason sets the "paymentPendingReason" field.
func (tu *TransactionUpdate) SetPaymentPendingReason(s string) *TransactionUpdate {
	tu.mutation.SetPaymentPendingReason(s)
	return tu
}

// SetPaymentReasonCode sets the "paymentReasonCode" field.
func (tu *TransactionUpdate) SetPaymentReasonCode(s string) *TransactionUpdate {
	tu.mutation.SetPaymentReasonCode(s)
	return tu
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (tu *TransactionUpdate) AddProductIDs(ids ...int) *TransactionUpdate {
	tu.mutation.AddProductIDs(ids...)
	return tu
}

// AddProduct adds the "product" edges to the Product entity.
func (tu *TransactionUpdate) AddProduct(p ...*Product) *TransactionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProductIDs(ids...)
}

// AddOriginLinkIDs adds the "originLink" edge to the LinkVisit entity by IDs.
func (tu *TransactionUpdate) AddOriginLinkIDs(ids ...int) *TransactionUpdate {
	tu.mutation.AddOriginLinkIDs(ids...)
	return tu
}

// AddOriginLink adds the "originLink" edges to the LinkVisit entity.
func (tu *TransactionUpdate) AddOriginLink(l ...*LinkVisit) *TransactionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddOriginLinkIDs(ids...)
}

// AddProductCustomerIDs adds the "productCustomer" edge to the UserBuyer entity by IDs.
func (tu *TransactionUpdate) AddProductCustomerIDs(ids ...int) *TransactionUpdate {
	tu.mutation.AddProductCustomerIDs(ids...)
	return tu
}

// AddProductCustomer adds the "productCustomer" edges to the UserBuyer entity.
func (tu *TransactionUpdate) AddProductCustomer(u ...*UserBuyer) *TransactionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddProductCustomerIDs(ids...)
}

// AddShopIDs adds the "shop" edge to the Shop entity by IDs.
func (tu *TransactionUpdate) AddShopIDs(ids ...int) *TransactionUpdate {
	tu.mutation.AddShopIDs(ids...)
	return tu
}

// AddShop adds the "shop" edges to the Shop entity.
func (tu *TransactionUpdate) AddShop(s ...*Shop) *TransactionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddShopIDs(ids...)
}

// AddProductInfluencerIDs adds the "productInfluencer" edge to the UserInfluencer entity by IDs.
func (tu *TransactionUpdate) AddProductInfluencerIDs(ids ...int) *TransactionUpdate {
	tu.mutation.AddProductInfluencerIDs(ids...)
	return tu
}

// AddProductInfluencer adds the "productInfluencer" edges to the UserInfluencer entity.
func (tu *TransactionUpdate) AddProductInfluencer(u ...*UserInfluencer) *TransactionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddProductInfluencerIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (tu *TransactionUpdate) ClearProduct() *TransactionUpdate {
	tu.mutation.ClearProduct()
	return tu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (tu *TransactionUpdate) RemoveProductIDs(ids ...int) *TransactionUpdate {
	tu.mutation.RemoveProductIDs(ids...)
	return tu
}

// RemoveProduct removes "product" edges to Product entities.
func (tu *TransactionUpdate) RemoveProduct(p ...*Product) *TransactionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProductIDs(ids...)
}

// ClearOriginLink clears all "originLink" edges to the LinkVisit entity.
func (tu *TransactionUpdate) ClearOriginLink() *TransactionUpdate {
	tu.mutation.ClearOriginLink()
	return tu
}

// RemoveOriginLinkIDs removes the "originLink" edge to LinkVisit entities by IDs.
func (tu *TransactionUpdate) RemoveOriginLinkIDs(ids ...int) *TransactionUpdate {
	tu.mutation.RemoveOriginLinkIDs(ids...)
	return tu
}

// RemoveOriginLink removes "originLink" edges to LinkVisit entities.
func (tu *TransactionUpdate) RemoveOriginLink(l ...*LinkVisit) *TransactionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveOriginLinkIDs(ids...)
}

// ClearProductCustomer clears all "productCustomer" edges to the UserBuyer entity.
func (tu *TransactionUpdate) ClearProductCustomer() *TransactionUpdate {
	tu.mutation.ClearProductCustomer()
	return tu
}

// RemoveProductCustomerIDs removes the "productCustomer" edge to UserBuyer entities by IDs.
func (tu *TransactionUpdate) RemoveProductCustomerIDs(ids ...int) *TransactionUpdate {
	tu.mutation.RemoveProductCustomerIDs(ids...)
	return tu
}

// RemoveProductCustomer removes "productCustomer" edges to UserBuyer entities.
func (tu *TransactionUpdate) RemoveProductCustomer(u ...*UserBuyer) *TransactionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveProductCustomerIDs(ids...)
}

// ClearShop clears all "shop" edges to the Shop entity.
func (tu *TransactionUpdate) ClearShop() *TransactionUpdate {
	tu.mutation.ClearShop()
	return tu
}

// RemoveShopIDs removes the "shop" edge to Shop entities by IDs.
func (tu *TransactionUpdate) RemoveShopIDs(ids ...int) *TransactionUpdate {
	tu.mutation.RemoveShopIDs(ids...)
	return tu
}

// RemoveShop removes "shop" edges to Shop entities.
func (tu *TransactionUpdate) RemoveShop(s ...*Shop) *TransactionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveShopIDs(ids...)
}

// ClearProductInfluencer clears all "productInfluencer" edges to the UserInfluencer entity.
func (tu *TransactionUpdate) ClearProductInfluencer() *TransactionUpdate {
	tu.mutation.ClearProductInfluencer()
	return tu
}

// RemoveProductInfluencerIDs removes the "productInfluencer" edge to UserInfluencer entities by IDs.
func (tu *TransactionUpdate) RemoveProductInfluencerIDs(ids ...int) *TransactionUpdate {
	tu.mutation.RemoveProductInfluencerIDs(ids...)
	return tu
}

// RemoveProductInfluencer removes "productInfluencer" edges to UserInfluencer entities.
func (tu *TransactionUpdate) RemoveProductInfluencer(u ...*UserInfluencer) *TransactionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveProductInfluencerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TransactionMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.DateCreated(); ok {
		_spec.SetField(transaction.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := tu.mutation.DateUpdated(); ok {
		_spec.SetField(transaction.FieldDateUpdated, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.PaymentMethod(); ok {
		_spec.SetField(transaction.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentStatus(); ok {
		_spec.SetField(transaction.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentId(); ok {
		_spec.SetField(transaction.FieldPaymentId, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentAmount(); ok {
		_spec.SetField(transaction.FieldPaymentAmount, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentCurrency(); ok {
		_spec.SetField(transaction.FieldPaymentCurrency, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentDate(); ok {
		_spec.SetField(transaction.FieldPaymentDate, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentFee(); ok {
		_spec.SetField(transaction.FieldPaymentFee, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentNet(); ok {
		_spec.SetField(transaction.FieldPaymentNet, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentPayerEmail(); ok {
		_spec.SetField(transaction.FieldPaymentPayerEmail, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentPayerFirstName(); ok {
		_spec.SetField(transaction.FieldPaymentPayerFirstName, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentPayerLastName(); ok {
		_spec.SetField(transaction.FieldPaymentPayerLastName, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentPayerId(); ok {
		_spec.SetField(transaction.FieldPaymentPayerId, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentPayerStatus(); ok {
		_spec.SetField(transaction.FieldPaymentPayerStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentReceiverEmail(); ok {
		_spec.SetField(transaction.FieldPaymentReceiverEmail, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentReceiverId(); ok {
		_spec.SetField(transaction.FieldPaymentReceiverId, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentTax(); ok {
		_spec.SetField(transaction.FieldPaymentTax, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentTransactionId(); ok {
		_spec.SetField(transaction.FieldPaymentTransactionId, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentTransactionType(); ok {
		_spec.SetField(transaction.FieldPaymentTransactionType, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentPendingReason(); ok {
		_spec.SetField(transaction.FieldPaymentPendingReason, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentReasonCode(); ok {
		_spec.SetField(transaction.FieldPaymentReasonCode, field.TypeString, value)
	}
	if tu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProductIDs(); len(nodes) > 0 && !tu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OriginLinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOriginLinkIDs(); len(nodes) > 0 && !tu.mutation.OriginLinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OriginLinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProductCustomerIDs(); len(nodes) > 0 && !tu.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProductCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedShopIDs(); len(nodes) > 0 && !tu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProductInfluencerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProductInfluencerIDs(); len(nodes) > 0 && !tu.mutation.ProductInfluencerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProductInfluencerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetDateCreated sets the "dateCreated" field.
func (tuo *TransactionUpdateOne) SetDateCreated(s string) *TransactionUpdateOne {
	tuo.mutation.SetDateCreated(s)
	return tuo
}

// SetDateUpdated sets the "dateUpdated" field.
func (tuo *TransactionUpdateOne) SetDateUpdated(s string) *TransactionUpdateOne {
	tuo.mutation.SetDateUpdated(s)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransactionUpdateOne) SetStatus(t transaction.Status) *TransactionUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableStatus(t *transaction.Status) *TransactionUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetPaymentMethod sets the "paymentMethod" field.
func (tuo *TransactionUpdateOne) SetPaymentMethod(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentMethod(s)
	return tuo
}

// SetPaymentStatus sets the "paymentStatus" field.
func (tuo *TransactionUpdateOne) SetPaymentStatus(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentStatus(s)
	return tuo
}

// SetPaymentId sets the "paymentId" field.
func (tuo *TransactionUpdateOne) SetPaymentId(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentId(s)
	return tuo
}

// SetPaymentAmount sets the "paymentAmount" field.
func (tuo *TransactionUpdateOne) SetPaymentAmount(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentAmount(s)
	return tuo
}

// SetPaymentCurrency sets the "paymentCurrency" field.
func (tuo *TransactionUpdateOne) SetPaymentCurrency(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentCurrency(s)
	return tuo
}

// SetPaymentDate sets the "paymentDate" field.
func (tuo *TransactionUpdateOne) SetPaymentDate(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentDate(s)
	return tuo
}

// SetPaymentFee sets the "paymentFee" field.
func (tuo *TransactionUpdateOne) SetPaymentFee(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentFee(s)
	return tuo
}

// SetPaymentNet sets the "paymentNet" field.
func (tuo *TransactionUpdateOne) SetPaymentNet(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentNet(s)
	return tuo
}

// SetPaymentPayerEmail sets the "paymentPayerEmail" field.
func (tuo *TransactionUpdateOne) SetPaymentPayerEmail(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentPayerEmail(s)
	return tuo
}

// SetPaymentPayerFirstName sets the "paymentPayerFirstName" field.
func (tuo *TransactionUpdateOne) SetPaymentPayerFirstName(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentPayerFirstName(s)
	return tuo
}

// SetPaymentPayerLastName sets the "paymentPayerLastName" field.
func (tuo *TransactionUpdateOne) SetPaymentPayerLastName(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentPayerLastName(s)
	return tuo
}

// SetPaymentPayerId sets the "paymentPayerId" field.
func (tuo *TransactionUpdateOne) SetPaymentPayerId(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentPayerId(s)
	return tuo
}

// SetPaymentPayerStatus sets the "paymentPayerStatus" field.
func (tuo *TransactionUpdateOne) SetPaymentPayerStatus(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentPayerStatus(s)
	return tuo
}

// SetPaymentReceiverEmail sets the "paymentReceiverEmail" field.
func (tuo *TransactionUpdateOne) SetPaymentReceiverEmail(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentReceiverEmail(s)
	return tuo
}

// SetPaymentReceiverId sets the "paymentReceiverId" field.
func (tuo *TransactionUpdateOne) SetPaymentReceiverId(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentReceiverId(s)
	return tuo
}

// SetPaymentTax sets the "paymentTax" field.
func (tuo *TransactionUpdateOne) SetPaymentTax(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentTax(s)
	return tuo
}

// SetPaymentTransactionId sets the "paymentTransactionId" field.
func (tuo *TransactionUpdateOne) SetPaymentTransactionId(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentTransactionId(s)
	return tuo
}

// SetPaymentTransactionType sets the "paymentTransactionType" field.
func (tuo *TransactionUpdateOne) SetPaymentTransactionType(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentTransactionType(s)
	return tuo
}

// SetPaymentPendingReason sets the "paymentPendingReason" field.
func (tuo *TransactionUpdateOne) SetPaymentPendingReason(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentPendingReason(s)
	return tuo
}

// SetPaymentReasonCode sets the "paymentReasonCode" field.
func (tuo *TransactionUpdateOne) SetPaymentReasonCode(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentReasonCode(s)
	return tuo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (tuo *TransactionUpdateOne) AddProductIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.AddProductIDs(ids...)
	return tuo
}

// AddProduct adds the "product" edges to the Product entity.
func (tuo *TransactionUpdateOne) AddProduct(p ...*Product) *TransactionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProductIDs(ids...)
}

// AddOriginLinkIDs adds the "originLink" edge to the LinkVisit entity by IDs.
func (tuo *TransactionUpdateOne) AddOriginLinkIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.AddOriginLinkIDs(ids...)
	return tuo
}

// AddOriginLink adds the "originLink" edges to the LinkVisit entity.
func (tuo *TransactionUpdateOne) AddOriginLink(l ...*LinkVisit) *TransactionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddOriginLinkIDs(ids...)
}

// AddProductCustomerIDs adds the "productCustomer" edge to the UserBuyer entity by IDs.
func (tuo *TransactionUpdateOne) AddProductCustomerIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.AddProductCustomerIDs(ids...)
	return tuo
}

// AddProductCustomer adds the "productCustomer" edges to the UserBuyer entity.
func (tuo *TransactionUpdateOne) AddProductCustomer(u ...*UserBuyer) *TransactionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddProductCustomerIDs(ids...)
}

// AddShopIDs adds the "shop" edge to the Shop entity by IDs.
func (tuo *TransactionUpdateOne) AddShopIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.AddShopIDs(ids...)
	return tuo
}

// AddShop adds the "shop" edges to the Shop entity.
func (tuo *TransactionUpdateOne) AddShop(s ...*Shop) *TransactionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddShopIDs(ids...)
}

// AddProductInfluencerIDs adds the "productInfluencer" edge to the UserInfluencer entity by IDs.
func (tuo *TransactionUpdateOne) AddProductInfluencerIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.AddProductInfluencerIDs(ids...)
	return tuo
}

// AddProductInfluencer adds the "productInfluencer" edges to the UserInfluencer entity.
func (tuo *TransactionUpdateOne) AddProductInfluencer(u ...*UserInfluencer) *TransactionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddProductInfluencerIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (tuo *TransactionUpdateOne) ClearProduct() *TransactionUpdateOne {
	tuo.mutation.ClearProduct()
	return tuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (tuo *TransactionUpdateOne) RemoveProductIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.RemoveProductIDs(ids...)
	return tuo
}

// RemoveProduct removes "product" edges to Product entities.
func (tuo *TransactionUpdateOne) RemoveProduct(p ...*Product) *TransactionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProductIDs(ids...)
}

// ClearOriginLink clears all "originLink" edges to the LinkVisit entity.
func (tuo *TransactionUpdateOne) ClearOriginLink() *TransactionUpdateOne {
	tuo.mutation.ClearOriginLink()
	return tuo
}

// RemoveOriginLinkIDs removes the "originLink" edge to LinkVisit entities by IDs.
func (tuo *TransactionUpdateOne) RemoveOriginLinkIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.RemoveOriginLinkIDs(ids...)
	return tuo
}

// RemoveOriginLink removes "originLink" edges to LinkVisit entities.
func (tuo *TransactionUpdateOne) RemoveOriginLink(l ...*LinkVisit) *TransactionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveOriginLinkIDs(ids...)
}

// ClearProductCustomer clears all "productCustomer" edges to the UserBuyer entity.
func (tuo *TransactionUpdateOne) ClearProductCustomer() *TransactionUpdateOne {
	tuo.mutation.ClearProductCustomer()
	return tuo
}

// RemoveProductCustomerIDs removes the "productCustomer" edge to UserBuyer entities by IDs.
func (tuo *TransactionUpdateOne) RemoveProductCustomerIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.RemoveProductCustomerIDs(ids...)
	return tuo
}

// RemoveProductCustomer removes "productCustomer" edges to UserBuyer entities.
func (tuo *TransactionUpdateOne) RemoveProductCustomer(u ...*UserBuyer) *TransactionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveProductCustomerIDs(ids...)
}

// ClearShop clears all "shop" edges to the Shop entity.
func (tuo *TransactionUpdateOne) ClearShop() *TransactionUpdateOne {
	tuo.mutation.ClearShop()
	return tuo
}

// RemoveShopIDs removes the "shop" edge to Shop entities by IDs.
func (tuo *TransactionUpdateOne) RemoveShopIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.RemoveShopIDs(ids...)
	return tuo
}

// RemoveShop removes "shop" edges to Shop entities.
func (tuo *TransactionUpdateOne) RemoveShop(s ...*Shop) *TransactionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveShopIDs(ids...)
}

// ClearProductInfluencer clears all "productInfluencer" edges to the UserInfluencer entity.
func (tuo *TransactionUpdateOne) ClearProductInfluencer() *TransactionUpdateOne {
	tuo.mutation.ClearProductInfluencer()
	return tuo
}

// RemoveProductInfluencerIDs removes the "productInfluencer" edge to UserInfluencer entities by IDs.
func (tuo *TransactionUpdateOne) RemoveProductInfluencerIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.RemoveProductInfluencerIDs(ids...)
	return tuo
}

// RemoveProductInfluencer removes "productInfluencer" edges to UserInfluencer entities.
func (tuo *TransactionUpdateOne) RemoveProductInfluencer(u ...*UserInfluencer) *TransactionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveProductInfluencerIDs(ids...)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks[*Transaction, TransactionMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.DateCreated(); ok {
		_spec.SetField(transaction.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DateUpdated(); ok {
		_spec.SetField(transaction.FieldDateUpdated, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.PaymentMethod(); ok {
		_spec.SetField(transaction.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentStatus(); ok {
		_spec.SetField(transaction.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentId(); ok {
		_spec.SetField(transaction.FieldPaymentId, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentAmount(); ok {
		_spec.SetField(transaction.FieldPaymentAmount, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentCurrency(); ok {
		_spec.SetField(transaction.FieldPaymentCurrency, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentDate(); ok {
		_spec.SetField(transaction.FieldPaymentDate, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentFee(); ok {
		_spec.SetField(transaction.FieldPaymentFee, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentNet(); ok {
		_spec.SetField(transaction.FieldPaymentNet, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentPayerEmail(); ok {
		_spec.SetField(transaction.FieldPaymentPayerEmail, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentPayerFirstName(); ok {
		_spec.SetField(transaction.FieldPaymentPayerFirstName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentPayerLastName(); ok {
		_spec.SetField(transaction.FieldPaymentPayerLastName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentPayerId(); ok {
		_spec.SetField(transaction.FieldPaymentPayerId, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentPayerStatus(); ok {
		_spec.SetField(transaction.FieldPaymentPayerStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentReceiverEmail(); ok {
		_spec.SetField(transaction.FieldPaymentReceiverEmail, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentReceiverId(); ok {
		_spec.SetField(transaction.FieldPaymentReceiverId, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentTax(); ok {
		_spec.SetField(transaction.FieldPaymentTax, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentTransactionId(); ok {
		_spec.SetField(transaction.FieldPaymentTransactionId, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentTransactionType(); ok {
		_spec.SetField(transaction.FieldPaymentTransactionType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentPendingReason(); ok {
		_spec.SetField(transaction.FieldPaymentPendingReason, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentReasonCode(); ok {
		_spec.SetField(transaction.FieldPaymentReasonCode, field.TypeString, value)
	}
	if tuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !tuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductTable,
			Columns: []string{transaction.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OriginLinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOriginLinkIDs(); len(nodes) > 0 && !tuo.mutation.OriginLinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OriginLinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.OriginLinkTable,
			Columns: []string{transaction.OriginLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProductCustomerIDs(); len(nodes) > 0 && !tuo.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProductCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductCustomerTable,
			Columns: []string{transaction.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedShopIDs(); len(nodes) > 0 && !tuo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ShopTable,
			Columns: []string{transaction.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProductInfluencerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProductInfluencerIDs(); len(nodes) > 0 && !tuo.mutation.ProductInfluencerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProductInfluencerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ProductInfluencerTable,
			Columns: []string{transaction.ProductInfluencerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
