// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/herocontent"
	"entdemo/ent/predicate"
	"entdemo/ent/primarycontent"
	"entdemo/ent/productpageview"
	"entdemo/ent/viewanalytics"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPageViewUpdate is the builder for updating ProductPageView entities.
type ProductPageViewUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPageViewMutation
}

// Where appends a list predicates to the ProductPageViewUpdate builder.
func (ppvu *ProductPageViewUpdate) Where(ps ...predicate.ProductPageView) *ProductPageViewUpdate {
	ppvu.mutation.Where(ps...)
	return ppvu
}

// SetVersion sets the "version" field.
func (ppvu *ProductPageViewUpdate) SetVersion(i int) *ProductPageViewUpdate {
	ppvu.mutation.ResetVersion()
	ppvu.mutation.SetVersion(i)
	return ppvu
}

// AddVersion adds i to the "version" field.
func (ppvu *ProductPageViewUpdate) AddVersion(i int) *ProductPageViewUpdate {
	ppvu.mutation.AddVersion(i)
	return ppvu
}

// AddHeroContentIDs adds the "heroContent" edge to the HeroContent entity by IDs.
func (ppvu *ProductPageViewUpdate) AddHeroContentIDs(ids ...int) *ProductPageViewUpdate {
	ppvu.mutation.AddHeroContentIDs(ids...)
	return ppvu
}

// AddHeroContent adds the "heroContent" edges to the HeroContent entity.
func (ppvu *ProductPageViewUpdate) AddHeroContent(h ...*HeroContent) *ProductPageViewUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ppvu.AddHeroContentIDs(ids...)
}

// AddPrimaryContentIDs adds the "primaryContent" edge to the PrimaryContent entity by IDs.
func (ppvu *ProductPageViewUpdate) AddPrimaryContentIDs(ids ...int) *ProductPageViewUpdate {
	ppvu.mutation.AddPrimaryContentIDs(ids...)
	return ppvu
}

// AddPrimaryContent adds the "primaryContent" edges to the PrimaryContent entity.
func (ppvu *ProductPageViewUpdate) AddPrimaryContent(p ...*PrimaryContent) *ProductPageViewUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppvu.AddPrimaryContentIDs(ids...)
}

// AddViewAnalyticIDs adds the "viewAnalytics" edge to the ViewAnalytics entity by IDs.
func (ppvu *ProductPageViewUpdate) AddViewAnalyticIDs(ids ...int) *ProductPageViewUpdate {
	ppvu.mutation.AddViewAnalyticIDs(ids...)
	return ppvu
}

// AddViewAnalytics adds the "viewAnalytics" edges to the ViewAnalytics entity.
func (ppvu *ProductPageViewUpdate) AddViewAnalytics(v ...*ViewAnalytics) *ProductPageViewUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ppvu.AddViewAnalyticIDs(ids...)
}

// Mutation returns the ProductPageViewMutation object of the builder.
func (ppvu *ProductPageViewUpdate) Mutation() *ProductPageViewMutation {
	return ppvu.mutation
}

// ClearHeroContent clears all "heroContent" edges to the HeroContent entity.
func (ppvu *ProductPageViewUpdate) ClearHeroContent() *ProductPageViewUpdate {
	ppvu.mutation.ClearHeroContent()
	return ppvu
}

// RemoveHeroContentIDs removes the "heroContent" edge to HeroContent entities by IDs.
func (ppvu *ProductPageViewUpdate) RemoveHeroContentIDs(ids ...int) *ProductPageViewUpdate {
	ppvu.mutation.RemoveHeroContentIDs(ids...)
	return ppvu
}

// RemoveHeroContent removes "heroContent" edges to HeroContent entities.
func (ppvu *ProductPageViewUpdate) RemoveHeroContent(h ...*HeroContent) *ProductPageViewUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ppvu.RemoveHeroContentIDs(ids...)
}

// ClearPrimaryContent clears all "primaryContent" edges to the PrimaryContent entity.
func (ppvu *ProductPageViewUpdate) ClearPrimaryContent() *ProductPageViewUpdate {
	ppvu.mutation.ClearPrimaryContent()
	return ppvu
}

// RemovePrimaryContentIDs removes the "primaryContent" edge to PrimaryContent entities by IDs.
func (ppvu *ProductPageViewUpdate) RemovePrimaryContentIDs(ids ...int) *ProductPageViewUpdate {
	ppvu.mutation.RemovePrimaryContentIDs(ids...)
	return ppvu
}

// RemovePrimaryContent removes "primaryContent" edges to PrimaryContent entities.
func (ppvu *ProductPageViewUpdate) RemovePrimaryContent(p ...*PrimaryContent) *ProductPageViewUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppvu.RemovePrimaryContentIDs(ids...)
}

// ClearViewAnalytics clears all "viewAnalytics" edges to the ViewAnalytics entity.
func (ppvu *ProductPageViewUpdate) ClearViewAnalytics() *ProductPageViewUpdate {
	ppvu.mutation.ClearViewAnalytics()
	return ppvu
}

// RemoveViewAnalyticIDs removes the "viewAnalytics" edge to ViewAnalytics entities by IDs.
func (ppvu *ProductPageViewUpdate) RemoveViewAnalyticIDs(ids ...int) *ProductPageViewUpdate {
	ppvu.mutation.RemoveViewAnalyticIDs(ids...)
	return ppvu
}

// RemoveViewAnalytics removes "viewAnalytics" edges to ViewAnalytics entities.
func (ppvu *ProductPageViewUpdate) RemoveViewAnalytics(v ...*ViewAnalytics) *ProductPageViewUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ppvu.RemoveViewAnalyticIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppvu *ProductPageViewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProductPageViewMutation](ctx, ppvu.sqlSave, ppvu.mutation, ppvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppvu *ProductPageViewUpdate) SaveX(ctx context.Context) int {
	affected, err := ppvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppvu *ProductPageViewUpdate) Exec(ctx context.Context) error {
	_, err := ppvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvu *ProductPageViewUpdate) ExecX(ctx context.Context) {
	if err := ppvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppvu *ProductPageViewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productpageview.Table, productpageview.Columns, sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt))
	if ps := ppvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppvu.mutation.Version(); ok {
		_spec.SetField(productpageview.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ppvu.mutation.AddedVersion(); ok {
		_spec.AddField(productpageview.FieldVersion, field.TypeInt, value)
	}
	if ppvu.mutation.HeroContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvu.mutation.RemovedHeroContentIDs(); len(nodes) > 0 && !ppvu.mutation.HeroContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvu.mutation.HeroContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppvu.mutation.PrimaryContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvu.mutation.RemovedPrimaryContentIDs(); len(nodes) > 0 && !ppvu.mutation.PrimaryContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvu.mutation.PrimaryContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppvu.mutation.ViewAnalyticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvu.mutation.RemovedViewAnalyticsIDs(); len(nodes) > 0 && !ppvu.mutation.ViewAnalyticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvu.mutation.ViewAnalyticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpageview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppvu.mutation.done = true
	return n, nil
}

// ProductPageViewUpdateOne is the builder for updating a single ProductPageView entity.
type ProductPageViewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPageViewMutation
}

// SetVersion sets the "version" field.
func (ppvuo *ProductPageViewUpdateOne) SetVersion(i int) *ProductPageViewUpdateOne {
	ppvuo.mutation.ResetVersion()
	ppvuo.mutation.SetVersion(i)
	return ppvuo
}

// AddVersion adds i to the "version" field.
func (ppvuo *ProductPageViewUpdateOne) AddVersion(i int) *ProductPageViewUpdateOne {
	ppvuo.mutation.AddVersion(i)
	return ppvuo
}

// AddHeroContentIDs adds the "heroContent" edge to the HeroContent entity by IDs.
func (ppvuo *ProductPageViewUpdateOne) AddHeroContentIDs(ids ...int) *ProductPageViewUpdateOne {
	ppvuo.mutation.AddHeroContentIDs(ids...)
	return ppvuo
}

// AddHeroContent adds the "heroContent" edges to the HeroContent entity.
func (ppvuo *ProductPageViewUpdateOne) AddHeroContent(h ...*HeroContent) *ProductPageViewUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ppvuo.AddHeroContentIDs(ids...)
}

// AddPrimaryContentIDs adds the "primaryContent" edge to the PrimaryContent entity by IDs.
func (ppvuo *ProductPageViewUpdateOne) AddPrimaryContentIDs(ids ...int) *ProductPageViewUpdateOne {
	ppvuo.mutation.AddPrimaryContentIDs(ids...)
	return ppvuo
}

// AddPrimaryContent adds the "primaryContent" edges to the PrimaryContent entity.
func (ppvuo *ProductPageViewUpdateOne) AddPrimaryContent(p ...*PrimaryContent) *ProductPageViewUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppvuo.AddPrimaryContentIDs(ids...)
}

// AddViewAnalyticIDs adds the "viewAnalytics" edge to the ViewAnalytics entity by IDs.
func (ppvuo *ProductPageViewUpdateOne) AddViewAnalyticIDs(ids ...int) *ProductPageViewUpdateOne {
	ppvuo.mutation.AddViewAnalyticIDs(ids...)
	return ppvuo
}

// AddViewAnalytics adds the "viewAnalytics" edges to the ViewAnalytics entity.
func (ppvuo *ProductPageViewUpdateOne) AddViewAnalytics(v ...*ViewAnalytics) *ProductPageViewUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ppvuo.AddViewAnalyticIDs(ids...)
}

// Mutation returns the ProductPageViewMutation object of the builder.
func (ppvuo *ProductPageViewUpdateOne) Mutation() *ProductPageViewMutation {
	return ppvuo.mutation
}

// ClearHeroContent clears all "heroContent" edges to the HeroContent entity.
func (ppvuo *ProductPageViewUpdateOne) ClearHeroContent() *ProductPageViewUpdateOne {
	ppvuo.mutation.ClearHeroContent()
	return ppvuo
}

// RemoveHeroContentIDs removes the "heroContent" edge to HeroContent entities by IDs.
func (ppvuo *ProductPageViewUpdateOne) RemoveHeroContentIDs(ids ...int) *ProductPageViewUpdateOne {
	ppvuo.mutation.RemoveHeroContentIDs(ids...)
	return ppvuo
}

// RemoveHeroContent removes "heroContent" edges to HeroContent entities.
func (ppvuo *ProductPageViewUpdateOne) RemoveHeroContent(h ...*HeroContent) *ProductPageViewUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ppvuo.RemoveHeroContentIDs(ids...)
}

// ClearPrimaryContent clears all "primaryContent" edges to the PrimaryContent entity.
func (ppvuo *ProductPageViewUpdateOne) ClearPrimaryContent() *ProductPageViewUpdateOne {
	ppvuo.mutation.ClearPrimaryContent()
	return ppvuo
}

// RemovePrimaryContentIDs removes the "primaryContent" edge to PrimaryContent entities by IDs.
func (ppvuo *ProductPageViewUpdateOne) RemovePrimaryContentIDs(ids ...int) *ProductPageViewUpdateOne {
	ppvuo.mutation.RemovePrimaryContentIDs(ids...)
	return ppvuo
}

// RemovePrimaryContent removes "primaryContent" edges to PrimaryContent entities.
func (ppvuo *ProductPageViewUpdateOne) RemovePrimaryContent(p ...*PrimaryContent) *ProductPageViewUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppvuo.RemovePrimaryContentIDs(ids...)
}

// ClearViewAnalytics clears all "viewAnalytics" edges to the ViewAnalytics entity.
func (ppvuo *ProductPageViewUpdateOne) ClearViewAnalytics() *ProductPageViewUpdateOne {
	ppvuo.mutation.ClearViewAnalytics()
	return ppvuo
}

// RemoveViewAnalyticIDs removes the "viewAnalytics" edge to ViewAnalytics entities by IDs.
func (ppvuo *ProductPageViewUpdateOne) RemoveViewAnalyticIDs(ids ...int) *ProductPageViewUpdateOne {
	ppvuo.mutation.RemoveViewAnalyticIDs(ids...)
	return ppvuo
}

// RemoveViewAnalytics removes "viewAnalytics" edges to ViewAnalytics entities.
func (ppvuo *ProductPageViewUpdateOne) RemoveViewAnalytics(v ...*ViewAnalytics) *ProductPageViewUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ppvuo.RemoveViewAnalyticIDs(ids...)
}

// Where appends a list predicates to the ProductPageViewUpdate builder.
func (ppvuo *ProductPageViewUpdateOne) Where(ps ...predicate.ProductPageView) *ProductPageViewUpdateOne {
	ppvuo.mutation.Where(ps...)
	return ppvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppvuo *ProductPageViewUpdateOne) Select(field string, fields ...string) *ProductPageViewUpdateOne {
	ppvuo.fields = append([]string{field}, fields...)
	return ppvuo
}

// Save executes the query and returns the updated ProductPageView entity.
func (ppvuo *ProductPageViewUpdateOne) Save(ctx context.Context) (*ProductPageView, error) {
	return withHooks[*ProductPageView, ProductPageViewMutation](ctx, ppvuo.sqlSave, ppvuo.mutation, ppvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppvuo *ProductPageViewUpdateOne) SaveX(ctx context.Context) *ProductPageView {
	node, err := ppvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppvuo *ProductPageViewUpdateOne) Exec(ctx context.Context) error {
	_, err := ppvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvuo *ProductPageViewUpdateOne) ExecX(ctx context.Context) {
	if err := ppvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppvuo *ProductPageViewUpdateOne) sqlSave(ctx context.Context) (_node *ProductPageView, err error) {
	_spec := sqlgraph.NewUpdateSpec(productpageview.Table, productpageview.Columns, sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt))
	id, ok := ppvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductPageView.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpageview.FieldID)
		for _, f := range fields {
			if !productpageview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productpageview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppvuo.mutation.Version(); ok {
		_spec.SetField(productpageview.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ppvuo.mutation.AddedVersion(); ok {
		_spec.AddField(productpageview.FieldVersion, field.TypeInt, value)
	}
	if ppvuo.mutation.HeroContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvuo.mutation.RemovedHeroContentIDs(); len(nodes) > 0 && !ppvuo.mutation.HeroContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvuo.mutation.HeroContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppvuo.mutation.PrimaryContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvuo.mutation.RemovedPrimaryContentIDs(); len(nodes) > 0 && !ppvuo.mutation.PrimaryContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvuo.mutation.PrimaryContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppvuo.mutation.ViewAnalyticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvuo.mutation.RemovedViewAnalyticsIDs(); len(nodes) > 0 && !ppvuo.mutation.ViewAnalyticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppvuo.mutation.ViewAnalyticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductPageView{config: ppvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpageview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppvuo.mutation.done = true
	return _node, nil
}
