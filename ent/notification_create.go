// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/notification"
	"entdemo/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationCreate is the builder for creating a Notification entity.
type NotificationCreate struct {
	config
	mutation *NotificationMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (nc *NotificationCreate) SetTitle(s string) *NotificationCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetContent sets the "content" field.
func (nc *NotificationCreate) SetContent(s string) *NotificationCreate {
	nc.mutation.SetContent(s)
	return nc
}

// SetDateCreated sets the "dateCreated" field.
func (nc *NotificationCreate) SetDateCreated(s string) *NotificationCreate {
	nc.mutation.SetDateCreated(s)
	return nc
}

// SetNillableDateCreated sets the "dateCreated" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableDateCreated(s *string) *NotificationCreate {
	if s != nil {
		nc.SetDateCreated(*s)
	}
	return nc
}

// SetDateUpdated sets the "dateUpdated" field.
func (nc *NotificationCreate) SetDateUpdated(s string) *NotificationCreate {
	nc.mutation.SetDateUpdated(s)
	return nc
}

// SetNillableDateUpdated sets the "dateUpdated" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableDateUpdated(s *string) *NotificationCreate {
	if s != nil {
		nc.SetDateUpdated(*s)
	}
	return nc
}

// SetRead sets the "read" field.
func (nc *NotificationCreate) SetRead(b bool) *NotificationCreate {
	nc.mutation.SetRead(b)
	return nc
}

// AddRecipientIDs adds the "recipient" edge to the User entity by IDs.
func (nc *NotificationCreate) AddRecipientIDs(ids ...int) *NotificationCreate {
	nc.mutation.AddRecipientIDs(ids...)
	return nc
}

// AddRecipient adds the "recipient" edges to the User entity.
func (nc *NotificationCreate) AddRecipient(u ...*User) *NotificationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nc.AddRecipientIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nc *NotificationCreate) Mutation() *NotificationMutation {
	return nc.mutation
}

// Save creates the Notification in the database.
func (nc *NotificationCreate) Save(ctx context.Context) (*Notification, error) {
	nc.defaults()
	return withHooks[*Notification, NotificationMutation](ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotificationCreate) SaveX(ctx context.Context) *Notification {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NotificationCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NotificationCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NotificationCreate) defaults() {
	if _, ok := nc.mutation.DateCreated(); !ok {
		v := notification.DefaultDateCreated
		nc.mutation.SetDateCreated(v)
	}
	if _, ok := nc.mutation.DateUpdated(); !ok {
		v := notification.DefaultDateUpdated
		nc.mutation.SetDateUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotificationCreate) check() error {
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Notification.title"`)}
	}
	if _, ok := nc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Notification.content"`)}
	}
	if _, ok := nc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "Notification.dateCreated"`)}
	}
	if _, ok := nc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "Notification.dateUpdated"`)}
	}
	if _, ok := nc.mutation.Read(); !ok {
		return &ValidationError{Name: "read", err: errors.New(`ent: missing required field "Notification.read"`)}
	}
	return nil
}

func (nc *NotificationCreate) sqlSave(ctx context.Context) (*Notification, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NotificationCreate) createSpec() (*Notification, *sqlgraph.CreateSpec) {
	var (
		_node = &Notification{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(notification.Table, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := nc.mutation.Content(); ok {
		_spec.SetField(notification.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := nc.mutation.DateCreated(); ok {
		_spec.SetField(notification.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := nc.mutation.DateUpdated(); ok {
		_spec.SetField(notification.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if value, ok := nc.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
		_node.Read = value
	}
	if nodes := nc.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationCreateBulk is the builder for creating many Notification entities in bulk.
type NotificationCreateBulk struct {
	config
	builders []*NotificationCreate
}

// Save creates the Notification entities in the database.
func (ncb *NotificationCreateBulk) Save(ctx context.Context) ([]*Notification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notification, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NotificationCreateBulk) SaveX(ctx context.Context) []*Notification {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NotificationCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
