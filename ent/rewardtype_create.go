// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/rewardtype"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RewardTypeCreate is the builder for creating a RewardType entity.
type RewardTypeCreate struct {
	config
	mutation *RewardTypeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (rtc *RewardTypeCreate) SetType(r rewardtype.Type) *RewardTypeCreate {
	rtc.mutation.SetType(r)
	return rtc
}

// SetVal sets the "val" field.
func (rtc *RewardTypeCreate) SetVal(i int) *RewardTypeCreate {
	rtc.mutation.SetVal(i)
	return rtc
}

// Mutation returns the RewardTypeMutation object of the builder.
func (rtc *RewardTypeCreate) Mutation() *RewardTypeMutation {
	return rtc.mutation
}

// Save creates the RewardType in the database.
func (rtc *RewardTypeCreate) Save(ctx context.Context) (*RewardType, error) {
	return withHooks[*RewardType, RewardTypeMutation](ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RewardTypeCreate) SaveX(ctx context.Context) *RewardType {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RewardTypeCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RewardTypeCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RewardTypeCreate) check() error {
	if _, ok := rtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "RewardType.type"`)}
	}
	if v, ok := rtc.mutation.GetType(); ok {
		if err := rewardtype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RewardType.type": %w`, err)}
		}
	}
	if _, ok := rtc.mutation.Val(); !ok {
		return &ValidationError{Name: "val", err: errors.New(`ent: missing required field "RewardType.val"`)}
	}
	return nil
}

func (rtc *RewardTypeCreate) sqlSave(ctx context.Context) (*RewardType, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *RewardTypeCreate) createSpec() (*RewardType, *sqlgraph.CreateSpec) {
	var (
		_node = &RewardType{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(rewardtype.Table, sqlgraph.NewFieldSpec(rewardtype.FieldID, field.TypeInt))
	)
	if value, ok := rtc.mutation.GetType(); ok {
		_spec.SetField(rewardtype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rtc.mutation.Val(); ok {
		_spec.SetField(rewardtype.FieldVal, field.TypeInt, value)
		_node.Val = value
	}
	return _node, _spec
}

// RewardTypeCreateBulk is the builder for creating many RewardType entities in bulk.
type RewardTypeCreateBulk struct {
	config
	builders []*RewardTypeCreate
}

// Save creates the RewardType entities in the database.
func (rtcb *RewardTypeCreateBulk) Save(ctx context.Context) ([]*RewardType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RewardType, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RewardTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RewardTypeCreateBulk) SaveX(ctx context.Context) []*RewardType {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RewardTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RewardTypeCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
