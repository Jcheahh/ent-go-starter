// Code generated by ent, DO NOT EDIT.

package refundtransactions

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the refundtransactions type in the database.
	Label = "refund_transactions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRefundAmount holds the string denoting the refundamount field in the database.
	FieldRefundAmount = "refund_amount"
	// FieldRefundCurrency holds the string denoting the refundcurrency field in the database.
	FieldRefundCurrency = "refund_currency"
	// FieldRefundReason holds the string denoting the refundreason field in the database.
	FieldRefundReason = "refund_reason"
	// FieldRefundStatus holds the string denoting the refundstatus field in the database.
	FieldRefundStatus = "refund_status"
	// FieldDateCreated holds the string denoting the datecreated field in the database.
	FieldDateCreated = "date_created"
	// FieldDateUpdated holds the string denoting the dateupdated field in the database.
	FieldDateUpdated = "date_updated"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// Table holds the table name of the refundtransactions in the database.
	Table = "refund_transactions"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "transactions"
	// TransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionInverseTable = "transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "refund_transactions_transaction"
)

// Columns holds all SQL columns for refundtransactions fields.
var Columns = []string{
	FieldID,
	FieldRefundAmount,
	FieldRefundCurrency,
	FieldRefundReason,
	FieldRefundStatus,
	FieldDateCreated,
	FieldDateUpdated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RefundTransactions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRefundAmount orders the results by the refundAmount field.
func ByRefundAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundAmount, opts...).ToFunc()
}

// ByRefundCurrency orders the results by the refundCurrency field.
func ByRefundCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundCurrency, opts...).ToFunc()
}

// ByRefundReason orders the results by the refundReason field.
func ByRefundReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundReason, opts...).ToFunc()
}

// ByRefundStatus orders the results by the refundStatus field.
func ByRefundStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundStatus, opts...).ToFunc()
}

// ByDateCreated orders the results by the dateCreated field.
func ByDateCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateCreated, opts...).ToFunc()
}

// ByDateUpdated orders the results by the dateUpdated field.
func ByDateUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateUpdated, opts...).ToFunc()
}

// ByTransactionCount orders the results by transaction count.
func ByTransactionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionStep(), opts...)
	}
}

// ByTransaction orders the results by transaction terms.
func ByTransaction(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionTable, TransactionColumn),
	)
}
