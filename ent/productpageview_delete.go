// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/productpageview"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPageViewDelete is the builder for deleting a ProductPageView entity.
type ProductPageViewDelete struct {
	config
	hooks    []Hook
	mutation *ProductPageViewMutation
}

// Where appends a list predicates to the ProductPageViewDelete builder.
func (ppvd *ProductPageViewDelete) Where(ps ...predicate.ProductPageView) *ProductPageViewDelete {
	ppvd.mutation.Where(ps...)
	return ppvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ppvd *ProductPageViewDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ProductPageViewMutation](ctx, ppvd.sqlExec, ppvd.mutation, ppvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvd *ProductPageViewDelete) ExecX(ctx context.Context) int {
	n, err := ppvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ppvd *ProductPageViewDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(productpageview.Table, sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt))
	if ps := ppvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ppvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ppvd.mutation.done = true
	return affected, err
}

// ProductPageViewDeleteOne is the builder for deleting a single ProductPageView entity.
type ProductPageViewDeleteOne struct {
	ppvd *ProductPageViewDelete
}

// Where appends a list predicates to the ProductPageViewDelete builder.
func (ppvdo *ProductPageViewDeleteOne) Where(ps ...predicate.ProductPageView) *ProductPageViewDeleteOne {
	ppvdo.ppvd.mutation.Where(ps...)
	return ppvdo
}

// Exec executes the deletion query.
func (ppvdo *ProductPageViewDeleteOne) Exec(ctx context.Context) error {
	n, err := ppvdo.ppvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{productpageview.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvdo *ProductPageViewDeleteOne) ExecX(ctx context.Context) {
	if err := ppvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
