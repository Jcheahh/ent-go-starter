// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/review"
	"entdemo/ent/userbuyer"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReviewUpdate is the builder for updating Review entities.
type ReviewUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewMutation
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ru *ReviewUpdate) Where(ps ...predicate.Review) *ReviewUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetType sets the "type" field.
func (ru *ReviewUpdate) SetType(s string) *ReviewUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetContent sets the "content" field.
func (ru *ReviewUpdate) SetContent(s string) *ReviewUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetRating sets the "rating" field.
func (ru *ReviewUpdate) SetRating(s string) *ReviewUpdate {
	ru.mutation.SetRating(s)
	return ru
}

// SetDateCreated sets the "dateCreated" field.
func (ru *ReviewUpdate) SetDateCreated(s string) *ReviewUpdate {
	ru.mutation.SetDateCreated(s)
	return ru
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (ru *ReviewUpdate) AddProductIDs(ids ...int) *ReviewUpdate {
	ru.mutation.AddProductIDs(ids...)
	return ru
}

// AddProduct adds the "product" edges to the Product entity.
func (ru *ReviewUpdate) AddProduct(p ...*Product) *ReviewUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProductIDs(ids...)
}

// AddProductCustomerIDs adds the "productCustomer" edge to the UserBuyer entity by IDs.
func (ru *ReviewUpdate) AddProductCustomerIDs(ids ...int) *ReviewUpdate {
	ru.mutation.AddProductCustomerIDs(ids...)
	return ru
}

// AddProductCustomer adds the "productCustomer" edges to the UserBuyer entity.
func (ru *ReviewUpdate) AddProductCustomer(u ...*UserBuyer) *ReviewUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddProductCustomerIDs(ids...)
}

// Mutation returns the ReviewMutation object of the builder.
func (ru *ReviewUpdate) Mutation() *ReviewMutation {
	return ru.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (ru *ReviewUpdate) ClearProduct() *ReviewUpdate {
	ru.mutation.ClearProduct()
	return ru
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (ru *ReviewUpdate) RemoveProductIDs(ids ...int) *ReviewUpdate {
	ru.mutation.RemoveProductIDs(ids...)
	return ru
}

// RemoveProduct removes "product" edges to Product entities.
func (ru *ReviewUpdate) RemoveProduct(p ...*Product) *ReviewUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProductIDs(ids...)
}

// ClearProductCustomer clears all "productCustomer" edges to the UserBuyer entity.
func (ru *ReviewUpdate) ClearProductCustomer() *ReviewUpdate {
	ru.mutation.ClearProductCustomer()
	return ru
}

// RemoveProductCustomerIDs removes the "productCustomer" edge to UserBuyer entities by IDs.
func (ru *ReviewUpdate) RemoveProductCustomerIDs(ids ...int) *ReviewUpdate {
	ru.mutation.RemoveProductCustomerIDs(ids...)
	return ru
}

// RemoveProductCustomer removes "productCustomer" edges to UserBuyer entities.
func (ru *ReviewUpdate) RemoveProductCustomer(u ...*UserBuyer) *ReviewUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveProductCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReviewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReviewMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReviewUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReviewUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(review.Table, review.Columns, sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(review.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.SetField(review.FieldContent, field.TypeString, value)
	}
	if value, ok := ru.mutation.Rating(); ok {
		_spec.SetField(review.FieldRating, field.TypeString, value)
	}
	if value, ok := ru.mutation.DateCreated(); ok {
		_spec.SetField(review.FieldDateCreated, field.TypeString, value)
	}
	if ru.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductTable,
			Columns: []string{review.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProductIDs(); len(nodes) > 0 && !ru.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductTable,
			Columns: []string{review.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductTable,
			Columns: []string{review.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductCustomerTable,
			Columns: []string{review.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProductCustomerIDs(); len(nodes) > 0 && !ru.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductCustomerTable,
			Columns: []string{review.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProductCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductCustomerTable,
			Columns: []string{review.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReviewUpdateOne is the builder for updating a single Review entity.
type ReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewMutation
}

// SetType sets the "type" field.
func (ruo *ReviewUpdateOne) SetType(s string) *ReviewUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetContent sets the "content" field.
func (ruo *ReviewUpdateOne) SetContent(s string) *ReviewUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetRating sets the "rating" field.
func (ruo *ReviewUpdateOne) SetRating(s string) *ReviewUpdateOne {
	ruo.mutation.SetRating(s)
	return ruo
}

// SetDateCreated sets the "dateCreated" field.
func (ruo *ReviewUpdateOne) SetDateCreated(s string) *ReviewUpdateOne {
	ruo.mutation.SetDateCreated(s)
	return ruo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (ruo *ReviewUpdateOne) AddProductIDs(ids ...int) *ReviewUpdateOne {
	ruo.mutation.AddProductIDs(ids...)
	return ruo
}

// AddProduct adds the "product" edges to the Product entity.
func (ruo *ReviewUpdateOne) AddProduct(p ...*Product) *ReviewUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProductIDs(ids...)
}

// AddProductCustomerIDs adds the "productCustomer" edge to the UserBuyer entity by IDs.
func (ruo *ReviewUpdateOne) AddProductCustomerIDs(ids ...int) *ReviewUpdateOne {
	ruo.mutation.AddProductCustomerIDs(ids...)
	return ruo
}

// AddProductCustomer adds the "productCustomer" edges to the UserBuyer entity.
func (ruo *ReviewUpdateOne) AddProductCustomer(u ...*UserBuyer) *ReviewUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddProductCustomerIDs(ids...)
}

// Mutation returns the ReviewMutation object of the builder.
func (ruo *ReviewUpdateOne) Mutation() *ReviewMutation {
	return ruo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (ruo *ReviewUpdateOne) ClearProduct() *ReviewUpdateOne {
	ruo.mutation.ClearProduct()
	return ruo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (ruo *ReviewUpdateOne) RemoveProductIDs(ids ...int) *ReviewUpdateOne {
	ruo.mutation.RemoveProductIDs(ids...)
	return ruo
}

// RemoveProduct removes "product" edges to Product entities.
func (ruo *ReviewUpdateOne) RemoveProduct(p ...*Product) *ReviewUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProductIDs(ids...)
}

// ClearProductCustomer clears all "productCustomer" edges to the UserBuyer entity.
func (ruo *ReviewUpdateOne) ClearProductCustomer() *ReviewUpdateOne {
	ruo.mutation.ClearProductCustomer()
	return ruo
}

// RemoveProductCustomerIDs removes the "productCustomer" edge to UserBuyer entities by IDs.
func (ruo *ReviewUpdateOne) RemoveProductCustomerIDs(ids ...int) *ReviewUpdateOne {
	ruo.mutation.RemoveProductCustomerIDs(ids...)
	return ruo
}

// RemoveProductCustomer removes "productCustomer" edges to UserBuyer entities.
func (ruo *ReviewUpdateOne) RemoveProductCustomer(u ...*UserBuyer) *ReviewUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveProductCustomerIDs(ids...)
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ruo *ReviewUpdateOne) Where(ps ...predicate.Review) *ReviewUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReviewUpdateOne) Select(field string, fields ...string) *ReviewUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Review entity.
func (ruo *ReviewUpdateOne) Save(ctx context.Context) (*Review, error) {
	return withHooks[*Review, ReviewMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReviewUpdateOne) SaveX(ctx context.Context) *Review {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReviewUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReviewUpdateOne) sqlSave(ctx context.Context) (_node *Review, err error) {
	_spec := sqlgraph.NewUpdateSpec(review.Table, review.Columns, sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Review.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, review.FieldID)
		for _, f := range fields {
			if !review.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != review.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(review.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.SetField(review.FieldContent, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Rating(); ok {
		_spec.SetField(review.FieldRating, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DateCreated(); ok {
		_spec.SetField(review.FieldDateCreated, field.TypeString, value)
	}
	if ruo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductTable,
			Columns: []string{review.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProductIDs(); len(nodes) > 0 && !ruo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductTable,
			Columns: []string{review.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductTable,
			Columns: []string{review.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductCustomerTable,
			Columns: []string{review.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProductCustomerIDs(); len(nodes) > 0 && !ruo.mutation.ProductCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductCustomerTable,
			Columns: []string{review.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProductCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ProductCustomerTable,
			Columns: []string{review.ProductCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbuyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Review{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
