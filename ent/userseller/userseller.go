// Code generated by ent, DO NOT EDIT.

package userseller

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userseller type in the database.
	Label = "user_seller"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBrandName holds the string denoting the brandname field in the database.
	FieldBrandName = "brand_name"
	// EdgeUserProfile holds the string denoting the userprofile edge name in mutations.
	EdgeUserProfile = "userProfile"
	// EdgeShops holds the string denoting the shops edge name in mutations.
	EdgeShops = "shops"
	// Table holds the table name of the userseller in the database.
	Table = "user_sellers"
	// UserProfileTable is the table that holds the userProfile relation/edge.
	UserProfileTable = "users"
	// UserProfileInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserProfileInverseTable = "users"
	// UserProfileColumn is the table column denoting the userProfile relation/edge.
	UserProfileColumn = "user_seller_user_profile"
	// ShopsTable is the table that holds the shops relation/edge.
	ShopsTable = "shops"
	// ShopsInverseTable is the table name for the Shop entity.
	// It exists in this package in order to avoid circular dependency with the "shop" package.
	ShopsInverseTable = "shops"
	// ShopsColumn is the table column denoting the shops relation/edge.
	ShopsColumn = "user_seller_shops"
)

// Columns holds all SQL columns for userseller fields.
var Columns = []string{
	FieldID,
	FieldBrandName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_sellers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"blog_post_author",
	"commission_structure_product_seller",
	"product_product_seller",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the UserSeller queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBrandName orders the results by the brandName field.
func ByBrandName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldBrandName, opts...).ToFunc()
}

// ByUserProfileCount orders the results by userProfile count.
func ByUserProfileCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserProfileStep(), opts...)
	}
}

// ByUserProfile orders the results by userProfile terms.
func ByUserProfile(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserProfileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShopsCount orders the results by shops count.
func ByShopsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShopsStep(), opts...)
	}
}

// ByShops orders the results by shops terms.
func ByShops(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShopsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserProfileTable, UserProfileColumn),
	)
}
func newShopsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShopsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShopsTable, ShopsColumn),
	)
}
