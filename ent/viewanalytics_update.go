// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/viewanalytics"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ViewAnalyticsUpdate is the builder for updating ViewAnalytics entities.
type ViewAnalyticsUpdate struct {
	config
	hooks    []Hook
	mutation *ViewAnalyticsMutation
}

// Where appends a list predicates to the ViewAnalyticsUpdate builder.
func (vau *ViewAnalyticsUpdate) Where(ps ...predicate.ViewAnalytics) *ViewAnalyticsUpdate {
	vau.mutation.Where(ps...)
	return vau
}

// SetViews sets the "views" field.
func (vau *ViewAnalyticsUpdate) SetViews(i int) *ViewAnalyticsUpdate {
	vau.mutation.ResetViews()
	vau.mutation.SetViews(i)
	return vau
}

// AddViews adds i to the "views" field.
func (vau *ViewAnalyticsUpdate) AddViews(i int) *ViewAnalyticsUpdate {
	vau.mutation.AddViews(i)
	return vau
}

// SetScrolls sets the "scrolls" field.
func (vau *ViewAnalyticsUpdate) SetScrolls(i int) *ViewAnalyticsUpdate {
	vau.mutation.ResetScrolls()
	vau.mutation.SetScrolls(i)
	return vau
}

// AddScrolls adds i to the "scrolls" field.
func (vau *ViewAnalyticsUpdate) AddScrolls(i int) *ViewAnalyticsUpdate {
	vau.mutation.AddScrolls(i)
	return vau
}

// SetExits sets the "exits" field.
func (vau *ViewAnalyticsUpdate) SetExits(i int) *ViewAnalyticsUpdate {
	vau.mutation.ResetExits()
	vau.mutation.SetExits(i)
	return vau
}

// AddExits adds i to the "exits" field.
func (vau *ViewAnalyticsUpdate) AddExits(i int) *ViewAnalyticsUpdate {
	vau.mutation.AddExits(i)
	return vau
}

// SetDateCreated sets the "dateCreated" field.
func (vau *ViewAnalyticsUpdate) SetDateCreated(s string) *ViewAnalyticsUpdate {
	vau.mutation.SetDateCreated(s)
	return vau
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (vau *ViewAnalyticsUpdate) AddProductIDs(ids ...int) *ViewAnalyticsUpdate {
	vau.mutation.AddProductIDs(ids...)
	return vau
}

// AddProduct adds the "product" edges to the Product entity.
func (vau *ViewAnalyticsUpdate) AddProduct(p ...*Product) *ViewAnalyticsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vau.AddProductIDs(ids...)
}

// Mutation returns the ViewAnalyticsMutation object of the builder.
func (vau *ViewAnalyticsUpdate) Mutation() *ViewAnalyticsMutation {
	return vau.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (vau *ViewAnalyticsUpdate) ClearProduct() *ViewAnalyticsUpdate {
	vau.mutation.ClearProduct()
	return vau
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (vau *ViewAnalyticsUpdate) RemoveProductIDs(ids ...int) *ViewAnalyticsUpdate {
	vau.mutation.RemoveProductIDs(ids...)
	return vau
}

// RemoveProduct removes "product" edges to Product entities.
func (vau *ViewAnalyticsUpdate) RemoveProduct(p ...*Product) *ViewAnalyticsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vau.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vau *ViewAnalyticsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ViewAnalyticsMutation](ctx, vau.sqlSave, vau.mutation, vau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vau *ViewAnalyticsUpdate) SaveX(ctx context.Context) int {
	affected, err := vau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vau *ViewAnalyticsUpdate) Exec(ctx context.Context) error {
	_, err := vau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vau *ViewAnalyticsUpdate) ExecX(ctx context.Context) {
	if err := vau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vau *ViewAnalyticsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(viewanalytics.Table, viewanalytics.Columns, sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt))
	if ps := vau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vau.mutation.Views(); ok {
		_spec.SetField(viewanalytics.FieldViews, field.TypeInt, value)
	}
	if value, ok := vau.mutation.AddedViews(); ok {
		_spec.AddField(viewanalytics.FieldViews, field.TypeInt, value)
	}
	if value, ok := vau.mutation.Scrolls(); ok {
		_spec.SetField(viewanalytics.FieldScrolls, field.TypeInt, value)
	}
	if value, ok := vau.mutation.AddedScrolls(); ok {
		_spec.AddField(viewanalytics.FieldScrolls, field.TypeInt, value)
	}
	if value, ok := vau.mutation.Exits(); ok {
		_spec.SetField(viewanalytics.FieldExits, field.TypeInt, value)
	}
	if value, ok := vau.mutation.AddedExits(); ok {
		_spec.AddField(viewanalytics.FieldExits, field.TypeInt, value)
	}
	if value, ok := vau.mutation.DateCreated(); ok {
		_spec.SetField(viewanalytics.FieldDateCreated, field.TypeString, value)
	}
	if vau.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewanalytics.ProductTable,
			Columns: []string{viewanalytics.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vau.mutation.RemovedProductIDs(); len(nodes) > 0 && !vau.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewanalytics.ProductTable,
			Columns: []string{viewanalytics.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vau.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewanalytics.ProductTable,
			Columns: []string{viewanalytics.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewanalytics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vau.mutation.done = true
	return n, nil
}

// ViewAnalyticsUpdateOne is the builder for updating a single ViewAnalytics entity.
type ViewAnalyticsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ViewAnalyticsMutation
}

// SetViews sets the "views" field.
func (vauo *ViewAnalyticsUpdateOne) SetViews(i int) *ViewAnalyticsUpdateOne {
	vauo.mutation.ResetViews()
	vauo.mutation.SetViews(i)
	return vauo
}

// AddViews adds i to the "views" field.
func (vauo *ViewAnalyticsUpdateOne) AddViews(i int) *ViewAnalyticsUpdateOne {
	vauo.mutation.AddViews(i)
	return vauo
}

// SetScrolls sets the "scrolls" field.
func (vauo *ViewAnalyticsUpdateOne) SetScrolls(i int) *ViewAnalyticsUpdateOne {
	vauo.mutation.ResetScrolls()
	vauo.mutation.SetScrolls(i)
	return vauo
}

// AddScrolls adds i to the "scrolls" field.
func (vauo *ViewAnalyticsUpdateOne) AddScrolls(i int) *ViewAnalyticsUpdateOne {
	vauo.mutation.AddScrolls(i)
	return vauo
}

// SetExits sets the "exits" field.
func (vauo *ViewAnalyticsUpdateOne) SetExits(i int) *ViewAnalyticsUpdateOne {
	vauo.mutation.ResetExits()
	vauo.mutation.SetExits(i)
	return vauo
}

// AddExits adds i to the "exits" field.
func (vauo *ViewAnalyticsUpdateOne) AddExits(i int) *ViewAnalyticsUpdateOne {
	vauo.mutation.AddExits(i)
	return vauo
}

// SetDateCreated sets the "dateCreated" field.
func (vauo *ViewAnalyticsUpdateOne) SetDateCreated(s string) *ViewAnalyticsUpdateOne {
	vauo.mutation.SetDateCreated(s)
	return vauo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (vauo *ViewAnalyticsUpdateOne) AddProductIDs(ids ...int) *ViewAnalyticsUpdateOne {
	vauo.mutation.AddProductIDs(ids...)
	return vauo
}

// AddProduct adds the "product" edges to the Product entity.
func (vauo *ViewAnalyticsUpdateOne) AddProduct(p ...*Product) *ViewAnalyticsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vauo.AddProductIDs(ids...)
}

// Mutation returns the ViewAnalyticsMutation object of the builder.
func (vauo *ViewAnalyticsUpdateOne) Mutation() *ViewAnalyticsMutation {
	return vauo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (vauo *ViewAnalyticsUpdateOne) ClearProduct() *ViewAnalyticsUpdateOne {
	vauo.mutation.ClearProduct()
	return vauo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (vauo *ViewAnalyticsUpdateOne) RemoveProductIDs(ids ...int) *ViewAnalyticsUpdateOne {
	vauo.mutation.RemoveProductIDs(ids...)
	return vauo
}

// RemoveProduct removes "product" edges to Product entities.
func (vauo *ViewAnalyticsUpdateOne) RemoveProduct(p ...*Product) *ViewAnalyticsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vauo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the ViewAnalyticsUpdate builder.
func (vauo *ViewAnalyticsUpdateOne) Where(ps ...predicate.ViewAnalytics) *ViewAnalyticsUpdateOne {
	vauo.mutation.Where(ps...)
	return vauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vauo *ViewAnalyticsUpdateOne) Select(field string, fields ...string) *ViewAnalyticsUpdateOne {
	vauo.fields = append([]string{field}, fields...)
	return vauo
}

// Save executes the query and returns the updated ViewAnalytics entity.
func (vauo *ViewAnalyticsUpdateOne) Save(ctx context.Context) (*ViewAnalytics, error) {
	return withHooks[*ViewAnalytics, ViewAnalyticsMutation](ctx, vauo.sqlSave, vauo.mutation, vauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vauo *ViewAnalyticsUpdateOne) SaveX(ctx context.Context) *ViewAnalytics {
	node, err := vauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vauo *ViewAnalyticsUpdateOne) Exec(ctx context.Context) error {
	_, err := vauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vauo *ViewAnalyticsUpdateOne) ExecX(ctx context.Context) {
	if err := vauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vauo *ViewAnalyticsUpdateOne) sqlSave(ctx context.Context) (_node *ViewAnalytics, err error) {
	_spec := sqlgraph.NewUpdateSpec(viewanalytics.Table, viewanalytics.Columns, sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt))
	id, ok := vauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ViewAnalytics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, viewanalytics.FieldID)
		for _, f := range fields {
			if !viewanalytics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != viewanalytics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vauo.mutation.Views(); ok {
		_spec.SetField(viewanalytics.FieldViews, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.AddedViews(); ok {
		_spec.AddField(viewanalytics.FieldViews, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.Scrolls(); ok {
		_spec.SetField(viewanalytics.FieldScrolls, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.AddedScrolls(); ok {
		_spec.AddField(viewanalytics.FieldScrolls, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.Exits(); ok {
		_spec.SetField(viewanalytics.FieldExits, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.AddedExits(); ok {
		_spec.AddField(viewanalytics.FieldExits, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.DateCreated(); ok {
		_spec.SetField(viewanalytics.FieldDateCreated, field.TypeString, value)
	}
	if vauo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewanalytics.ProductTable,
			Columns: []string{viewanalytics.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vauo.mutation.RemovedProductIDs(); len(nodes) > 0 && !vauo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewanalytics.ProductTable,
			Columns: []string{viewanalytics.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vauo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewanalytics.ProductTable,
			Columns: []string{viewanalytics.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ViewAnalytics{config: vauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewanalytics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vauo.mutation.done = true
	return _node, nil
}
