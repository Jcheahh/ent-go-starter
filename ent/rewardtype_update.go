// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/rewardtype"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RewardTypeUpdate is the builder for updating RewardType entities.
type RewardTypeUpdate struct {
	config
	hooks    []Hook
	mutation *RewardTypeMutation
}

// Where appends a list predicates to the RewardTypeUpdate builder.
func (rtu *RewardTypeUpdate) Where(ps ...predicate.RewardType) *RewardTypeUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetType sets the "type" field.
func (rtu *RewardTypeUpdate) SetType(r rewardtype.Type) *RewardTypeUpdate {
	rtu.mutation.SetType(r)
	return rtu
}

// SetVal sets the "val" field.
func (rtu *RewardTypeUpdate) SetVal(i int) *RewardTypeUpdate {
	rtu.mutation.ResetVal()
	rtu.mutation.SetVal(i)
	return rtu
}

// AddVal adds i to the "val" field.
func (rtu *RewardTypeUpdate) AddVal(i int) *RewardTypeUpdate {
	rtu.mutation.AddVal(i)
	return rtu
}

// Mutation returns the RewardTypeMutation object of the builder.
func (rtu *RewardTypeUpdate) Mutation() *RewardTypeMutation {
	return rtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RewardTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RewardTypeMutation](ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RewardTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RewardTypeUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RewardTypeUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *RewardTypeUpdate) check() error {
	if v, ok := rtu.mutation.GetType(); ok {
		if err := rewardtype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RewardType.type": %w`, err)}
		}
	}
	return nil
}

func (rtu *RewardTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rewardtype.Table, rewardtype.Columns, sqlgraph.NewFieldSpec(rewardtype.FieldID, field.TypeInt))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.GetType(); ok {
		_spec.SetField(rewardtype.FieldType, field.TypeEnum, value)
	}
	if value, ok := rtu.mutation.Val(); ok {
		_spec.SetField(rewardtype.FieldVal, field.TypeInt, value)
	}
	if value, ok := rtu.mutation.AddedVal(); ok {
		_spec.AddField(rewardtype.FieldVal, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rewardtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// RewardTypeUpdateOne is the builder for updating a single RewardType entity.
type RewardTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RewardTypeMutation
}

// SetType sets the "type" field.
func (rtuo *RewardTypeUpdateOne) SetType(r rewardtype.Type) *RewardTypeUpdateOne {
	rtuo.mutation.SetType(r)
	return rtuo
}

// SetVal sets the "val" field.
func (rtuo *RewardTypeUpdateOne) SetVal(i int) *RewardTypeUpdateOne {
	rtuo.mutation.ResetVal()
	rtuo.mutation.SetVal(i)
	return rtuo
}

// AddVal adds i to the "val" field.
func (rtuo *RewardTypeUpdateOne) AddVal(i int) *RewardTypeUpdateOne {
	rtuo.mutation.AddVal(i)
	return rtuo
}

// Mutation returns the RewardTypeMutation object of the builder.
func (rtuo *RewardTypeUpdateOne) Mutation() *RewardTypeMutation {
	return rtuo.mutation
}

// Where appends a list predicates to the RewardTypeUpdate builder.
func (rtuo *RewardTypeUpdateOne) Where(ps ...predicate.RewardType) *RewardTypeUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RewardTypeUpdateOne) Select(field string, fields ...string) *RewardTypeUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RewardType entity.
func (rtuo *RewardTypeUpdateOne) Save(ctx context.Context) (*RewardType, error) {
	return withHooks[*RewardType, RewardTypeMutation](ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RewardTypeUpdateOne) SaveX(ctx context.Context) *RewardType {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RewardTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RewardTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *RewardTypeUpdateOne) check() error {
	if v, ok := rtuo.mutation.GetType(); ok {
		if err := rewardtype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RewardType.type": %w`, err)}
		}
	}
	return nil
}

func (rtuo *RewardTypeUpdateOne) sqlSave(ctx context.Context) (_node *RewardType, err error) {
	if err := rtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rewardtype.Table, rewardtype.Columns, sqlgraph.NewFieldSpec(rewardtype.FieldID, field.TypeInt))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RewardType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rewardtype.FieldID)
		for _, f := range fields {
			if !rewardtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rewardtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.GetType(); ok {
		_spec.SetField(rewardtype.FieldType, field.TypeEnum, value)
	}
	if value, ok := rtuo.mutation.Val(); ok {
		_spec.SetField(rewardtype.FieldVal, field.TypeInt, value)
	}
	if value, ok := rtuo.mutation.AddedVal(); ok {
		_spec.AddField(rewardtype.FieldVal, field.TypeInt, value)
	}
	_node = &RewardType{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rewardtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
