// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/groupbuy"
	"entdemo/ent/product"
	"entdemo/ent/transaction"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupBuyCreate is the builder for creating a GroupBuy entity.
type GroupBuyCreate struct {
	config
	mutation *GroupBuyMutation
	hooks    []Hook
}

// SetDateCreated sets the "dateCreated" field.
func (gbc *GroupBuyCreate) SetDateCreated(s string) *GroupBuyCreate {
	gbc.mutation.SetDateCreated(s)
	return gbc
}

// SetProductPrice sets the "productPrice" field.
func (gbc *GroupBuyCreate) SetProductPrice(i int) *GroupBuyCreate {
	gbc.mutation.SetProductPrice(i)
	return gbc
}

// SetMoq sets the "moq" field.
func (gbc *GroupBuyCreate) SetMoq(i int) *GroupBuyCreate {
	gbc.mutation.SetMoq(i)
	return gbc
}

// SetStartDate sets the "startDate" field.
func (gbc *GroupBuyCreate) SetStartDate(s string) *GroupBuyCreate {
	gbc.mutation.SetStartDate(s)
	return gbc
}

// SetEndDate sets the "endDate" field.
func (gbc *GroupBuyCreate) SetEndDate(s string) *GroupBuyCreate {
	gbc.mutation.SetEndDate(s)
	return gbc
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (gbc *GroupBuyCreate) AddProductIDs(ids ...int) *GroupBuyCreate {
	gbc.mutation.AddProductIDs(ids...)
	return gbc
}

// AddProduct adds the "product" edges to the Product entity.
func (gbc *GroupBuyCreate) AddProduct(p ...*Product) *GroupBuyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gbc.AddProductIDs(ids...)
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (gbc *GroupBuyCreate) AddTransactionIDs(ids ...int) *GroupBuyCreate {
	gbc.mutation.AddTransactionIDs(ids...)
	return gbc
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (gbc *GroupBuyCreate) AddTransaction(t ...*Transaction) *GroupBuyCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbc.AddTransactionIDs(ids...)
}

// Mutation returns the GroupBuyMutation object of the builder.
func (gbc *GroupBuyCreate) Mutation() *GroupBuyMutation {
	return gbc.mutation
}

// Save creates the GroupBuy in the database.
func (gbc *GroupBuyCreate) Save(ctx context.Context) (*GroupBuy, error) {
	return withHooks[*GroupBuy, GroupBuyMutation](ctx, gbc.sqlSave, gbc.mutation, gbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gbc *GroupBuyCreate) SaveX(ctx context.Context) *GroupBuy {
	v, err := gbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbc *GroupBuyCreate) Exec(ctx context.Context) error {
	_, err := gbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbc *GroupBuyCreate) ExecX(ctx context.Context) {
	if err := gbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gbc *GroupBuyCreate) check() error {
	if _, ok := gbc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "GroupBuy.dateCreated"`)}
	}
	if _, ok := gbc.mutation.ProductPrice(); !ok {
		return &ValidationError{Name: "productPrice", err: errors.New(`ent: missing required field "GroupBuy.productPrice"`)}
	}
	if _, ok := gbc.mutation.Moq(); !ok {
		return &ValidationError{Name: "moq", err: errors.New(`ent: missing required field "GroupBuy.moq"`)}
	}
	if _, ok := gbc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "GroupBuy.startDate"`)}
	}
	if _, ok := gbc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "endDate", err: errors.New(`ent: missing required field "GroupBuy.endDate"`)}
	}
	return nil
}

func (gbc *GroupBuyCreate) sqlSave(ctx context.Context) (*GroupBuy, error) {
	if err := gbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gbc.mutation.id = &_node.ID
	gbc.mutation.done = true
	return _node, nil
}

func (gbc *GroupBuyCreate) createSpec() (*GroupBuy, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupBuy{config: gbc.config}
		_spec = sqlgraph.NewCreateSpec(groupbuy.Table, sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt))
	)
	if value, ok := gbc.mutation.DateCreated(); ok {
		_spec.SetField(groupbuy.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := gbc.mutation.ProductPrice(); ok {
		_spec.SetField(groupbuy.FieldProductPrice, field.TypeInt, value)
		_node.ProductPrice = value
	}
	if value, ok := gbc.mutation.Moq(); ok {
		_spec.SetField(groupbuy.FieldMoq, field.TypeInt, value)
		_node.Moq = value
	}
	if value, ok := gbc.mutation.StartDate(); ok {
		_spec.SetField(groupbuy.FieldStartDate, field.TypeString, value)
		_node.StartDate = value
	}
	if value, ok := gbc.mutation.EndDate(); ok {
		_spec.SetField(groupbuy.FieldEndDate, field.TypeString, value)
		_node.EndDate = value
	}
	if nodes := gbc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.ProductTable,
			Columns: []string{groupbuy.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gbc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbuy.TransactionTable,
			Columns: []string{groupbuy.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupBuyCreateBulk is the builder for creating many GroupBuy entities in bulk.
type GroupBuyCreateBulk struct {
	config
	builders []*GroupBuyCreate
}

// Save creates the GroupBuy entities in the database.
func (gbcb *GroupBuyCreateBulk) Save(ctx context.Context) ([]*GroupBuy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gbcb.builders))
	nodes := make([]*GroupBuy, len(gbcb.builders))
	mutators := make([]Mutator, len(gbcb.builders))
	for i := range gbcb.builders {
		func(i int, root context.Context) {
			builder := gbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupBuyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gbcb *GroupBuyCreateBulk) SaveX(ctx context.Context) []*GroupBuy {
	v, err := gbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbcb *GroupBuyCreateBulk) Exec(ctx context.Context) error {
	_, err := gbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbcb *GroupBuyCreateBulk) ExecX(ctx context.Context) {
	if err := gbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
