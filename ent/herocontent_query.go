// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"entdemo/ent/herocontent"
	"entdemo/ent/image"
	"entdemo/ent/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeroContentQuery is the builder for querying HeroContent entities.
type HeroContentQuery struct {
	config
	ctx            *QueryContext
	order          []herocontent.OrderOption
	inters         []Interceptor
	predicates     []predicate.HeroContent
	withImage      *ImageQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*HeroContent) error
	withNamedImage map[string]*ImageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HeroContentQuery builder.
func (hcq *HeroContentQuery) Where(ps ...predicate.HeroContent) *HeroContentQuery {
	hcq.predicates = append(hcq.predicates, ps...)
	return hcq
}

// Limit the number of records to be returned by this query.
func (hcq *HeroContentQuery) Limit(limit int) *HeroContentQuery {
	hcq.ctx.Limit = &limit
	return hcq
}

// Offset to start from.
func (hcq *HeroContentQuery) Offset(offset int) *HeroContentQuery {
	hcq.ctx.Offset = &offset
	return hcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hcq *HeroContentQuery) Unique(unique bool) *HeroContentQuery {
	hcq.ctx.Unique = &unique
	return hcq
}

// Order specifies how the records should be ordered.
func (hcq *HeroContentQuery) Order(o ...herocontent.OrderOption) *HeroContentQuery {
	hcq.order = append(hcq.order, o...)
	return hcq
}

// QueryImage chains the current query on the "image" edge.
func (hcq *HeroContentQuery) QueryImage() *ImageQuery {
	query := (&ImageClient{config: hcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herocontent.Table, herocontent.FieldID, selector),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, herocontent.ImageTable, herocontent.ImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(hcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HeroContent entity from the query.
// Returns a *NotFoundError when no HeroContent was found.
func (hcq *HeroContentQuery) First(ctx context.Context) (*HeroContent, error) {
	nodes, err := hcq.Limit(1).All(setContextOp(ctx, hcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{herocontent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hcq *HeroContentQuery) FirstX(ctx context.Context) *HeroContent {
	node, err := hcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HeroContent ID from the query.
// Returns a *NotFoundError when no HeroContent ID was found.
func (hcq *HeroContentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hcq.Limit(1).IDs(setContextOp(ctx, hcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{herocontent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hcq *HeroContentQuery) FirstIDX(ctx context.Context) int {
	id, err := hcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HeroContent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HeroContent entity is found.
// Returns a *NotFoundError when no HeroContent entities are found.
func (hcq *HeroContentQuery) Only(ctx context.Context) (*HeroContent, error) {
	nodes, err := hcq.Limit(2).All(setContextOp(ctx, hcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{herocontent.Label}
	default:
		return nil, &NotSingularError{herocontent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hcq *HeroContentQuery) OnlyX(ctx context.Context) *HeroContent {
	node, err := hcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HeroContent ID in the query.
// Returns a *NotSingularError when more than one HeroContent ID is found.
// Returns a *NotFoundError when no entities are found.
func (hcq *HeroContentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hcq.Limit(2).IDs(setContextOp(ctx, hcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{herocontent.Label}
	default:
		err = &NotSingularError{herocontent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hcq *HeroContentQuery) OnlyIDX(ctx context.Context) int {
	id, err := hcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HeroContents.
func (hcq *HeroContentQuery) All(ctx context.Context) ([]*HeroContent, error) {
	ctx = setContextOp(ctx, hcq.ctx, "All")
	if err := hcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HeroContent, *HeroContentQuery]()
	return withInterceptors[[]*HeroContent](ctx, hcq, qr, hcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hcq *HeroContentQuery) AllX(ctx context.Context) []*HeroContent {
	nodes, err := hcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HeroContent IDs.
func (hcq *HeroContentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hcq.ctx.Unique == nil && hcq.path != nil {
		hcq.Unique(true)
	}
	ctx = setContextOp(ctx, hcq.ctx, "IDs")
	if err = hcq.Select(herocontent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hcq *HeroContentQuery) IDsX(ctx context.Context) []int {
	ids, err := hcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hcq *HeroContentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hcq.ctx, "Count")
	if err := hcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hcq, querierCount[*HeroContentQuery](), hcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hcq *HeroContentQuery) CountX(ctx context.Context) int {
	count, err := hcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hcq *HeroContentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hcq.ctx, "Exist")
	switch _, err := hcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hcq *HeroContentQuery) ExistX(ctx context.Context) bool {
	exist, err := hcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HeroContentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hcq *HeroContentQuery) Clone() *HeroContentQuery {
	if hcq == nil {
		return nil
	}
	return &HeroContentQuery{
		config:     hcq.config,
		ctx:        hcq.ctx.Clone(),
		order:      append([]herocontent.OrderOption{}, hcq.order...),
		inters:     append([]Interceptor{}, hcq.inters...),
		predicates: append([]predicate.HeroContent{}, hcq.predicates...),
		withImage:  hcq.withImage.Clone(),
		// clone intermediate query.
		sql:  hcq.sql.Clone(),
		path: hcq.path,
	}
}

// WithImage tells the query-builder to eager-load the nodes that are connected to
// the "image" edge. The optional arguments are used to configure the query builder of the edge.
func (hcq *HeroContentQuery) WithImage(opts ...func(*ImageQuery)) *HeroContentQuery {
	query := (&ImageClient{config: hcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hcq.withImage = query
	return hcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PrimaryMessage string `json:"primaryMessage,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HeroContent.Query().
//		GroupBy(herocontent.FieldPrimaryMessage).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hcq *HeroContentQuery) GroupBy(field string, fields ...string) *HeroContentGroupBy {
	hcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HeroContentGroupBy{build: hcq}
	grbuild.flds = &hcq.ctx.Fields
	grbuild.label = herocontent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PrimaryMessage string `json:"primaryMessage,omitempty"`
//	}
//
//	client.HeroContent.Query().
//		Select(herocontent.FieldPrimaryMessage).
//		Scan(ctx, &v)
func (hcq *HeroContentQuery) Select(fields ...string) *HeroContentSelect {
	hcq.ctx.Fields = append(hcq.ctx.Fields, fields...)
	sbuild := &HeroContentSelect{HeroContentQuery: hcq}
	sbuild.label = herocontent.Label
	sbuild.flds, sbuild.scan = &hcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HeroContentSelect configured with the given aggregations.
func (hcq *HeroContentQuery) Aggregate(fns ...AggregateFunc) *HeroContentSelect {
	return hcq.Select().Aggregate(fns...)
}

func (hcq *HeroContentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hcq); err != nil {
				return err
			}
		}
	}
	for _, f := range hcq.ctx.Fields {
		if !herocontent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hcq.path != nil {
		prev, err := hcq.path(ctx)
		if err != nil {
			return err
		}
		hcq.sql = prev
	}
	return nil
}

func (hcq *HeroContentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HeroContent, error) {
	var (
		nodes       = []*HeroContent{}
		withFKs     = hcq.withFKs
		_spec       = hcq.querySpec()
		loadedTypes = [1]bool{
			hcq.withImage != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, herocontent.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HeroContent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HeroContent{config: hcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hcq.modifiers) > 0 {
		_spec.Modifiers = hcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hcq.withImage; query != nil {
		if err := hcq.loadImage(ctx, query, nodes,
			func(n *HeroContent) { n.Edges.Image = []*Image{} },
			func(n *HeroContent, e *Image) { n.Edges.Image = append(n.Edges.Image, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hcq.withNamedImage {
		if err := hcq.loadImage(ctx, query, nodes,
			func(n *HeroContent) { n.appendNamedImage(name) },
			func(n *HeroContent, e *Image) { n.appendNamedImage(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hcq.loadTotal {
		if err := hcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hcq *HeroContentQuery) loadImage(ctx context.Context, query *ImageQuery, nodes []*HeroContent, init func(*HeroContent), assign func(*HeroContent, *Image)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HeroContent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Image(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(herocontent.ImageColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hero_content_image
		if fk == nil {
			return fmt.Errorf(`foreign-key "hero_content_image" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hero_content_image" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (hcq *HeroContentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hcq.querySpec()
	if len(hcq.modifiers) > 0 {
		_spec.Modifiers = hcq.modifiers
	}
	_spec.Node.Columns = hcq.ctx.Fields
	if len(hcq.ctx.Fields) > 0 {
		_spec.Unique = hcq.ctx.Unique != nil && *hcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hcq.driver, _spec)
}

func (hcq *HeroContentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(herocontent.Table, herocontent.Columns, sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt))
	_spec.From = hcq.sql
	if unique := hcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hcq.path != nil {
		_spec.Unique = true
	}
	if fields := hcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, herocontent.FieldID)
		for i := range fields {
			if fields[i] != herocontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hcq *HeroContentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hcq.driver.Dialect())
	t1 := builder.Table(herocontent.Table)
	columns := hcq.ctx.Fields
	if len(columns) == 0 {
		columns = herocontent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hcq.sql != nil {
		selector = hcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hcq.ctx.Unique != nil && *hcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hcq.predicates {
		p(selector)
	}
	for _, p := range hcq.order {
		p(selector)
	}
	if offset := hcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedImage tells the query-builder to eager-load the nodes that are connected to the "image"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hcq *HeroContentQuery) WithNamedImage(name string, opts ...func(*ImageQuery)) *HeroContentQuery {
	query := (&ImageClient{config: hcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hcq.withNamedImage == nil {
		hcq.withNamedImage = make(map[string]*ImageQuery)
	}
	hcq.withNamedImage[name] = query
	return hcq
}

// HeroContentGroupBy is the group-by builder for HeroContent entities.
type HeroContentGroupBy struct {
	selector
	build *HeroContentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hcgb *HeroContentGroupBy) Aggregate(fns ...AggregateFunc) *HeroContentGroupBy {
	hcgb.fns = append(hcgb.fns, fns...)
	return hcgb
}

// Scan applies the selector query and scans the result into the given value.
func (hcgb *HeroContentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hcgb.build.ctx, "GroupBy")
	if err := hcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HeroContentQuery, *HeroContentGroupBy](ctx, hcgb.build, hcgb, hcgb.build.inters, v)
}

func (hcgb *HeroContentGroupBy) sqlScan(ctx context.Context, root *HeroContentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hcgb.fns))
	for _, fn := range hcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hcgb.flds)+len(hcgb.fns))
		for _, f := range *hcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HeroContentSelect is the builder for selecting fields of HeroContent entities.
type HeroContentSelect struct {
	*HeroContentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hcs *HeroContentSelect) Aggregate(fns ...AggregateFunc) *HeroContentSelect {
	hcs.fns = append(hcs.fns, fns...)
	return hcs
}

// Scan applies the selector query and scans the result into the given value.
func (hcs *HeroContentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hcs.ctx, "Select")
	if err := hcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HeroContentQuery, *HeroContentSelect](ctx, hcs.HeroContentQuery, hcs, hcs.inters, v)
}

func (hcs *HeroContentSelect) sqlScan(ctx context.Context, root *HeroContentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hcs.fns))
	for _, fn := range hcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
