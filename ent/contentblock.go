// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/contentblock"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ContentBlock is the model entity for the ContentBlock schema.
type ContentBlock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PrimaryMessage holds the value of the "primaryMessage" field.
	PrimaryMessage string `json:"primaryMessage,omitempty"`
	// SecondaryMessage holds the value of the "secondaryMessage" field.
	SecondaryMessage string `json:"secondaryMessage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContentBlockQuery when eager-loading is set.
	Edges                         ContentBlockEdges `json:"edges"`
	primary_content_content_block *int
	selectValues                  sql.SelectValues
}

// ContentBlockEdges holds the relations/edges for other nodes in the graph.
type ContentBlockEdges struct {
	// Image holds the value of the image edge.
	Image []*Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedImage map[string][]*Image
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading.
func (e ContentBlockEdges) ImageOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContentBlock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contentblock.FieldID:
			values[i] = new(sql.NullInt64)
		case contentblock.FieldPrimaryMessage, contentblock.FieldSecondaryMessage:
			values[i] = new(sql.NullString)
		case contentblock.ForeignKeys[0]: // primary_content_content_block
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContentBlock fields.
func (cb *ContentBlock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contentblock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cb.ID = int(value.Int64)
		case contentblock.FieldPrimaryMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primaryMessage", values[i])
			} else if value.Valid {
				cb.PrimaryMessage = value.String
			}
		case contentblock.FieldSecondaryMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secondaryMessage", values[i])
			} else if value.Valid {
				cb.SecondaryMessage = value.String
			}
		case contentblock.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field primary_content_content_block", value)
			} else if value.Valid {
				cb.primary_content_content_block = new(int)
				*cb.primary_content_content_block = int(value.Int64)
			}
		default:
			cb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContentBlock.
// This includes values selected through modifiers, order, etc.
func (cb *ContentBlock) Value(name string) (ent.Value, error) {
	return cb.selectValues.Get(name)
}

// QueryImage queries the "image" edge of the ContentBlock entity.
func (cb *ContentBlock) QueryImage() *ImageQuery {
	return NewContentBlockClient(cb.config).QueryImage(cb)
}

// Update returns a builder for updating this ContentBlock.
// Note that you need to call ContentBlock.Unwrap() before calling this method if this ContentBlock
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *ContentBlock) Update() *ContentBlockUpdateOne {
	return NewContentBlockClient(cb.config).UpdateOne(cb)
}

// Unwrap unwraps the ContentBlock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *ContentBlock) Unwrap() *ContentBlock {
	_tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContentBlock is not a transactional entity")
	}
	cb.config.driver = _tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *ContentBlock) String() string {
	var builder strings.Builder
	builder.WriteString("ContentBlock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cb.ID))
	builder.WriteString("primaryMessage=")
	builder.WriteString(cb.PrimaryMessage)
	builder.WriteString(", ")
	builder.WriteString("secondaryMessage=")
	builder.WriteString(cb.SecondaryMessage)
	builder.WriteByte(')')
	return builder.String()
}

// NamedImage returns the Image named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *ContentBlock) NamedImage(name string) ([]*Image, error) {
	if cb.Edges.namedImage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedImage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *ContentBlock) appendNamedImage(name string, edges ...*Image) {
	if cb.Edges.namedImage == nil {
		cb.Edges.namedImage = make(map[string][]*Image)
	}
	if len(edges) == 0 {
		cb.Edges.namedImage[name] = []*Image{}
	} else {
		cb.Edges.namedImage[name] = append(cb.Edges.namedImage[name], edges...)
	}
}

// ContentBlocks is a parsable slice of ContentBlock.
type ContentBlocks []*ContentBlock
