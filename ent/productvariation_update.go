// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/productattribute"
	"entdemo/ent/productvariation"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductVariationUpdate is the builder for updating ProductVariation entities.
type ProductVariationUpdate struct {
	config
	hooks    []Hook
	mutation *ProductVariationMutation
}

// Where appends a list predicates to the ProductVariationUpdate builder.
func (pvu *ProductVariationUpdate) Where(ps ...predicate.ProductVariation) *ProductVariationUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetName sets the "name" field.
func (pvu *ProductVariationUpdate) SetName(s string) *ProductVariationUpdate {
	pvu.mutation.SetName(s)
	return pvu
}

// SetDescription sets the "description" field.
func (pvu *ProductVariationUpdate) SetDescription(s string) *ProductVariationUpdate {
	pvu.mutation.SetDescription(s)
	return pvu
}

// SetPrice sets the "price" field.
func (pvu *ProductVariationUpdate) SetPrice(s string) *ProductVariationUpdate {
	pvu.mutation.SetPrice(s)
	return pvu
}

// AddProductAttributeIDs adds the "productAttributes" edge to the ProductAttribute entity by IDs.
func (pvu *ProductVariationUpdate) AddProductAttributeIDs(ids ...int) *ProductVariationUpdate {
	pvu.mutation.AddProductAttributeIDs(ids...)
	return pvu
}

// AddProductAttributes adds the "productAttributes" edges to the ProductAttribute entity.
func (pvu *ProductVariationUpdate) AddProductAttributes(p ...*ProductAttribute) *ProductVariationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.AddProductAttributeIDs(ids...)
}

// Mutation returns the ProductVariationMutation object of the builder.
func (pvu *ProductVariationUpdate) Mutation() *ProductVariationMutation {
	return pvu.mutation
}

// ClearProductAttributes clears all "productAttributes" edges to the ProductAttribute entity.
func (pvu *ProductVariationUpdate) ClearProductAttributes() *ProductVariationUpdate {
	pvu.mutation.ClearProductAttributes()
	return pvu
}

// RemoveProductAttributeIDs removes the "productAttributes" edge to ProductAttribute entities by IDs.
func (pvu *ProductVariationUpdate) RemoveProductAttributeIDs(ids ...int) *ProductVariationUpdate {
	pvu.mutation.RemoveProductAttributeIDs(ids...)
	return pvu
}

// RemoveProductAttributes removes "productAttributes" edges to ProductAttribute entities.
func (pvu *ProductVariationUpdate) RemoveProductAttributes(p ...*ProductAttribute) *ProductVariationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.RemoveProductAttributeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProductVariationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProductVariationMutation](ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProductVariationUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProductVariationUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProductVariationUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvu *ProductVariationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productvariation.Table, productvariation.Columns, sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.Name(); ok {
		_spec.SetField(productvariation.FieldName, field.TypeString, value)
	}
	if value, ok := pvu.mutation.Description(); ok {
		_spec.SetField(productvariation.FieldDescription, field.TypeString, value)
	}
	if value, ok := pvu.mutation.Price(); ok {
		_spec.SetField(productvariation.FieldPrice, field.TypeString, value)
	}
	if pvu.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productvariation.ProductAttributesTable,
			Columns: []string{productvariation.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.RemovedProductAttributesIDs(); len(nodes) > 0 && !pvu.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productvariation.ProductAttributesTable,
			Columns: []string{productvariation.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.ProductAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productvariation.ProductAttributesTable,
			Columns: []string{productvariation.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productvariation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProductVariationUpdateOne is the builder for updating a single ProductVariation entity.
type ProductVariationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductVariationMutation
}

// SetName sets the "name" field.
func (pvuo *ProductVariationUpdateOne) SetName(s string) *ProductVariationUpdateOne {
	pvuo.mutation.SetName(s)
	return pvuo
}

// SetDescription sets the "description" field.
func (pvuo *ProductVariationUpdateOne) SetDescription(s string) *ProductVariationUpdateOne {
	pvuo.mutation.SetDescription(s)
	return pvuo
}

// SetPrice sets the "price" field.
func (pvuo *ProductVariationUpdateOne) SetPrice(s string) *ProductVariationUpdateOne {
	pvuo.mutation.SetPrice(s)
	return pvuo
}

// AddProductAttributeIDs adds the "productAttributes" edge to the ProductAttribute entity by IDs.
func (pvuo *ProductVariationUpdateOne) AddProductAttributeIDs(ids ...int) *ProductVariationUpdateOne {
	pvuo.mutation.AddProductAttributeIDs(ids...)
	return pvuo
}

// AddProductAttributes adds the "productAttributes" edges to the ProductAttribute entity.
func (pvuo *ProductVariationUpdateOne) AddProductAttributes(p ...*ProductAttribute) *ProductVariationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.AddProductAttributeIDs(ids...)
}

// Mutation returns the ProductVariationMutation object of the builder.
func (pvuo *ProductVariationUpdateOne) Mutation() *ProductVariationMutation {
	return pvuo.mutation
}

// ClearProductAttributes clears all "productAttributes" edges to the ProductAttribute entity.
func (pvuo *ProductVariationUpdateOne) ClearProductAttributes() *ProductVariationUpdateOne {
	pvuo.mutation.ClearProductAttributes()
	return pvuo
}

// RemoveProductAttributeIDs removes the "productAttributes" edge to ProductAttribute entities by IDs.
func (pvuo *ProductVariationUpdateOne) RemoveProductAttributeIDs(ids ...int) *ProductVariationUpdateOne {
	pvuo.mutation.RemoveProductAttributeIDs(ids...)
	return pvuo
}

// RemoveProductAttributes removes "productAttributes" edges to ProductAttribute entities.
func (pvuo *ProductVariationUpdateOne) RemoveProductAttributes(p ...*ProductAttribute) *ProductVariationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.RemoveProductAttributeIDs(ids...)
}

// Where appends a list predicates to the ProductVariationUpdate builder.
func (pvuo *ProductVariationUpdateOne) Where(ps ...predicate.ProductVariation) *ProductVariationUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProductVariationUpdateOne) Select(field string, fields ...string) *ProductVariationUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProductVariation entity.
func (pvuo *ProductVariationUpdateOne) Save(ctx context.Context) (*ProductVariation, error) {
	return withHooks[*ProductVariation, ProductVariationMutation](ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProductVariationUpdateOne) SaveX(ctx context.Context) *ProductVariation {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProductVariationUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProductVariationUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvuo *ProductVariationUpdateOne) sqlSave(ctx context.Context) (_node *ProductVariation, err error) {
	_spec := sqlgraph.NewUpdateSpec(productvariation.Table, productvariation.Columns, sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductVariation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productvariation.FieldID)
		for _, f := range fields {
			if !productvariation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productvariation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.Name(); ok {
		_spec.SetField(productvariation.FieldName, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.Description(); ok {
		_spec.SetField(productvariation.FieldDescription, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.Price(); ok {
		_spec.SetField(productvariation.FieldPrice, field.TypeString, value)
	}
	if pvuo.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productvariation.ProductAttributesTable,
			Columns: []string{productvariation.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.RemovedProductAttributesIDs(); len(nodes) > 0 && !pvuo.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productvariation.ProductAttributesTable,
			Columns: []string{productvariation.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.ProductAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productvariation.ProductAttributesTable,
			Columns: []string{productvariation.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductVariation{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productvariation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
