// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"entdemo/ent/blogpost"
	"entdemo/ent/category"
	"entdemo/ent/chat"
	"entdemo/ent/commissionstructure"
	"entdemo/ent/emailcampaign"
	"entdemo/ent/groupbuy"
	"entdemo/ent/image"
	"entdemo/ent/marketingcampaign"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/productattribute"
	"entdemo/ent/productpageview"
	"entdemo/ent/productvariation"
	"entdemo/ent/review"
	"entdemo/ent/shop"
	"entdemo/ent/tag"
	"entdemo/ent/userseller"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductQuery is the builder for querying Product entities.
type ProductQuery struct {
	config
	ctx                          *QueryContext
	order                        []product.Order
	inters                       []Interceptor
	predicates                   []predicate.Product
	withProductSeller            *UserSellerQuery
	withReviews                  *ReviewQuery
	withImages                   *ImageQuery
	withCategories               *CategoryQuery
	withTags                     *TagQuery
	withProductAttributes        *ProductAttributeQuery
	withVariations               *ProductVariationQuery
	withCommissionStructure      *CommissionStructureQuery
	withShop                     *ShopQuery
	withGroupBuys                *GroupBuyQuery
	withProductPageViews         *ProductPageViewQuery
	withBlogPosts                *BlogPostQuery
	withMarketingCampaigns       *MarketingCampaignQuery
	withChats                    *ChatQuery
	withEmailCampaign            *EmailCampaignQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*Product) error
	withNamedProductSeller       map[string]*UserSellerQuery
	withNamedReviews             map[string]*ReviewQuery
	withNamedImages              map[string]*ImageQuery
	withNamedCategories          map[string]*CategoryQuery
	withNamedTags                map[string]*TagQuery
	withNamedProductAttributes   map[string]*ProductAttributeQuery
	withNamedVariations          map[string]*ProductVariationQuery
	withNamedCommissionStructure map[string]*CommissionStructureQuery
	withNamedShop                map[string]*ShopQuery
	withNamedGroupBuys           map[string]*GroupBuyQuery
	withNamedProductPageViews    map[string]*ProductPageViewQuery
	withNamedBlogPosts           map[string]*BlogPostQuery
	withNamedMarketingCampaigns  map[string]*MarketingCampaignQuery
	withNamedChats               map[string]*ChatQuery
	withNamedEmailCampaign       map[string]*EmailCampaignQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductQuery builder.
func (pq *ProductQuery) Where(ps ...predicate.Product) *ProductQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProductQuery) Limit(limit int) *ProductQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProductQuery) Offset(offset int) *ProductQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProductQuery) Unique(unique bool) *ProductQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProductQuery) Order(o ...product.Order) *ProductQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryProductSeller chains the current query on the "productSeller" edge.
func (pq *ProductQuery) QueryProductSeller() *UserSellerQuery {
	query := (&UserSellerClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(userseller.Table, userseller.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductSellerTable, product.ProductSellerColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (pq *ProductQuery) QueryReviews() *ReviewQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ReviewsTable, product.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImages chains the current query on the "images" edge.
func (pq *ProductQuery) QueryImages() *ImageQuery {
	query := (&ImageClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ImagesTable, product.ImagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategories chains the current query on the "categories" edge.
func (pq *ProductQuery) QueryCategories() *CategoryQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.CategoriesTable, product.CategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the "tags" edge.
func (pq *ProductQuery) QueryTags() *TagQuery {
	query := (&TagClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.TagsTable, product.TagsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductAttributes chains the current query on the "productAttributes" edge.
func (pq *ProductQuery) QueryProductAttributes() *ProductAttributeQuery {
	query := (&ProductAttributeClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productattribute.Table, productattribute.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductAttributesTable, product.ProductAttributesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVariations chains the current query on the "variations" edge.
func (pq *ProductQuery) QueryVariations() *ProductVariationQuery {
	query := (&ProductVariationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productvariation.Table, productvariation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.VariationsTable, product.VariationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommissionStructure chains the current query on the "commissionStructure" edge.
func (pq *ProductQuery) QueryCommissionStructure() *CommissionStructureQuery {
	query := (&CommissionStructureClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(commissionstructure.Table, commissionstructure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.CommissionStructureTable, product.CommissionStructureColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShop chains the current query on the "shop" edge.
func (pq *ProductQuery) QueryShop() *ShopQuery {
	query := (&ShopClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(shop.Table, shop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ShopTable, product.ShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupBuys chains the current query on the "groupBuys" edge.
func (pq *ProductQuery) QueryGroupBuys() *GroupBuyQuery {
	query := (&GroupBuyClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(groupbuy.Table, groupbuy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.GroupBuysTable, product.GroupBuysColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPageViews chains the current query on the "productPageViews" edge.
func (pq *ProductQuery) QueryProductPageViews() *ProductPageViewQuery {
	query := (&ProductPageViewClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productpageview.Table, productpageview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductPageViewsTable, product.ProductPageViewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlogPosts chains the current query on the "blogPosts" edge.
func (pq *ProductQuery) QueryBlogPosts() *BlogPostQuery {
	query := (&BlogPostClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.BlogPostsTable, product.BlogPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMarketingCampaigns chains the current query on the "marketingCampaigns" edge.
func (pq *ProductQuery) QueryMarketingCampaigns() *MarketingCampaignQuery {
	query := (&MarketingCampaignClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(marketingcampaign.Table, marketingcampaign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.MarketingCampaignsTable, product.MarketingCampaignsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChats chains the current query on the "chats" edge.
func (pq *ProductQuery) QueryChats() *ChatQuery {
	query := (&ChatClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(chat.Table, chat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ChatsTable, product.ChatsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailCampaign chains the current query on the "emailCampaign" edge.
func (pq *ProductQuery) QueryEmailCampaign() *EmailCampaignQuery {
	query := (&EmailCampaignClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(emailcampaign.Table, emailcampaign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.EmailCampaignTable, product.EmailCampaignColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Product entity from the query.
// Returns a *NotFoundError when no Product was found.
func (pq *ProductQuery) First(ctx context.Context) (*Product, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{product.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProductQuery) FirstX(ctx context.Context) *Product {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Product ID from the query.
// Returns a *NotFoundError when no Product ID was found.
func (pq *ProductQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{product.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProductQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Product entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Product entity is found.
// Returns a *NotFoundError when no Product entities are found.
func (pq *ProductQuery) Only(ctx context.Context) (*Product, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{product.Label}
	default:
		return nil, &NotSingularError{product.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProductQuery) OnlyX(ctx context.Context) *Product {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Product ID in the query.
// Returns a *NotSingularError when more than one Product ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProductQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = &NotSingularError{product.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProductQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Products.
func (pq *ProductQuery) All(ctx context.Context) ([]*Product, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Product, *ProductQuery]()
	return withInterceptors[[]*Product](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProductQuery) AllX(ctx context.Context) []*Product {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Product IDs.
func (pq *ProductQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(product.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProductQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProductQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProductQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProductQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProductQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProductQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProductQuery) Clone() *ProductQuery {
	if pq == nil {
		return nil
	}
	return &ProductQuery{
		config:                  pq.config,
		ctx:                     pq.ctx.Clone(),
		order:                   append([]product.Order{}, pq.order...),
		inters:                  append([]Interceptor{}, pq.inters...),
		predicates:              append([]predicate.Product{}, pq.predicates...),
		withProductSeller:       pq.withProductSeller.Clone(),
		withReviews:             pq.withReviews.Clone(),
		withImages:              pq.withImages.Clone(),
		withCategories:          pq.withCategories.Clone(),
		withTags:                pq.withTags.Clone(),
		withProductAttributes:   pq.withProductAttributes.Clone(),
		withVariations:          pq.withVariations.Clone(),
		withCommissionStructure: pq.withCommissionStructure.Clone(),
		withShop:                pq.withShop.Clone(),
		withGroupBuys:           pq.withGroupBuys.Clone(),
		withProductPageViews:    pq.withProductPageViews.Clone(),
		withBlogPosts:           pq.withBlogPosts.Clone(),
		withMarketingCampaigns:  pq.withMarketingCampaigns.Clone(),
		withChats:               pq.withChats.Clone(),
		withEmailCampaign:       pq.withEmailCampaign.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithProductSeller tells the query-builder to eager-load the nodes that are connected to
// the "productSeller" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithProductSeller(opts ...func(*UserSellerQuery)) *ProductQuery {
	query := (&UserSellerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductSeller = query
	return pq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithReviews(opts ...func(*ReviewQuery)) *ProductQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withReviews = query
	return pq
}

// WithImages tells the query-builder to eager-load the nodes that are connected to
// the "images" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithImages(opts ...func(*ImageQuery)) *ProductQuery {
	query := (&ImageClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withImages = query
	return pq
}

// WithCategories tells the query-builder to eager-load the nodes that are connected to
// the "categories" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithCategories(opts ...func(*CategoryQuery)) *ProductQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCategories = query
	return pq
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithTags(opts ...func(*TagQuery)) *ProductQuery {
	query := (&TagClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTags = query
	return pq
}

// WithProductAttributes tells the query-builder to eager-load the nodes that are connected to
// the "productAttributes" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithProductAttributes(opts ...func(*ProductAttributeQuery)) *ProductQuery {
	query := (&ProductAttributeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductAttributes = query
	return pq
}

// WithVariations tells the query-builder to eager-load the nodes that are connected to
// the "variations" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithVariations(opts ...func(*ProductVariationQuery)) *ProductQuery {
	query := (&ProductVariationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withVariations = query
	return pq
}

// WithCommissionStructure tells the query-builder to eager-load the nodes that are connected to
// the "commissionStructure" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithCommissionStructure(opts ...func(*CommissionStructureQuery)) *ProductQuery {
	query := (&CommissionStructureClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCommissionStructure = query
	return pq
}

// WithShop tells the query-builder to eager-load the nodes that are connected to
// the "shop" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithShop(opts ...func(*ShopQuery)) *ProductQuery {
	query := (&ShopClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withShop = query
	return pq
}

// WithGroupBuys tells the query-builder to eager-load the nodes that are connected to
// the "groupBuys" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithGroupBuys(opts ...func(*GroupBuyQuery)) *ProductQuery {
	query := (&GroupBuyClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withGroupBuys = query
	return pq
}

// WithProductPageViews tells the query-builder to eager-load the nodes that are connected to
// the "productPageViews" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithProductPageViews(opts ...func(*ProductPageViewQuery)) *ProductQuery {
	query := (&ProductPageViewClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductPageViews = query
	return pq
}

// WithBlogPosts tells the query-builder to eager-load the nodes that are connected to
// the "blogPosts" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithBlogPosts(opts ...func(*BlogPostQuery)) *ProductQuery {
	query := (&BlogPostClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBlogPosts = query
	return pq
}

// WithMarketingCampaigns tells the query-builder to eager-load the nodes that are connected to
// the "marketingCampaigns" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithMarketingCampaigns(opts ...func(*MarketingCampaignQuery)) *ProductQuery {
	query := (&MarketingCampaignClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMarketingCampaigns = query
	return pq
}

// WithChats tells the query-builder to eager-load the nodes that are connected to
// the "chats" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithChats(opts ...func(*ChatQuery)) *ProductQuery {
	query := (&ChatClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withChats = query
	return pq
}

// WithEmailCampaign tells the query-builder to eager-load the nodes that are connected to
// the "emailCampaign" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithEmailCampaign(opts ...func(*EmailCampaignQuery)) *ProductQuery {
	query := (&EmailCampaignClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEmailCampaign = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Product.Query().
//		GroupBy(product.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *ProductQuery) GroupBy(field string, fields ...string) *ProductGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = product.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Product.Query().
//		Select(product.FieldName).
//		Scan(ctx, &v)
func (pq *ProductQuery) Select(fields ...string) *ProductSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProductSelect{ProductQuery: pq}
	sbuild.label = product.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductSelect configured with the given aggregations.
func (pq *ProductQuery) Aggregate(fns ...AggregateFunc) *ProductSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProductQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !product.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProductQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Product, error) {
	var (
		nodes       = []*Product{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [15]bool{
			pq.withProductSeller != nil,
			pq.withReviews != nil,
			pq.withImages != nil,
			pq.withCategories != nil,
			pq.withTags != nil,
			pq.withProductAttributes != nil,
			pq.withVariations != nil,
			pq.withCommissionStructure != nil,
			pq.withShop != nil,
			pq.withGroupBuys != nil,
			pq.withProductPageViews != nil,
			pq.withBlogPosts != nil,
			pq.withMarketingCampaigns != nil,
			pq.withChats != nil,
			pq.withEmailCampaign != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, product.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Product).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Product{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withProductSeller; query != nil {
		if err := pq.loadProductSeller(ctx, query, nodes,
			func(n *Product) { n.Edges.ProductSeller = []*UserSeller{} },
			func(n *Product, e *UserSeller) { n.Edges.ProductSeller = append(n.Edges.ProductSeller, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withReviews; query != nil {
		if err := pq.loadReviews(ctx, query, nodes,
			func(n *Product) { n.Edges.Reviews = []*Review{} },
			func(n *Product, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withImages; query != nil {
		if err := pq.loadImages(ctx, query, nodes,
			func(n *Product) { n.Edges.Images = []*Image{} },
			func(n *Product, e *Image) { n.Edges.Images = append(n.Edges.Images, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCategories; query != nil {
		if err := pq.loadCategories(ctx, query, nodes,
			func(n *Product) { n.Edges.Categories = []*Category{} },
			func(n *Product, e *Category) { n.Edges.Categories = append(n.Edges.Categories, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTags; query != nil {
		if err := pq.loadTags(ctx, query, nodes,
			func(n *Product) { n.Edges.Tags = []*Tag{} },
			func(n *Product, e *Tag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductAttributes; query != nil {
		if err := pq.loadProductAttributes(ctx, query, nodes,
			func(n *Product) { n.Edges.ProductAttributes = []*ProductAttribute{} },
			func(n *Product, e *ProductAttribute) {
				n.Edges.ProductAttributes = append(n.Edges.ProductAttributes, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withVariations; query != nil {
		if err := pq.loadVariations(ctx, query, nodes,
			func(n *Product) { n.Edges.Variations = []*ProductVariation{} },
			func(n *Product, e *ProductVariation) { n.Edges.Variations = append(n.Edges.Variations, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCommissionStructure; query != nil {
		if err := pq.loadCommissionStructure(ctx, query, nodes,
			func(n *Product) { n.Edges.CommissionStructure = []*CommissionStructure{} },
			func(n *Product, e *CommissionStructure) {
				n.Edges.CommissionStructure = append(n.Edges.CommissionStructure, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withShop; query != nil {
		if err := pq.loadShop(ctx, query, nodes,
			func(n *Product) { n.Edges.Shop = []*Shop{} },
			func(n *Product, e *Shop) { n.Edges.Shop = append(n.Edges.Shop, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withGroupBuys; query != nil {
		if err := pq.loadGroupBuys(ctx, query, nodes,
			func(n *Product) { n.Edges.GroupBuys = []*GroupBuy{} },
			func(n *Product, e *GroupBuy) { n.Edges.GroupBuys = append(n.Edges.GroupBuys, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductPageViews; query != nil {
		if err := pq.loadProductPageViews(ctx, query, nodes,
			func(n *Product) { n.Edges.ProductPageViews = []*ProductPageView{} },
			func(n *Product, e *ProductPageView) { n.Edges.ProductPageViews = append(n.Edges.ProductPageViews, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBlogPosts; query != nil {
		if err := pq.loadBlogPosts(ctx, query, nodes,
			func(n *Product) { n.Edges.BlogPosts = []*BlogPost{} },
			func(n *Product, e *BlogPost) { n.Edges.BlogPosts = append(n.Edges.BlogPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMarketingCampaigns; query != nil {
		if err := pq.loadMarketingCampaigns(ctx, query, nodes,
			func(n *Product) { n.Edges.MarketingCampaigns = []*MarketingCampaign{} },
			func(n *Product, e *MarketingCampaign) {
				n.Edges.MarketingCampaigns = append(n.Edges.MarketingCampaigns, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withChats; query != nil {
		if err := pq.loadChats(ctx, query, nodes,
			func(n *Product) { n.Edges.Chats = []*Chat{} },
			func(n *Product, e *Chat) { n.Edges.Chats = append(n.Edges.Chats, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEmailCampaign; query != nil {
		if err := pq.loadEmailCampaign(ctx, query, nodes,
			func(n *Product) { n.Edges.EmailCampaign = []*EmailCampaign{} },
			func(n *Product, e *EmailCampaign) { n.Edges.EmailCampaign = append(n.Edges.EmailCampaign, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedProductSeller {
		if err := pq.loadProductSeller(ctx, query, nodes,
			func(n *Product) { n.appendNamedProductSeller(name) },
			func(n *Product, e *UserSeller) { n.appendNamedProductSeller(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedReviews {
		if err := pq.loadReviews(ctx, query, nodes,
			func(n *Product) { n.appendNamedReviews(name) },
			func(n *Product, e *Review) { n.appendNamedReviews(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedImages {
		if err := pq.loadImages(ctx, query, nodes,
			func(n *Product) { n.appendNamedImages(name) },
			func(n *Product, e *Image) { n.appendNamedImages(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedCategories {
		if err := pq.loadCategories(ctx, query, nodes,
			func(n *Product) { n.appendNamedCategories(name) },
			func(n *Product, e *Category) { n.appendNamedCategories(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedTags {
		if err := pq.loadTags(ctx, query, nodes,
			func(n *Product) { n.appendNamedTags(name) },
			func(n *Product, e *Tag) { n.appendNamedTags(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedProductAttributes {
		if err := pq.loadProductAttributes(ctx, query, nodes,
			func(n *Product) { n.appendNamedProductAttributes(name) },
			func(n *Product, e *ProductAttribute) { n.appendNamedProductAttributes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedVariations {
		if err := pq.loadVariations(ctx, query, nodes,
			func(n *Product) { n.appendNamedVariations(name) },
			func(n *Product, e *ProductVariation) { n.appendNamedVariations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedCommissionStructure {
		if err := pq.loadCommissionStructure(ctx, query, nodes,
			func(n *Product) { n.appendNamedCommissionStructure(name) },
			func(n *Product, e *CommissionStructure) { n.appendNamedCommissionStructure(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedShop {
		if err := pq.loadShop(ctx, query, nodes,
			func(n *Product) { n.appendNamedShop(name) },
			func(n *Product, e *Shop) { n.appendNamedShop(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedGroupBuys {
		if err := pq.loadGroupBuys(ctx, query, nodes,
			func(n *Product) { n.appendNamedGroupBuys(name) },
			func(n *Product, e *GroupBuy) { n.appendNamedGroupBuys(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedProductPageViews {
		if err := pq.loadProductPageViews(ctx, query, nodes,
			func(n *Product) { n.appendNamedProductPageViews(name) },
			func(n *Product, e *ProductPageView) { n.appendNamedProductPageViews(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedBlogPosts {
		if err := pq.loadBlogPosts(ctx, query, nodes,
			func(n *Product) { n.appendNamedBlogPosts(name) },
			func(n *Product, e *BlogPost) { n.appendNamedBlogPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedMarketingCampaigns {
		if err := pq.loadMarketingCampaigns(ctx, query, nodes,
			func(n *Product) { n.appendNamedMarketingCampaigns(name) },
			func(n *Product, e *MarketingCampaign) { n.appendNamedMarketingCampaigns(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedChats {
		if err := pq.loadChats(ctx, query, nodes,
			func(n *Product) { n.appendNamedChats(name) },
			func(n *Product, e *Chat) { n.appendNamedChats(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedEmailCampaign {
		if err := pq.loadEmailCampaign(ctx, query, nodes,
			func(n *Product) { n.appendNamedEmailCampaign(name) },
			func(n *Product, e *EmailCampaign) { n.appendNamedEmailCampaign(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProductQuery) loadProductSeller(ctx context.Context, query *UserSellerQuery, nodes []*Product, init func(*Product), assign func(*Product, *UserSeller)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserSeller(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ProductSellerColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_product_seller
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_product_seller" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_product_seller" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*Product, init func(*Product), assign func(*Product, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ReviewsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_reviews
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_reviews" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_reviews" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadImages(ctx context.Context, query *ImageQuery, nodes []*Product, init func(*Product), assign func(*Product, *Image)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Image(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ImagesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_images
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_images" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_images" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadCategories(ctx context.Context, query *CategoryQuery, nodes []*Product, init func(*Product), assign func(*Product, *Category)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Category(func(s *sql.Selector) {
		s.Where(sql.InValues(product.CategoriesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_categories
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_categories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_categories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadTags(ctx context.Context, query *TagQuery, nodes []*Product, init func(*Product), assign func(*Product, *Tag)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Tag(func(s *sql.Selector) {
		s.Where(sql.InValues(product.TagsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_tags
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_tags" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_tags" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadProductAttributes(ctx context.Context, query *ProductAttributeQuery, nodes []*Product, init func(*Product), assign func(*Product, *ProductAttribute)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProductAttribute(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ProductAttributesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_product_attributes
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_product_attributes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_product_attributes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadVariations(ctx context.Context, query *ProductVariationQuery, nodes []*Product, init func(*Product), assign func(*Product, *ProductVariation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProductVariation(func(s *sql.Selector) {
		s.Where(sql.InValues(product.VariationsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_variations
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_variations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_variations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadCommissionStructure(ctx context.Context, query *CommissionStructureQuery, nodes []*Product, init func(*Product), assign func(*Product, *CommissionStructure)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CommissionStructure(func(s *sql.Selector) {
		s.Where(sql.InValues(product.CommissionStructureColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_commission_structure
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_commission_structure" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_commission_structure" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadShop(ctx context.Context, query *ShopQuery, nodes []*Product, init func(*Product), assign func(*Product, *Shop)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ShopColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_shop
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_shop" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_shop" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadGroupBuys(ctx context.Context, query *GroupBuyQuery, nodes []*Product, init func(*Product), assign func(*Product, *GroupBuy)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GroupBuy(func(s *sql.Selector) {
		s.Where(sql.InValues(product.GroupBuysColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_group_buys
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_group_buys" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_group_buys" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadProductPageViews(ctx context.Context, query *ProductPageViewQuery, nodes []*Product, init func(*Product), assign func(*Product, *ProductPageView)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProductPageView(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ProductPageViewsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_product_page_views
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_product_page_views" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_product_page_views" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadBlogPosts(ctx context.Context, query *BlogPostQuery, nodes []*Product, init func(*Product), assign func(*Product, *BlogPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BlogPost(func(s *sql.Selector) {
		s.Where(sql.InValues(product.BlogPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_blog_posts
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_blog_posts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_blog_posts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadMarketingCampaigns(ctx context.Context, query *MarketingCampaignQuery, nodes []*Product, init func(*Product), assign func(*Product, *MarketingCampaign)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MarketingCampaign(func(s *sql.Selector) {
		s.Where(sql.InValues(product.MarketingCampaignsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_marketing_campaigns
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_marketing_campaigns" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_marketing_campaigns" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadChats(ctx context.Context, query *ChatQuery, nodes []*Product, init func(*Product), assign func(*Product, *Chat)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.InValues(product.ChatsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_chats
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_chats" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_chats" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductQuery) loadEmailCampaign(ctx context.Context, query *EmailCampaignQuery, nodes []*Product, init func(*Product), assign func(*Product, *EmailCampaign)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Product)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EmailCampaign(func(s *sql.Selector) {
		s.Where(sql.InValues(product.EmailCampaignColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_email_campaign
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_email_campaign" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_email_campaign" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *ProductQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProductQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for i := range fields {
			if fields[i] != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProductQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(product.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = product.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProductSeller tells the query-builder to eager-load the nodes that are connected to the "productSeller"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedProductSeller(name string, opts ...func(*UserSellerQuery)) *ProductQuery {
	query := (&UserSellerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedProductSeller == nil {
		pq.withNamedProductSeller = make(map[string]*UserSellerQuery)
	}
	pq.withNamedProductSeller[name] = query
	return pq
}

// WithNamedReviews tells the query-builder to eager-load the nodes that are connected to the "reviews"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedReviews(name string, opts ...func(*ReviewQuery)) *ProductQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedReviews == nil {
		pq.withNamedReviews = make(map[string]*ReviewQuery)
	}
	pq.withNamedReviews[name] = query
	return pq
}

// WithNamedImages tells the query-builder to eager-load the nodes that are connected to the "images"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedImages(name string, opts ...func(*ImageQuery)) *ProductQuery {
	query := (&ImageClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedImages == nil {
		pq.withNamedImages = make(map[string]*ImageQuery)
	}
	pq.withNamedImages[name] = query
	return pq
}

// WithNamedCategories tells the query-builder to eager-load the nodes that are connected to the "categories"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedCategories(name string, opts ...func(*CategoryQuery)) *ProductQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedCategories == nil {
		pq.withNamedCategories = make(map[string]*CategoryQuery)
	}
	pq.withNamedCategories[name] = query
	return pq
}

// WithNamedTags tells the query-builder to eager-load the nodes that are connected to the "tags"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedTags(name string, opts ...func(*TagQuery)) *ProductQuery {
	query := (&TagClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedTags == nil {
		pq.withNamedTags = make(map[string]*TagQuery)
	}
	pq.withNamedTags[name] = query
	return pq
}

// WithNamedProductAttributes tells the query-builder to eager-load the nodes that are connected to the "productAttributes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedProductAttributes(name string, opts ...func(*ProductAttributeQuery)) *ProductQuery {
	query := (&ProductAttributeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedProductAttributes == nil {
		pq.withNamedProductAttributes = make(map[string]*ProductAttributeQuery)
	}
	pq.withNamedProductAttributes[name] = query
	return pq
}

// WithNamedVariations tells the query-builder to eager-load the nodes that are connected to the "variations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedVariations(name string, opts ...func(*ProductVariationQuery)) *ProductQuery {
	query := (&ProductVariationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedVariations == nil {
		pq.withNamedVariations = make(map[string]*ProductVariationQuery)
	}
	pq.withNamedVariations[name] = query
	return pq
}

// WithNamedCommissionStructure tells the query-builder to eager-load the nodes that are connected to the "commissionStructure"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedCommissionStructure(name string, opts ...func(*CommissionStructureQuery)) *ProductQuery {
	query := (&CommissionStructureClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedCommissionStructure == nil {
		pq.withNamedCommissionStructure = make(map[string]*CommissionStructureQuery)
	}
	pq.withNamedCommissionStructure[name] = query
	return pq
}

// WithNamedShop tells the query-builder to eager-load the nodes that are connected to the "shop"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedShop(name string, opts ...func(*ShopQuery)) *ProductQuery {
	query := (&ShopClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedShop == nil {
		pq.withNamedShop = make(map[string]*ShopQuery)
	}
	pq.withNamedShop[name] = query
	return pq
}

// WithNamedGroupBuys tells the query-builder to eager-load the nodes that are connected to the "groupBuys"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedGroupBuys(name string, opts ...func(*GroupBuyQuery)) *ProductQuery {
	query := (&GroupBuyClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedGroupBuys == nil {
		pq.withNamedGroupBuys = make(map[string]*GroupBuyQuery)
	}
	pq.withNamedGroupBuys[name] = query
	return pq
}

// WithNamedProductPageViews tells the query-builder to eager-load the nodes that are connected to the "productPageViews"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedProductPageViews(name string, opts ...func(*ProductPageViewQuery)) *ProductQuery {
	query := (&ProductPageViewClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedProductPageViews == nil {
		pq.withNamedProductPageViews = make(map[string]*ProductPageViewQuery)
	}
	pq.withNamedProductPageViews[name] = query
	return pq
}

// WithNamedBlogPosts tells the query-builder to eager-load the nodes that are connected to the "blogPosts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedBlogPosts(name string, opts ...func(*BlogPostQuery)) *ProductQuery {
	query := (&BlogPostClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedBlogPosts == nil {
		pq.withNamedBlogPosts = make(map[string]*BlogPostQuery)
	}
	pq.withNamedBlogPosts[name] = query
	return pq
}

// WithNamedMarketingCampaigns tells the query-builder to eager-load the nodes that are connected to the "marketingCampaigns"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedMarketingCampaigns(name string, opts ...func(*MarketingCampaignQuery)) *ProductQuery {
	query := (&MarketingCampaignClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedMarketingCampaigns == nil {
		pq.withNamedMarketingCampaigns = make(map[string]*MarketingCampaignQuery)
	}
	pq.withNamedMarketingCampaigns[name] = query
	return pq
}

// WithNamedChats tells the query-builder to eager-load the nodes that are connected to the "chats"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedChats(name string, opts ...func(*ChatQuery)) *ProductQuery {
	query := (&ChatClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedChats == nil {
		pq.withNamedChats = make(map[string]*ChatQuery)
	}
	pq.withNamedChats[name] = query
	return pq
}

// WithNamedEmailCampaign tells the query-builder to eager-load the nodes that are connected to the "emailCampaign"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithNamedEmailCampaign(name string, opts ...func(*EmailCampaignQuery)) *ProductQuery {
	query := (&EmailCampaignClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedEmailCampaign == nil {
		pq.withNamedEmailCampaign = make(map[string]*EmailCampaignQuery)
	}
	pq.withNamedEmailCampaign[name] = query
	return pq
}

// ProductGroupBy is the group-by builder for Product entities.
type ProductGroupBy struct {
	selector
	build *ProductQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProductGroupBy) Aggregate(fns ...AggregateFunc) *ProductGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProductGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductQuery, *ProductGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProductGroupBy) sqlScan(ctx context.Context, root *ProductQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductSelect is the builder for selecting fields of Product entities.
type ProductSelect struct {
	*ProductQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProductSelect) Aggregate(fns ...AggregateFunc) *ProductSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProductSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductQuery, *ProductSelect](ctx, ps.ProductQuery, ps, ps.inters, v)
}

func (ps *ProductSelect) sqlScan(ctx context.Context, root *ProductQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
