// Code generated by ent, DO NOT EDIT.

package herocontent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the herocontent type in the database.
	Label = "hero_content"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrimaryMessage holds the string denoting the primarymessage field in the database.
	FieldPrimaryMessage = "primary_message"
	// FieldSecondaryMessage holds the string denoting the secondarymessage field in the database.
	FieldSecondaryMessage = "secondary_message"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// Table holds the table name of the herocontent in the database.
	Table = "hero_contents"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "hero_content_image"
)

// Columns holds all SQL columns for herocontent fields.
var Columns = []string{
	FieldID,
	FieldPrimaryMessage,
	FieldSecondaryMessage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hero_contents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_page_view_hero_content",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the HeroContent queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrimaryMessage orders the results by the primaryMessage field.
func ByPrimaryMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPrimaryMessage, opts...).ToFunc()
}

// BySecondaryMessage orders the results by the secondaryMessage field.
func BySecondaryMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSecondaryMessage, opts...).ToFunc()
}

// ByImageCount orders the results by image count.
func ByImageCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImageStep(), opts...)
	}
}

// ByImage orders the results by image terms.
func ByImage(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImageTable, ImageColumn),
	)
}
