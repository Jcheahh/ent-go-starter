// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/herocontent"
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeroContentDelete is the builder for deleting a HeroContent entity.
type HeroContentDelete struct {
	config
	hooks    []Hook
	mutation *HeroContentMutation
}

// Where appends a list predicates to the HeroContentDelete builder.
func (hcd *HeroContentDelete) Where(ps ...predicate.HeroContent) *HeroContentDelete {
	hcd.mutation.Where(ps...)
	return hcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hcd *HeroContentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HeroContentMutation](ctx, hcd.sqlExec, hcd.mutation, hcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hcd *HeroContentDelete) ExecX(ctx context.Context) int {
	n, err := hcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hcd *HeroContentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(herocontent.Table, sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt))
	if ps := hcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hcd.mutation.done = true
	return affected, err
}

// HeroContentDeleteOne is the builder for deleting a single HeroContent entity.
type HeroContentDeleteOne struct {
	hcd *HeroContentDelete
}

// Where appends a list predicates to the HeroContentDelete builder.
func (hcdo *HeroContentDeleteOne) Where(ps ...predicate.HeroContent) *HeroContentDeleteOne {
	hcdo.hcd.mutation.Where(ps...)
	return hcdo
}

// Exec executes the deletion query.
func (hcdo *HeroContentDeleteOne) Exec(ctx context.Context) error {
	n, err := hcdo.hcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{herocontent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hcdo *HeroContentDeleteOne) ExecX(ctx context.Context) {
	if err := hcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
