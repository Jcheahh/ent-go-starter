// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/linkvisit"
	"entdemo/ent/predicate"
	"entdemo/ent/referrallink"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReferralLinkUpdate is the builder for updating ReferralLink entities.
type ReferralLinkUpdate struct {
	config
	hooks    []Hook
	mutation *ReferralLinkMutation
}

// Where appends a list predicates to the ReferralLinkUpdate builder.
func (rlu *ReferralLinkUpdate) Where(ps ...predicate.ReferralLink) *ReferralLinkUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetXid sets the "xid" field.
func (rlu *ReferralLinkUpdate) SetXid(i int) *ReferralLinkUpdate {
	rlu.mutation.ResetXid()
	rlu.mutation.SetXid(i)
	return rlu
}

// AddXid adds i to the "xid" field.
func (rlu *ReferralLinkUpdate) AddXid(i int) *ReferralLinkUpdate {
	rlu.mutation.AddXid(i)
	return rlu
}

// SetName sets the "name" field.
func (rlu *ReferralLinkUpdate) SetName(s string) *ReferralLinkUpdate {
	rlu.mutation.SetName(s)
	return rlu
}

// SetDescription sets the "description" field.
func (rlu *ReferralLinkUpdate) SetDescription(s string) *ReferralLinkUpdate {
	rlu.mutation.SetDescription(s)
	return rlu
}

// SetLink sets the "link" field.
func (rlu *ReferralLinkUpdate) SetLink(s string) *ReferralLinkUpdate {
	rlu.mutation.SetLink(s)
	return rlu
}

// AddVisitIDs adds the "visits" edge to the LinkVisit entity by IDs.
func (rlu *ReferralLinkUpdate) AddVisitIDs(ids ...int) *ReferralLinkUpdate {
	rlu.mutation.AddVisitIDs(ids...)
	return rlu
}

// AddVisits adds the "visits" edges to the LinkVisit entity.
func (rlu *ReferralLinkUpdate) AddVisits(l ...*LinkVisit) *ReferralLinkUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rlu.AddVisitIDs(ids...)
}

// Mutation returns the ReferralLinkMutation object of the builder.
func (rlu *ReferralLinkUpdate) Mutation() *ReferralLinkMutation {
	return rlu.mutation
}

// ClearVisits clears all "visits" edges to the LinkVisit entity.
func (rlu *ReferralLinkUpdate) ClearVisits() *ReferralLinkUpdate {
	rlu.mutation.ClearVisits()
	return rlu
}

// RemoveVisitIDs removes the "visits" edge to LinkVisit entities by IDs.
func (rlu *ReferralLinkUpdate) RemoveVisitIDs(ids ...int) *ReferralLinkUpdate {
	rlu.mutation.RemoveVisitIDs(ids...)
	return rlu
}

// RemoveVisits removes "visits" edges to LinkVisit entities.
func (rlu *ReferralLinkUpdate) RemoveVisits(l ...*LinkVisit) *ReferralLinkUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rlu.RemoveVisitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *ReferralLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReferralLinkMutation](ctx, rlu.sqlSave, rlu.mutation, rlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *ReferralLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *ReferralLinkUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *ReferralLinkUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rlu *ReferralLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(referrallink.Table, referrallink.Columns, sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt))
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.Xid(); ok {
		_spec.SetField(referrallink.FieldXid, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.AddedXid(); ok {
		_spec.AddField(referrallink.FieldXid, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.Name(); ok {
		_spec.SetField(referrallink.FieldName, field.TypeString, value)
	}
	if value, ok := rlu.mutation.Description(); ok {
		_spec.SetField(referrallink.FieldDescription, field.TypeString, value)
	}
	if value, ok := rlu.mutation.Link(); ok {
		_spec.SetField(referrallink.FieldLink, field.TypeString, value)
	}
	if rlu.mutation.VisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.RemovedVisitsIDs(); len(nodes) > 0 && !rlu.mutation.VisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.VisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referrallink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rlu.mutation.done = true
	return n, nil
}

// ReferralLinkUpdateOne is the builder for updating a single ReferralLink entity.
type ReferralLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReferralLinkMutation
}

// SetXid sets the "xid" field.
func (rluo *ReferralLinkUpdateOne) SetXid(i int) *ReferralLinkUpdateOne {
	rluo.mutation.ResetXid()
	rluo.mutation.SetXid(i)
	return rluo
}

// AddXid adds i to the "xid" field.
func (rluo *ReferralLinkUpdateOne) AddXid(i int) *ReferralLinkUpdateOne {
	rluo.mutation.AddXid(i)
	return rluo
}

// SetName sets the "name" field.
func (rluo *ReferralLinkUpdateOne) SetName(s string) *ReferralLinkUpdateOne {
	rluo.mutation.SetName(s)
	return rluo
}

// SetDescription sets the "description" field.
func (rluo *ReferralLinkUpdateOne) SetDescription(s string) *ReferralLinkUpdateOne {
	rluo.mutation.SetDescription(s)
	return rluo
}

// SetLink sets the "link" field.
func (rluo *ReferralLinkUpdateOne) SetLink(s string) *ReferralLinkUpdateOne {
	rluo.mutation.SetLink(s)
	return rluo
}

// AddVisitIDs adds the "visits" edge to the LinkVisit entity by IDs.
func (rluo *ReferralLinkUpdateOne) AddVisitIDs(ids ...int) *ReferralLinkUpdateOne {
	rluo.mutation.AddVisitIDs(ids...)
	return rluo
}

// AddVisits adds the "visits" edges to the LinkVisit entity.
func (rluo *ReferralLinkUpdateOne) AddVisits(l ...*LinkVisit) *ReferralLinkUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rluo.AddVisitIDs(ids...)
}

// Mutation returns the ReferralLinkMutation object of the builder.
func (rluo *ReferralLinkUpdateOne) Mutation() *ReferralLinkMutation {
	return rluo.mutation
}

// ClearVisits clears all "visits" edges to the LinkVisit entity.
func (rluo *ReferralLinkUpdateOne) ClearVisits() *ReferralLinkUpdateOne {
	rluo.mutation.ClearVisits()
	return rluo
}

// RemoveVisitIDs removes the "visits" edge to LinkVisit entities by IDs.
func (rluo *ReferralLinkUpdateOne) RemoveVisitIDs(ids ...int) *ReferralLinkUpdateOne {
	rluo.mutation.RemoveVisitIDs(ids...)
	return rluo
}

// RemoveVisits removes "visits" edges to LinkVisit entities.
func (rluo *ReferralLinkUpdateOne) RemoveVisits(l ...*LinkVisit) *ReferralLinkUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rluo.RemoveVisitIDs(ids...)
}

// Where appends a list predicates to the ReferralLinkUpdate builder.
func (rluo *ReferralLinkUpdateOne) Where(ps ...predicate.ReferralLink) *ReferralLinkUpdateOne {
	rluo.mutation.Where(ps...)
	return rluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *ReferralLinkUpdateOne) Select(field string, fields ...string) *ReferralLinkUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated ReferralLink entity.
func (rluo *ReferralLinkUpdateOne) Save(ctx context.Context) (*ReferralLink, error) {
	return withHooks[*ReferralLink, ReferralLinkMutation](ctx, rluo.sqlSave, rluo.mutation, rluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *ReferralLinkUpdateOne) SaveX(ctx context.Context) *ReferralLink {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *ReferralLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *ReferralLinkUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rluo *ReferralLinkUpdateOne) sqlSave(ctx context.Context) (_node *ReferralLink, err error) {
	_spec := sqlgraph.NewUpdateSpec(referrallink.Table, referrallink.Columns, sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt))
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReferralLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, referrallink.FieldID)
		for _, f := range fields {
			if !referrallink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != referrallink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.Xid(); ok {
		_spec.SetField(referrallink.FieldXid, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.AddedXid(); ok {
		_spec.AddField(referrallink.FieldXid, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.Name(); ok {
		_spec.SetField(referrallink.FieldName, field.TypeString, value)
	}
	if value, ok := rluo.mutation.Description(); ok {
		_spec.SetField(referrallink.FieldDescription, field.TypeString, value)
	}
	if value, ok := rluo.mutation.Link(); ok {
		_spec.SetField(referrallink.FieldLink, field.TypeString, value)
	}
	if rluo.mutation.VisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.RemovedVisitsIDs(); len(nodes) > 0 && !rluo.mutation.VisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.VisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReferralLink{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referrallink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rluo.mutation.done = true
	return _node, nil
}
