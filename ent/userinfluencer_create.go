// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/product"
	"entdemo/ent/referrallink"
	"entdemo/ent/review"
	"entdemo/ent/tag"
	"entdemo/ent/user"
	"entdemo/ent/userinfluencer"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInfluencerCreate is the builder for creating a UserInfluencer entity.
type UserInfluencerCreate struct {
	config
	mutation *UserInfluencerMutation
	hooks    []Hook
}

// SetPlaceholder sets the "placeholder" field.
func (uic *UserInfluencerCreate) SetPlaceholder(i int) *UserInfluencerCreate {
	uic.mutation.SetPlaceholder(i)
	return uic
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (uic *UserInfluencerCreate) SetNillablePlaceholder(i *int) *UserInfluencerCreate {
	if i != nil {
		uic.SetPlaceholder(*i)
	}
	return uic
}

// AddUserProfileIDs adds the "userProfile" edge to the User entity by IDs.
func (uic *UserInfluencerCreate) AddUserProfileIDs(ids ...int) *UserInfluencerCreate {
	uic.mutation.AddUserProfileIDs(ids...)
	return uic
}

// AddUserProfile adds the "userProfile" edges to the User entity.
func (uic *UserInfluencerCreate) AddUserProfile(u ...*User) *UserInfluencerCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uic.AddUserProfileIDs(ids...)
}

// AddReferralLinkIDs adds the "referralLinks" edge to the ReferralLink entity by IDs.
func (uic *UserInfluencerCreate) AddReferralLinkIDs(ids ...int) *UserInfluencerCreate {
	uic.mutation.AddReferralLinkIDs(ids...)
	return uic
}

// AddReferralLinks adds the "referralLinks" edges to the ReferralLink entity.
func (uic *UserInfluencerCreate) AddReferralLinks(r ...*ReferralLink) *UserInfluencerCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uic.AddReferralLinkIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (uic *UserInfluencerCreate) AddReviewIDs(ids ...int) *UserInfluencerCreate {
	uic.mutation.AddReviewIDs(ids...)
	return uic
}

// AddReviews adds the "reviews" edges to the Review entity.
func (uic *UserInfluencerCreate) AddReviews(r ...*Review) *UserInfluencerCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uic.AddReviewIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (uic *UserInfluencerCreate) AddProductIDs(ids ...int) *UserInfluencerCreate {
	uic.mutation.AddProductIDs(ids...)
	return uic
}

// AddProducts adds the "products" edges to the Product entity.
func (uic *UserInfluencerCreate) AddProducts(p ...*Product) *UserInfluencerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uic.AddProductIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (uic *UserInfluencerCreate) AddTagIDs(ids ...int) *UserInfluencerCreate {
	uic.mutation.AddTagIDs(ids...)
	return uic
}

// AddTags adds the "tags" edges to the Tag entity.
func (uic *UserInfluencerCreate) AddTags(t ...*Tag) *UserInfluencerCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uic.AddTagIDs(ids...)
}

// Mutation returns the UserInfluencerMutation object of the builder.
func (uic *UserInfluencerCreate) Mutation() *UserInfluencerMutation {
	return uic.mutation
}

// Save creates the UserInfluencer in the database.
func (uic *UserInfluencerCreate) Save(ctx context.Context) (*UserInfluencer, error) {
	return withHooks[*UserInfluencer, UserInfluencerMutation](ctx, uic.sqlSave, uic.mutation, uic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uic *UserInfluencerCreate) SaveX(ctx context.Context) *UserInfluencer {
	v, err := uic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uic *UserInfluencerCreate) Exec(ctx context.Context) error {
	_, err := uic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uic *UserInfluencerCreate) ExecX(ctx context.Context) {
	if err := uic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uic *UserInfluencerCreate) check() error {
	return nil
}

func (uic *UserInfluencerCreate) sqlSave(ctx context.Context) (*UserInfluencer, error) {
	if err := uic.check(); err != nil {
		return nil, err
	}
	_node, _spec := uic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uic.mutation.id = &_node.ID
	uic.mutation.done = true
	return _node, nil
}

func (uic *UserInfluencerCreate) createSpec() (*UserInfluencer, *sqlgraph.CreateSpec) {
	var (
		_node = &UserInfluencer{config: uic.config}
		_spec = sqlgraph.NewCreateSpec(userinfluencer.Table, sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt))
	)
	if value, ok := uic.mutation.Placeholder(); ok {
		_spec.SetField(userinfluencer.FieldPlaceholder, field.TypeInt, value)
		_node.Placeholder = value
	}
	if nodes := uic.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uic.mutation.ReferralLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uic.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uic.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uic.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserInfluencerCreateBulk is the builder for creating many UserInfluencer entities in bulk.
type UserInfluencerCreateBulk struct {
	config
	builders []*UserInfluencerCreate
}

// Save creates the UserInfluencer entities in the database.
func (uicb *UserInfluencerCreateBulk) Save(ctx context.Context) ([]*UserInfluencer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uicb.builders))
	nodes := make([]*UserInfluencer, len(uicb.builders))
	mutators := make([]Mutator, len(uicb.builders))
	for i := range uicb.builders {
		func(i int, root context.Context) {
			builder := uicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserInfluencerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uicb *UserInfluencerCreateBulk) SaveX(ctx context.Context) []*UserInfluencer {
	v, err := uicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uicb *UserInfluencerCreateBulk) Exec(ctx context.Context) error {
	_, err := uicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicb *UserInfluencerCreateBulk) ExecX(ctx context.Context) {
	if err := uicb.Exec(ctx); err != nil {
		panic(err)
	}
}
