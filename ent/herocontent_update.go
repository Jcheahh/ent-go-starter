// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/herocontent"
	"entdemo/ent/image"
	"entdemo/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeroContentUpdate is the builder for updating HeroContent entities.
type HeroContentUpdate struct {
	config
	hooks    []Hook
	mutation *HeroContentMutation
}

// Where appends a list predicates to the HeroContentUpdate builder.
func (hcu *HeroContentUpdate) Where(ps ...predicate.HeroContent) *HeroContentUpdate {
	hcu.mutation.Where(ps...)
	return hcu
}

// SetPrimaryMessage sets the "primaryMessage" field.
func (hcu *HeroContentUpdate) SetPrimaryMessage(s string) *HeroContentUpdate {
	hcu.mutation.SetPrimaryMessage(s)
	return hcu
}

// SetSecondaryMessage sets the "secondaryMessage" field.
func (hcu *HeroContentUpdate) SetSecondaryMessage(s string) *HeroContentUpdate {
	hcu.mutation.SetSecondaryMessage(s)
	return hcu
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (hcu *HeroContentUpdate) AddImageIDs(ids ...int) *HeroContentUpdate {
	hcu.mutation.AddImageIDs(ids...)
	return hcu
}

// AddImage adds the "image" edges to the Image entity.
func (hcu *HeroContentUpdate) AddImage(i ...*Image) *HeroContentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hcu.AddImageIDs(ids...)
}

// Mutation returns the HeroContentMutation object of the builder.
func (hcu *HeroContentUpdate) Mutation() *HeroContentMutation {
	return hcu.mutation
}

// ClearImage clears all "image" edges to the Image entity.
func (hcu *HeroContentUpdate) ClearImage() *HeroContentUpdate {
	hcu.mutation.ClearImage()
	return hcu
}

// RemoveImageIDs removes the "image" edge to Image entities by IDs.
func (hcu *HeroContentUpdate) RemoveImageIDs(ids ...int) *HeroContentUpdate {
	hcu.mutation.RemoveImageIDs(ids...)
	return hcu
}

// RemoveImage removes "image" edges to Image entities.
func (hcu *HeroContentUpdate) RemoveImage(i ...*Image) *HeroContentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hcu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hcu *HeroContentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HeroContentMutation](ctx, hcu.sqlSave, hcu.mutation, hcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hcu *HeroContentUpdate) SaveX(ctx context.Context) int {
	affected, err := hcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hcu *HeroContentUpdate) Exec(ctx context.Context) error {
	_, err := hcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcu *HeroContentUpdate) ExecX(ctx context.Context) {
	if err := hcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hcu *HeroContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(herocontent.Table, herocontent.Columns, sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt))
	if ps := hcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcu.mutation.PrimaryMessage(); ok {
		_spec.SetField(herocontent.FieldPrimaryMessage, field.TypeString, value)
	}
	if value, ok := hcu.mutation.SecondaryMessage(); ok {
		_spec.SetField(herocontent.FieldSecondaryMessage, field.TypeString, value)
	}
	if hcu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hcu.mutation.RemovedImageIDs(); len(nodes) > 0 && !hcu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hcu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{herocontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hcu.mutation.done = true
	return n, nil
}

// HeroContentUpdateOne is the builder for updating a single HeroContent entity.
type HeroContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HeroContentMutation
}

// SetPrimaryMessage sets the "primaryMessage" field.
func (hcuo *HeroContentUpdateOne) SetPrimaryMessage(s string) *HeroContentUpdateOne {
	hcuo.mutation.SetPrimaryMessage(s)
	return hcuo
}

// SetSecondaryMessage sets the "secondaryMessage" field.
func (hcuo *HeroContentUpdateOne) SetSecondaryMessage(s string) *HeroContentUpdateOne {
	hcuo.mutation.SetSecondaryMessage(s)
	return hcuo
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (hcuo *HeroContentUpdateOne) AddImageIDs(ids ...int) *HeroContentUpdateOne {
	hcuo.mutation.AddImageIDs(ids...)
	return hcuo
}

// AddImage adds the "image" edges to the Image entity.
func (hcuo *HeroContentUpdateOne) AddImage(i ...*Image) *HeroContentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hcuo.AddImageIDs(ids...)
}

// Mutation returns the HeroContentMutation object of the builder.
func (hcuo *HeroContentUpdateOne) Mutation() *HeroContentMutation {
	return hcuo.mutation
}

// ClearImage clears all "image" edges to the Image entity.
func (hcuo *HeroContentUpdateOne) ClearImage() *HeroContentUpdateOne {
	hcuo.mutation.ClearImage()
	return hcuo
}

// RemoveImageIDs removes the "image" edge to Image entities by IDs.
func (hcuo *HeroContentUpdateOne) RemoveImageIDs(ids ...int) *HeroContentUpdateOne {
	hcuo.mutation.RemoveImageIDs(ids...)
	return hcuo
}

// RemoveImage removes "image" edges to Image entities.
func (hcuo *HeroContentUpdateOne) RemoveImage(i ...*Image) *HeroContentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hcuo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the HeroContentUpdate builder.
func (hcuo *HeroContentUpdateOne) Where(ps ...predicate.HeroContent) *HeroContentUpdateOne {
	hcuo.mutation.Where(ps...)
	return hcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hcuo *HeroContentUpdateOne) Select(field string, fields ...string) *HeroContentUpdateOne {
	hcuo.fields = append([]string{field}, fields...)
	return hcuo
}

// Save executes the query and returns the updated HeroContent entity.
func (hcuo *HeroContentUpdateOne) Save(ctx context.Context) (*HeroContent, error) {
	return withHooks[*HeroContent, HeroContentMutation](ctx, hcuo.sqlSave, hcuo.mutation, hcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hcuo *HeroContentUpdateOne) SaveX(ctx context.Context) *HeroContent {
	node, err := hcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hcuo *HeroContentUpdateOne) Exec(ctx context.Context) error {
	_, err := hcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcuo *HeroContentUpdateOne) ExecX(ctx context.Context) {
	if err := hcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hcuo *HeroContentUpdateOne) sqlSave(ctx context.Context) (_node *HeroContent, err error) {
	_spec := sqlgraph.NewUpdateSpec(herocontent.Table, herocontent.Columns, sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt))
	id, ok := hcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HeroContent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, herocontent.FieldID)
		for _, f := range fields {
			if !herocontent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != herocontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcuo.mutation.PrimaryMessage(); ok {
		_spec.SetField(herocontent.FieldPrimaryMessage, field.TypeString, value)
	}
	if value, ok := hcuo.mutation.SecondaryMessage(); ok {
		_spec.SetField(herocontent.FieldSecondaryMessage, field.TypeString, value)
	}
	if hcuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hcuo.mutation.RemovedImageIDs(); len(nodes) > 0 && !hcuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hcuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HeroContent{config: hcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{herocontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hcuo.mutation.done = true
	return _node, nil
}
