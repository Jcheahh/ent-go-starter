// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/groupbuy"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GroupBuy is the model entity for the GroupBuy schema.
type GroupBuy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// ProductPrice holds the value of the "productPrice" field.
	ProductPrice int `json:"productPrice,omitempty"`
	// Moq holds the value of the "moq" field.
	Moq int `json:"moq,omitempty"`
	// StartDate holds the value of the "startDate" field.
	StartDate string `json:"startDate,omitempty"`
	// EndDate holds the value of the "endDate" field.
	EndDate string `json:"endDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupBuyQuery when eager-loading is set.
	Edges              GroupBuyEdges `json:"edges"`
	product_group_buys *int
	selectValues       sql.SelectValues
}

// GroupBuyEdges holds the relations/edges for other nodes in the graph.
type GroupBuyEdges struct {
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// Transaction holds the value of the transaction edge.
	Transaction []*Transaction `json:"transaction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedProduct     map[string][]*Product
	namedTransaction map[string][]*Transaction
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e GroupBuyEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading.
func (e GroupBuyEdges) TransactionOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transaction, nil
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupBuy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupbuy.FieldID, groupbuy.FieldProductPrice, groupbuy.FieldMoq:
			values[i] = new(sql.NullInt64)
		case groupbuy.FieldDateCreated, groupbuy.FieldStartDate, groupbuy.FieldEndDate:
			values[i] = new(sql.NullString)
		case groupbuy.ForeignKeys[0]: // product_group_buys
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupBuy fields.
func (gb *GroupBuy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupbuy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gb.ID = int(value.Int64)
		case groupbuy.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				gb.DateCreated = value.String
			}
		case groupbuy.FieldProductPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field productPrice", values[i])
			} else if value.Valid {
				gb.ProductPrice = int(value.Int64)
			}
		case groupbuy.FieldMoq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field moq", values[i])
			} else if value.Valid {
				gb.Moq = int(value.Int64)
			}
		case groupbuy.FieldStartDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field startDate", values[i])
			} else if value.Valid {
				gb.StartDate = value.String
			}
		case groupbuy.FieldEndDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endDate", values[i])
			} else if value.Valid {
				gb.EndDate = value.String
			}
		case groupbuy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_group_buys", value)
			} else if value.Valid {
				gb.product_group_buys = new(int)
				*gb.product_group_buys = int(value.Int64)
			}
		default:
			gb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupBuy.
// This includes values selected through modifiers, order, etc.
func (gb *GroupBuy) Value(name string) (ent.Value, error) {
	return gb.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the GroupBuy entity.
func (gb *GroupBuy) QueryProduct() *ProductQuery {
	return NewGroupBuyClient(gb.config).QueryProduct(gb)
}

// QueryTransaction queries the "transaction" edge of the GroupBuy entity.
func (gb *GroupBuy) QueryTransaction() *TransactionQuery {
	return NewGroupBuyClient(gb.config).QueryTransaction(gb)
}

// Update returns a builder for updating this GroupBuy.
// Note that you need to call GroupBuy.Unwrap() before calling this method if this GroupBuy
// was returned from a transaction, and the transaction was committed or rolled back.
func (gb *GroupBuy) Update() *GroupBuyUpdateOne {
	return NewGroupBuyClient(gb.config).UpdateOne(gb)
}

// Unwrap unwraps the GroupBuy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gb *GroupBuy) Unwrap() *GroupBuy {
	_tx, ok := gb.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupBuy is not a transactional entity")
	}
	gb.config.driver = _tx.drv
	return gb
}

// String implements the fmt.Stringer.
func (gb *GroupBuy) String() string {
	var builder strings.Builder
	builder.WriteString("GroupBuy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gb.ID))
	builder.WriteString("dateCreated=")
	builder.WriteString(gb.DateCreated)
	builder.WriteString(", ")
	builder.WriteString("productPrice=")
	builder.WriteString(fmt.Sprintf("%v", gb.ProductPrice))
	builder.WriteString(", ")
	builder.WriteString("moq=")
	builder.WriteString(fmt.Sprintf("%v", gb.Moq))
	builder.WriteString(", ")
	builder.WriteString("startDate=")
	builder.WriteString(gb.StartDate)
	builder.WriteString(", ")
	builder.WriteString("endDate=")
	builder.WriteString(gb.EndDate)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProduct returns the Product named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gb *GroupBuy) NamedProduct(name string) ([]*Product, error) {
	if gb.Edges.namedProduct == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gb.Edges.namedProduct[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gb *GroupBuy) appendNamedProduct(name string, edges ...*Product) {
	if gb.Edges.namedProduct == nil {
		gb.Edges.namedProduct = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		gb.Edges.namedProduct[name] = []*Product{}
	} else {
		gb.Edges.namedProduct[name] = append(gb.Edges.namedProduct[name], edges...)
	}
}

// NamedTransaction returns the Transaction named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gb *GroupBuy) NamedTransaction(name string) ([]*Transaction, error) {
	if gb.Edges.namedTransaction == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gb.Edges.namedTransaction[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gb *GroupBuy) appendNamedTransaction(name string, edges ...*Transaction) {
	if gb.Edges.namedTransaction == nil {
		gb.Edges.namedTransaction = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		gb.Edges.namedTransaction[name] = []*Transaction{}
	} else {
		gb.Edges.namedTransaction[name] = append(gb.Edges.namedTransaction[name], edges...)
	}
}

// GroupBuys is a parsable slice of GroupBuy.
type GroupBuys []*GroupBuy
