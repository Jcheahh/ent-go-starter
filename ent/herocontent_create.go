// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/herocontent"
	"entdemo/ent/image"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeroContentCreate is the builder for creating a HeroContent entity.
type HeroContentCreate struct {
	config
	mutation *HeroContentMutation
	hooks    []Hook
}

// SetPrimaryMessage sets the "primaryMessage" field.
func (hcc *HeroContentCreate) SetPrimaryMessage(s string) *HeroContentCreate {
	hcc.mutation.SetPrimaryMessage(s)
	return hcc
}

// SetSecondaryMessage sets the "secondaryMessage" field.
func (hcc *HeroContentCreate) SetSecondaryMessage(s string) *HeroContentCreate {
	hcc.mutation.SetSecondaryMessage(s)
	return hcc
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (hcc *HeroContentCreate) AddImageIDs(ids ...int) *HeroContentCreate {
	hcc.mutation.AddImageIDs(ids...)
	return hcc
}

// AddImage adds the "image" edges to the Image entity.
func (hcc *HeroContentCreate) AddImage(i ...*Image) *HeroContentCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hcc.AddImageIDs(ids...)
}

// Mutation returns the HeroContentMutation object of the builder.
func (hcc *HeroContentCreate) Mutation() *HeroContentMutation {
	return hcc.mutation
}

// Save creates the HeroContent in the database.
func (hcc *HeroContentCreate) Save(ctx context.Context) (*HeroContent, error) {
	return withHooks[*HeroContent, HeroContentMutation](ctx, hcc.sqlSave, hcc.mutation, hcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hcc *HeroContentCreate) SaveX(ctx context.Context) *HeroContent {
	v, err := hcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcc *HeroContentCreate) Exec(ctx context.Context) error {
	_, err := hcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcc *HeroContentCreate) ExecX(ctx context.Context) {
	if err := hcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hcc *HeroContentCreate) check() error {
	if _, ok := hcc.mutation.PrimaryMessage(); !ok {
		return &ValidationError{Name: "primaryMessage", err: errors.New(`ent: missing required field "HeroContent.primaryMessage"`)}
	}
	if _, ok := hcc.mutation.SecondaryMessage(); !ok {
		return &ValidationError{Name: "secondaryMessage", err: errors.New(`ent: missing required field "HeroContent.secondaryMessage"`)}
	}
	return nil
}

func (hcc *HeroContentCreate) sqlSave(ctx context.Context) (*HeroContent, error) {
	if err := hcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hcc.mutation.id = &_node.ID
	hcc.mutation.done = true
	return _node, nil
}

func (hcc *HeroContentCreate) createSpec() (*HeroContent, *sqlgraph.CreateSpec) {
	var (
		_node = &HeroContent{config: hcc.config}
		_spec = sqlgraph.NewCreateSpec(herocontent.Table, sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt))
	)
	if value, ok := hcc.mutation.PrimaryMessage(); ok {
		_spec.SetField(herocontent.FieldPrimaryMessage, field.TypeString, value)
		_node.PrimaryMessage = value
	}
	if value, ok := hcc.mutation.SecondaryMessage(); ok {
		_spec.SetField(herocontent.FieldSecondaryMessage, field.TypeString, value)
		_node.SecondaryMessage = value
	}
	if nodes := hcc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   herocontent.ImageTable,
			Columns: []string{herocontent.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HeroContentCreateBulk is the builder for creating many HeroContent entities in bulk.
type HeroContentCreateBulk struct {
	config
	builders []*HeroContentCreate
}

// Save creates the HeroContent entities in the database.
func (hccb *HeroContentCreateBulk) Save(ctx context.Context) ([]*HeroContent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hccb.builders))
	nodes := make([]*HeroContent, len(hccb.builders))
	mutators := make([]Mutator, len(hccb.builders))
	for i := range hccb.builders {
		func(i int, root context.Context) {
			builder := hccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HeroContentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hccb *HeroContentCreateBulk) SaveX(ctx context.Context) []*HeroContent {
	v, err := hccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hccb *HeroContentCreateBulk) Exec(ctx context.Context) error {
	_, err := hccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hccb *HeroContentCreateBulk) ExecX(ctx context.Context) {
	if err := hccb.Exec(ctx); err != nil {
		panic(err)
	}
}
