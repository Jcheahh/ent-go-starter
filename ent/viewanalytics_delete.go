// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/viewanalytics"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ViewAnalyticsDelete is the builder for deleting a ViewAnalytics entity.
type ViewAnalyticsDelete struct {
	config
	hooks    []Hook
	mutation *ViewAnalyticsMutation
}

// Where appends a list predicates to the ViewAnalyticsDelete builder.
func (vad *ViewAnalyticsDelete) Where(ps ...predicate.ViewAnalytics) *ViewAnalyticsDelete {
	vad.mutation.Where(ps...)
	return vad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vad *ViewAnalyticsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ViewAnalyticsMutation](ctx, vad.sqlExec, vad.mutation, vad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vad *ViewAnalyticsDelete) ExecX(ctx context.Context) int {
	n, err := vad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vad *ViewAnalyticsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(viewanalytics.Table, sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt))
	if ps := vad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vad.mutation.done = true
	return affected, err
}

// ViewAnalyticsDeleteOne is the builder for deleting a single ViewAnalytics entity.
type ViewAnalyticsDeleteOne struct {
	vad *ViewAnalyticsDelete
}

// Where appends a list predicates to the ViewAnalyticsDelete builder.
func (vado *ViewAnalyticsDeleteOne) Where(ps ...predicate.ViewAnalytics) *ViewAnalyticsDeleteOne {
	vado.vad.mutation.Where(ps...)
	return vado
}

// Exec executes the deletion query.
func (vado *ViewAnalyticsDeleteOne) Exec(ctx context.Context) error {
	n, err := vado.vad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{viewanalytics.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vado *ViewAnalyticsDeleteOne) ExecX(ctx context.Context) {
	if err := vado.Exec(ctx); err != nil {
		panic(err)
	}
}
