// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/shop"
	"entdemo/ent/user"
	"entdemo/ent/userseller"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSellerUpdate is the builder for updating UserSeller entities.
type UserSellerUpdate struct {
	config
	hooks    []Hook
	mutation *UserSellerMutation
}

// Where appends a list predicates to the UserSellerUpdate builder.
func (usu *UserSellerUpdate) Where(ps ...predicate.UserSeller) *UserSellerUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetBrandName sets the "brandName" field.
func (usu *UserSellerUpdate) SetBrandName(s string) *UserSellerUpdate {
	usu.mutation.SetBrandName(s)
	return usu
}

// AddUserProfileIDs adds the "userProfile" edge to the User entity by IDs.
func (usu *UserSellerUpdate) AddUserProfileIDs(ids ...int) *UserSellerUpdate {
	usu.mutation.AddUserProfileIDs(ids...)
	return usu
}

// AddUserProfile adds the "userProfile" edges to the User entity.
func (usu *UserSellerUpdate) AddUserProfile(u ...*User) *UserSellerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return usu.AddUserProfileIDs(ids...)
}

// AddShopIDs adds the "shops" edge to the Shop entity by IDs.
func (usu *UserSellerUpdate) AddShopIDs(ids ...int) *UserSellerUpdate {
	usu.mutation.AddShopIDs(ids...)
	return usu
}

// AddShops adds the "shops" edges to the Shop entity.
func (usu *UserSellerUpdate) AddShops(s ...*Shop) *UserSellerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return usu.AddShopIDs(ids...)
}

// Mutation returns the UserSellerMutation object of the builder.
func (usu *UserSellerUpdate) Mutation() *UserSellerMutation {
	return usu.mutation
}

// ClearUserProfile clears all "userProfile" edges to the User entity.
func (usu *UserSellerUpdate) ClearUserProfile() *UserSellerUpdate {
	usu.mutation.ClearUserProfile()
	return usu
}

// RemoveUserProfileIDs removes the "userProfile" edge to User entities by IDs.
func (usu *UserSellerUpdate) RemoveUserProfileIDs(ids ...int) *UserSellerUpdate {
	usu.mutation.RemoveUserProfileIDs(ids...)
	return usu
}

// RemoveUserProfile removes "userProfile" edges to User entities.
func (usu *UserSellerUpdate) RemoveUserProfile(u ...*User) *UserSellerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return usu.RemoveUserProfileIDs(ids...)
}

// ClearShops clears all "shops" edges to the Shop entity.
func (usu *UserSellerUpdate) ClearShops() *UserSellerUpdate {
	usu.mutation.ClearShops()
	return usu
}

// RemoveShopIDs removes the "shops" edge to Shop entities by IDs.
func (usu *UserSellerUpdate) RemoveShopIDs(ids ...int) *UserSellerUpdate {
	usu.mutation.RemoveShopIDs(ids...)
	return usu
}

// RemoveShops removes "shops" edges to Shop entities.
func (usu *UserSellerUpdate) RemoveShops(s ...*Shop) *UserSellerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return usu.RemoveShopIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSellerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserSellerMutation](ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSellerUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSellerUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSellerUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usu *UserSellerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userseller.Table, userseller.Columns, sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.BrandName(); ok {
		_spec.SetField(userseller.FieldBrandName, field.TypeString, value)
	}
	if usu.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.UserProfileTable,
			Columns: []string{userseller.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.RemovedUserProfileIDs(); len(nodes) > 0 && !usu.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.UserProfileTable,
			Columns: []string{userseller.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.UserProfileTable,
			Columns: []string{userseller.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usu.mutation.ShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.ShopsTable,
			Columns: []string{userseller.ShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.RemovedShopsIDs(); len(nodes) > 0 && !usu.mutation.ShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.ShopsTable,
			Columns: []string{userseller.ShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.ShopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.ShopsTable,
			Columns: []string{userseller.ShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userseller.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSellerUpdateOne is the builder for updating a single UserSeller entity.
type UserSellerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSellerMutation
}

// SetBrandName sets the "brandName" field.
func (usuo *UserSellerUpdateOne) SetBrandName(s string) *UserSellerUpdateOne {
	usuo.mutation.SetBrandName(s)
	return usuo
}

// AddUserProfileIDs adds the "userProfile" edge to the User entity by IDs.
func (usuo *UserSellerUpdateOne) AddUserProfileIDs(ids ...int) *UserSellerUpdateOne {
	usuo.mutation.AddUserProfileIDs(ids...)
	return usuo
}

// AddUserProfile adds the "userProfile" edges to the User entity.
func (usuo *UserSellerUpdateOne) AddUserProfile(u ...*User) *UserSellerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return usuo.AddUserProfileIDs(ids...)
}

// AddShopIDs adds the "shops" edge to the Shop entity by IDs.
func (usuo *UserSellerUpdateOne) AddShopIDs(ids ...int) *UserSellerUpdateOne {
	usuo.mutation.AddShopIDs(ids...)
	return usuo
}

// AddShops adds the "shops" edges to the Shop entity.
func (usuo *UserSellerUpdateOne) AddShops(s ...*Shop) *UserSellerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return usuo.AddShopIDs(ids...)
}

// Mutation returns the UserSellerMutation object of the builder.
func (usuo *UserSellerUpdateOne) Mutation() *UserSellerMutation {
	return usuo.mutation
}

// ClearUserProfile clears all "userProfile" edges to the User entity.
func (usuo *UserSellerUpdateOne) ClearUserProfile() *UserSellerUpdateOne {
	usuo.mutation.ClearUserProfile()
	return usuo
}

// RemoveUserProfileIDs removes the "userProfile" edge to User entities by IDs.
func (usuo *UserSellerUpdateOne) RemoveUserProfileIDs(ids ...int) *UserSellerUpdateOne {
	usuo.mutation.RemoveUserProfileIDs(ids...)
	return usuo
}

// RemoveUserProfile removes "userProfile" edges to User entities.
func (usuo *UserSellerUpdateOne) RemoveUserProfile(u ...*User) *UserSellerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return usuo.RemoveUserProfileIDs(ids...)
}

// ClearShops clears all "shops" edges to the Shop entity.
func (usuo *UserSellerUpdateOne) ClearShops() *UserSellerUpdateOne {
	usuo.mutation.ClearShops()
	return usuo
}

// RemoveShopIDs removes the "shops" edge to Shop entities by IDs.
func (usuo *UserSellerUpdateOne) RemoveShopIDs(ids ...int) *UserSellerUpdateOne {
	usuo.mutation.RemoveShopIDs(ids...)
	return usuo
}

// RemoveShops removes "shops" edges to Shop entities.
func (usuo *UserSellerUpdateOne) RemoveShops(s ...*Shop) *UserSellerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return usuo.RemoveShopIDs(ids...)
}

// Where appends a list predicates to the UserSellerUpdate builder.
func (usuo *UserSellerUpdateOne) Where(ps ...predicate.UserSeller) *UserSellerUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSellerUpdateOne) Select(field string, fields ...string) *UserSellerUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSeller entity.
func (usuo *UserSellerUpdateOne) Save(ctx context.Context) (*UserSeller, error) {
	return withHooks[*UserSeller, UserSellerMutation](ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSellerUpdateOne) SaveX(ctx context.Context) *UserSeller {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSellerUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSellerUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usuo *UserSellerUpdateOne) sqlSave(ctx context.Context) (_node *UserSeller, err error) {
	_spec := sqlgraph.NewUpdateSpec(userseller.Table, userseller.Columns, sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSeller.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userseller.FieldID)
		for _, f := range fields {
			if !userseller.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userseller.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.BrandName(); ok {
		_spec.SetField(userseller.FieldBrandName, field.TypeString, value)
	}
	if usuo.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.UserProfileTable,
			Columns: []string{userseller.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.RemovedUserProfileIDs(); len(nodes) > 0 && !usuo.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.UserProfileTable,
			Columns: []string{userseller.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.UserProfileTable,
			Columns: []string{userseller.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usuo.mutation.ShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.ShopsTable,
			Columns: []string{userseller.ShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.RemovedShopsIDs(); len(nodes) > 0 && !usuo.mutation.ShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.ShopsTable,
			Columns: []string{userseller.ShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.ShopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userseller.ShopsTable,
			Columns: []string{userseller.ShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSeller{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userseller.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
