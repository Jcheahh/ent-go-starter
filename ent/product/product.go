// Code generated by ent, DO NOT EDIT.

package product

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDateCreated holds the string denoting the datecreated field in the database.
	FieldDateCreated = "date_created"
	// FieldDateUpdated holds the string denoting the dateupdated field in the database.
	FieldDateUpdated = "date_updated"
	// EdgeProductSeller holds the string denoting the productseller edge name in mutations.
	EdgeProductSeller = "productSeller"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeProductAttributes holds the string denoting the productattributes edge name in mutations.
	EdgeProductAttributes = "productAttributes"
	// EdgeVariations holds the string denoting the variations edge name in mutations.
	EdgeVariations = "variations"
	// EdgeCommissionStructure holds the string denoting the commissionstructure edge name in mutations.
	EdgeCommissionStructure = "commissionStructure"
	// EdgeShop holds the string denoting the shop edge name in mutations.
	EdgeShop = "shop"
	// EdgeGroupBuys holds the string denoting the groupbuys edge name in mutations.
	EdgeGroupBuys = "groupBuys"
	// EdgeProductPageViews holds the string denoting the productpageviews edge name in mutations.
	EdgeProductPageViews = "productPageViews"
	// EdgeBlogPosts holds the string denoting the blogposts edge name in mutations.
	EdgeBlogPosts = "blogPosts"
	// EdgeMarketingCampaigns holds the string denoting the marketingcampaigns edge name in mutations.
	EdgeMarketingCampaigns = "marketingCampaigns"
	// EdgeChats holds the string denoting the chats edge name in mutations.
	EdgeChats = "chats"
	// EdgeEmailCampaign holds the string denoting the emailcampaign edge name in mutations.
	EdgeEmailCampaign = "emailCampaign"
	// Table holds the table name of the product in the database.
	Table = "products"
	// ProductSellerTable is the table that holds the productSeller relation/edge.
	ProductSellerTable = "user_sellers"
	// ProductSellerInverseTable is the table name for the UserSeller entity.
	// It exists in this package in order to avoid circular dependency with the "userseller" package.
	ProductSellerInverseTable = "user_sellers"
	// ProductSellerColumn is the table column denoting the productSeller relation/edge.
	ProductSellerColumn = "product_product_seller"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "reviews"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "product_reviews"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "images"
	// ImagesInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImagesInverseTable = "images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "product_images"
	// CategoriesTable is the table that holds the categories relation/edge.
	CategoriesTable = "categories"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// CategoriesColumn is the table column denoting the categories relation/edge.
	CategoriesColumn = "product_categories"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "product_tags"
	// ProductAttributesTable is the table that holds the productAttributes relation/edge.
	ProductAttributesTable = "product_attributes"
	// ProductAttributesInverseTable is the table name for the ProductAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "productattribute" package.
	ProductAttributesInverseTable = "product_attributes"
	// ProductAttributesColumn is the table column denoting the productAttributes relation/edge.
	ProductAttributesColumn = "product_product_attributes"
	// VariationsTable is the table that holds the variations relation/edge.
	VariationsTable = "product_variations"
	// VariationsInverseTable is the table name for the ProductVariation entity.
	// It exists in this package in order to avoid circular dependency with the "productvariation" package.
	VariationsInverseTable = "product_variations"
	// VariationsColumn is the table column denoting the variations relation/edge.
	VariationsColumn = "product_variations"
	// CommissionStructureTable is the table that holds the commissionStructure relation/edge.
	CommissionStructureTable = "commission_structures"
	// CommissionStructureInverseTable is the table name for the CommissionStructure entity.
	// It exists in this package in order to avoid circular dependency with the "commissionstructure" package.
	CommissionStructureInverseTable = "commission_structures"
	// CommissionStructureColumn is the table column denoting the commissionStructure relation/edge.
	CommissionStructureColumn = "product_commission_structure"
	// ShopTable is the table that holds the shop relation/edge.
	ShopTable = "shops"
	// ShopInverseTable is the table name for the Shop entity.
	// It exists in this package in order to avoid circular dependency with the "shop" package.
	ShopInverseTable = "shops"
	// ShopColumn is the table column denoting the shop relation/edge.
	ShopColumn = "product_shop"
	// GroupBuysTable is the table that holds the groupBuys relation/edge.
	GroupBuysTable = "group_buys"
	// GroupBuysInverseTable is the table name for the GroupBuy entity.
	// It exists in this package in order to avoid circular dependency with the "groupbuy" package.
	GroupBuysInverseTable = "group_buys"
	// GroupBuysColumn is the table column denoting the groupBuys relation/edge.
	GroupBuysColumn = "product_group_buys"
	// ProductPageViewsTable is the table that holds the productPageViews relation/edge.
	ProductPageViewsTable = "product_page_views"
	// ProductPageViewsInverseTable is the table name for the ProductPageView entity.
	// It exists in this package in order to avoid circular dependency with the "productpageview" package.
	ProductPageViewsInverseTable = "product_page_views"
	// ProductPageViewsColumn is the table column denoting the productPageViews relation/edge.
	ProductPageViewsColumn = "product_product_page_views"
	// BlogPostsTable is the table that holds the blogPosts relation/edge.
	BlogPostsTable = "blog_posts"
	// BlogPostsInverseTable is the table name for the BlogPost entity.
	// It exists in this package in order to avoid circular dependency with the "blogpost" package.
	BlogPostsInverseTable = "blog_posts"
	// BlogPostsColumn is the table column denoting the blogPosts relation/edge.
	BlogPostsColumn = "product_blog_posts"
	// MarketingCampaignsTable is the table that holds the marketingCampaigns relation/edge.
	MarketingCampaignsTable = "marketing_campaigns"
	// MarketingCampaignsInverseTable is the table name for the MarketingCampaign entity.
	// It exists in this package in order to avoid circular dependency with the "marketingcampaign" package.
	MarketingCampaignsInverseTable = "marketing_campaigns"
	// MarketingCampaignsColumn is the table column denoting the marketingCampaigns relation/edge.
	MarketingCampaignsColumn = "product_marketing_campaigns"
	// ChatsTable is the table that holds the chats relation/edge.
	ChatsTable = "chats"
	// ChatsInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	ChatsInverseTable = "chats"
	// ChatsColumn is the table column denoting the chats relation/edge.
	ChatsColumn = "product_chats"
	// EmailCampaignTable is the table that holds the emailCampaign relation/edge.
	EmailCampaignTable = "email_campaigns"
	// EmailCampaignInverseTable is the table name for the EmailCampaign entity.
	// It exists in this package in order to avoid circular dependency with the "emailcampaign" package.
	EmailCampaignInverseTable = "email_campaigns"
	// EmailCampaignColumn is the table column denoting the emailCampaign relation/edge.
	EmailCampaignColumn = "product_email_campaign"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPrice,
	FieldDateCreated,
	FieldDateUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_products",
	"group_buy_product",
	"marketing_campaign_product",
	"review_product",
	"shop_products",
	"transaction_product",
	"user_influencer_products",
	"view_analytics_product",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Product queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDateCreated orders the results by the dateCreated field.
func ByDateCreated(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDateCreated, opts...).ToFunc()
}

// ByDateUpdated orders the results by the dateUpdated field.
func ByDateUpdated(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDateUpdated, opts...).ToFunc()
}

// ByProductSellerCount orders the results by productSeller count.
func ByProductSellerCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductSellerStep(), opts...)
	}
}

// ByProductSeller orders the results by productSeller terms.
func ByProductSeller(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductSellerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewsCount orders the results by reviews count.
func ByReviewsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewsStep(), opts...)
	}
}

// ByReviews orders the results by reviews terms.
func ByReviews(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoriesCount orders the results by categories count.
func ByCategoriesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoriesStep(), opts...)
	}
}

// ByCategories orders the results by categories terms.
func ByCategories(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductAttributesCount orders the results by productAttributes count.
func ByProductAttributesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductAttributesStep(), opts...)
	}
}

// ByProductAttributes orders the results by productAttributes terms.
func ByProductAttributes(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductAttributesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVariationsCount orders the results by variations count.
func ByVariationsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVariationsStep(), opts...)
	}
}

// ByVariations orders the results by variations terms.
func ByVariations(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVariationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommissionStructureCount orders the results by commissionStructure count.
func ByCommissionStructureCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommissionStructureStep(), opts...)
	}
}

// ByCommissionStructure orders the results by commissionStructure terms.
func ByCommissionStructure(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionStructureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShopCount orders the results by shop count.
func ByShopCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShopStep(), opts...)
	}
}

// ByShop orders the results by shop terms.
func ByShop(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShopStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupBuysCount orders the results by groupBuys count.
func ByGroupBuysCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupBuysStep(), opts...)
	}
}

// ByGroupBuys orders the results by groupBuys terms.
func ByGroupBuys(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupBuysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductPageViewsCount orders the results by productPageViews count.
func ByProductPageViewsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductPageViewsStep(), opts...)
	}
}

// ByProductPageViews orders the results by productPageViews terms.
func ByProductPageViews(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductPageViewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlogPostsCount orders the results by blogPosts count.
func ByBlogPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogPostsStep(), opts...)
	}
}

// ByBlogPosts orders the results by blogPosts terms.
func ByBlogPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMarketingCampaignsCount orders the results by marketingCampaigns count.
func ByMarketingCampaignsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMarketingCampaignsStep(), opts...)
	}
}

// ByMarketingCampaigns orders the results by marketingCampaigns terms.
func ByMarketingCampaigns(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMarketingCampaignsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChatsCount orders the results by chats count.
func ByChatsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChatsStep(), opts...)
	}
}

// ByChats orders the results by chats terms.
func ByChats(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmailCampaignCount orders the results by emailCampaign count.
func ByEmailCampaignCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmailCampaignStep(), opts...)
	}
}

// ByEmailCampaign orders the results by emailCampaign terms.
func ByEmailCampaign(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailCampaignStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductSellerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductSellerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductSellerTable, ProductSellerColumn),
	)
}
func newReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
	)
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
	)
}
func newCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
	)
}
func newProductAttributesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductAttributesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductAttributesTable, ProductAttributesColumn),
	)
}
func newVariationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VariationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VariationsTable, VariationsColumn),
	)
}
func newCommissionStructureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionStructureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommissionStructureTable, CommissionStructureColumn),
	)
}
func newShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShopTable, ShopColumn),
	)
}
func newGroupBuysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupBuysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupBuysTable, GroupBuysColumn),
	)
}
func newProductPageViewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductPageViewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductPageViewsTable, ProductPageViewsColumn),
	)
}
func newBlogPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlogPostsTable, BlogPostsColumn),
	)
}
func newMarketingCampaignsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MarketingCampaignsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MarketingCampaignsTable, MarketingCampaignsColumn),
	)
}
func newChatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChatsTable, ChatsColumn),
	)
}
func newEmailCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailCampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmailCampaignTable, EmailCampaignColumn),
	)
}
