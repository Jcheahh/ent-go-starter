// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/refundtransactions"
	"entdemo/ent/transaction"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefundTransactionsUpdate is the builder for updating RefundTransactions entities.
type RefundTransactionsUpdate struct {
	config
	hooks    []Hook
	mutation *RefundTransactionsMutation
}

// Where appends a list predicates to the RefundTransactionsUpdate builder.
func (rtu *RefundTransactionsUpdate) Where(ps ...predicate.RefundTransactions) *RefundTransactionsUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetRefundAmount sets the "refundAmount" field.
func (rtu *RefundTransactionsUpdate) SetRefundAmount(s string) *RefundTransactionsUpdate {
	rtu.mutation.SetRefundAmount(s)
	return rtu
}

// SetRefundCurrency sets the "refundCurrency" field.
func (rtu *RefundTransactionsUpdate) SetRefundCurrency(s string) *RefundTransactionsUpdate {
	rtu.mutation.SetRefundCurrency(s)
	return rtu
}

// SetRefundReason sets the "refundReason" field.
func (rtu *RefundTransactionsUpdate) SetRefundReason(s string) *RefundTransactionsUpdate {
	rtu.mutation.SetRefundReason(s)
	return rtu
}

// SetRefundStatus sets the "refundStatus" field.
func (rtu *RefundTransactionsUpdate) SetRefundStatus(s string) *RefundTransactionsUpdate {
	rtu.mutation.SetRefundStatus(s)
	return rtu
}

// SetDateCreated sets the "dateCreated" field.
func (rtu *RefundTransactionsUpdate) SetDateCreated(s string) *RefundTransactionsUpdate {
	rtu.mutation.SetDateCreated(s)
	return rtu
}

// SetDateUpdated sets the "dateUpdated" field.
func (rtu *RefundTransactionsUpdate) SetDateUpdated(s string) *RefundTransactionsUpdate {
	rtu.mutation.SetDateUpdated(s)
	return rtu
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (rtu *RefundTransactionsUpdate) AddTransactionIDs(ids ...int) *RefundTransactionsUpdate {
	rtu.mutation.AddTransactionIDs(ids...)
	return rtu
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (rtu *RefundTransactionsUpdate) AddTransaction(t ...*Transaction) *RefundTransactionsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtu.AddTransactionIDs(ids...)
}

// Mutation returns the RefundTransactionsMutation object of the builder.
func (rtu *RefundTransactionsUpdate) Mutation() *RefundTransactionsMutation {
	return rtu.mutation
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (rtu *RefundTransactionsUpdate) ClearTransaction() *RefundTransactionsUpdate {
	rtu.mutation.ClearTransaction()
	return rtu
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (rtu *RefundTransactionsUpdate) RemoveTransactionIDs(ids ...int) *RefundTransactionsUpdate {
	rtu.mutation.RemoveTransactionIDs(ids...)
	return rtu
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (rtu *RefundTransactionsUpdate) RemoveTransaction(t ...*Transaction) *RefundTransactionsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RefundTransactionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RefundTransactionsMutation](ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RefundTransactionsUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RefundTransactionsUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RefundTransactionsUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtu *RefundTransactionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(refundtransactions.Table, refundtransactions.Columns, sqlgraph.NewFieldSpec(refundtransactions.FieldID, field.TypeInt))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.RefundAmount(); ok {
		_spec.SetField(refundtransactions.FieldRefundAmount, field.TypeString, value)
	}
	if value, ok := rtu.mutation.RefundCurrency(); ok {
		_spec.SetField(refundtransactions.FieldRefundCurrency, field.TypeString, value)
	}
	if value, ok := rtu.mutation.RefundReason(); ok {
		_spec.SetField(refundtransactions.FieldRefundReason, field.TypeString, value)
	}
	if value, ok := rtu.mutation.RefundStatus(); ok {
		_spec.SetField(refundtransactions.FieldRefundStatus, field.TypeString, value)
	}
	if value, ok := rtu.mutation.DateCreated(); ok {
		_spec.SetField(refundtransactions.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := rtu.mutation.DateUpdated(); ok {
		_spec.SetField(refundtransactions.FieldDateUpdated, field.TypeString, value)
	}
	if rtu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !rtu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refundtransactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// RefundTransactionsUpdateOne is the builder for updating a single RefundTransactions entity.
type RefundTransactionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefundTransactionsMutation
}

// SetRefundAmount sets the "refundAmount" field.
func (rtuo *RefundTransactionsUpdateOne) SetRefundAmount(s string) *RefundTransactionsUpdateOne {
	rtuo.mutation.SetRefundAmount(s)
	return rtuo
}

// SetRefundCurrency sets the "refundCurrency" field.
func (rtuo *RefundTransactionsUpdateOne) SetRefundCurrency(s string) *RefundTransactionsUpdateOne {
	rtuo.mutation.SetRefundCurrency(s)
	return rtuo
}

// SetRefundReason sets the "refundReason" field.
func (rtuo *RefundTransactionsUpdateOne) SetRefundReason(s string) *RefundTransactionsUpdateOne {
	rtuo.mutation.SetRefundReason(s)
	return rtuo
}

// SetRefundStatus sets the "refundStatus" field.
func (rtuo *RefundTransactionsUpdateOne) SetRefundStatus(s string) *RefundTransactionsUpdateOne {
	rtuo.mutation.SetRefundStatus(s)
	return rtuo
}

// SetDateCreated sets the "dateCreated" field.
func (rtuo *RefundTransactionsUpdateOne) SetDateCreated(s string) *RefundTransactionsUpdateOne {
	rtuo.mutation.SetDateCreated(s)
	return rtuo
}

// SetDateUpdated sets the "dateUpdated" field.
func (rtuo *RefundTransactionsUpdateOne) SetDateUpdated(s string) *RefundTransactionsUpdateOne {
	rtuo.mutation.SetDateUpdated(s)
	return rtuo
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (rtuo *RefundTransactionsUpdateOne) AddTransactionIDs(ids ...int) *RefundTransactionsUpdateOne {
	rtuo.mutation.AddTransactionIDs(ids...)
	return rtuo
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (rtuo *RefundTransactionsUpdateOne) AddTransaction(t ...*Transaction) *RefundTransactionsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtuo.AddTransactionIDs(ids...)
}

// Mutation returns the RefundTransactionsMutation object of the builder.
func (rtuo *RefundTransactionsUpdateOne) Mutation() *RefundTransactionsMutation {
	return rtuo.mutation
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (rtuo *RefundTransactionsUpdateOne) ClearTransaction() *RefundTransactionsUpdateOne {
	rtuo.mutation.ClearTransaction()
	return rtuo
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (rtuo *RefundTransactionsUpdateOne) RemoveTransactionIDs(ids ...int) *RefundTransactionsUpdateOne {
	rtuo.mutation.RemoveTransactionIDs(ids...)
	return rtuo
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (rtuo *RefundTransactionsUpdateOne) RemoveTransaction(t ...*Transaction) *RefundTransactionsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtuo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the RefundTransactionsUpdate builder.
func (rtuo *RefundTransactionsUpdateOne) Where(ps ...predicate.RefundTransactions) *RefundTransactionsUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RefundTransactionsUpdateOne) Select(field string, fields ...string) *RefundTransactionsUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RefundTransactions entity.
func (rtuo *RefundTransactionsUpdateOne) Save(ctx context.Context) (*RefundTransactions, error) {
	return withHooks[*RefundTransactions, RefundTransactionsMutation](ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RefundTransactionsUpdateOne) SaveX(ctx context.Context) *RefundTransactions {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RefundTransactionsUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RefundTransactionsUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtuo *RefundTransactionsUpdateOne) sqlSave(ctx context.Context) (_node *RefundTransactions, err error) {
	_spec := sqlgraph.NewUpdateSpec(refundtransactions.Table, refundtransactions.Columns, sqlgraph.NewFieldSpec(refundtransactions.FieldID, field.TypeInt))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RefundTransactions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refundtransactions.FieldID)
		for _, f := range fields {
			if !refundtransactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != refundtransactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.RefundAmount(); ok {
		_spec.SetField(refundtransactions.FieldRefundAmount, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.RefundCurrency(); ok {
		_spec.SetField(refundtransactions.FieldRefundCurrency, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.RefundReason(); ok {
		_spec.SetField(refundtransactions.FieldRefundReason, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.RefundStatus(); ok {
		_spec.SetField(refundtransactions.FieldRefundStatus, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.DateCreated(); ok {
		_spec.SetField(refundtransactions.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.DateUpdated(); ok {
		_spec.SetField(refundtransactions.FieldDateUpdated, field.TypeString, value)
	}
	if rtuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !rtuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refundtransactions.TransactionTable,
			Columns: []string{refundtransactions.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RefundTransactions{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refundtransactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
