// Code generated by ent, DO NOT EDIT.

package userbuyer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userbuyer type in the database.
	Label = "user_buyer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlaceholder holds the string denoting the placeholder field in the database.
	FieldPlaceholder = "placeholder"
	// EdgeUserProfile holds the string denoting the userprofile edge name in mutations.
	EdgeUserProfile = "userProfile"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// EdgeLinksClicked holds the string denoting the linksclicked edge name in mutations.
	EdgeLinksClicked = "linksClicked"
	// Table holds the table name of the userbuyer in the database.
	Table = "user_buyers"
	// UserProfileTable is the table that holds the userProfile relation/edge.
	UserProfileTable = "users"
	// UserProfileInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserProfileInverseTable = "users"
	// UserProfileColumn is the table column denoting the userProfile relation/edge.
	UserProfileColumn = "user_buyer_user_profile"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "reviews"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "user_buyer_reviews"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "user_buyer_transactions"
	// LinksClickedTable is the table that holds the linksClicked relation/edge.
	LinksClickedTable = "link_visits"
	// LinksClickedInverseTable is the table name for the LinkVisit entity.
	// It exists in this package in order to avoid circular dependency with the "linkvisit" package.
	LinksClickedInverseTable = "link_visits"
	// LinksClickedColumn is the table column denoting the linksClicked relation/edge.
	LinksClickedColumn = "user_buyer_links_clicked"
)

// Columns holds all SQL columns for userbuyer fields.
var Columns = []string{
	FieldID,
	FieldPlaceholder,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_buyers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"review_product_customer",
	"transaction_product_customer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserBuyer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlaceholder orders the results by the placeholder field.
func ByPlaceholder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlaceholder, opts...).ToFunc()
}

// ByUserProfileCount orders the results by userProfile count.
func ByUserProfileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserProfileStep(), opts...)
	}
}

// ByUserProfile orders the results by userProfile terms.
func ByUserProfile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserProfileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewsCount orders the results by reviews count.
func ByReviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewsStep(), opts...)
	}
}

// ByReviews orders the results by reviews terms.
func ByReviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLinksClickedCount orders the results by linksClicked count.
func ByLinksClickedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLinksClickedStep(), opts...)
	}
}

// ByLinksClicked orders the results by linksClicked terms.
func ByLinksClicked(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinksClickedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserProfileTable, UserProfileColumn),
	)
}
func newReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
func newLinksClickedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LinksClickedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LinksClickedTable, LinksClickedColumn),
	)
}
