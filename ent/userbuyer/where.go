// Code generated by ent, DO NOT EDIT.

package userbuyer

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldLTE(FieldID, id))
}

// Placeholder applies equality check predicate on the "placeholder" field. It's identical to PlaceholderEQ.
func Placeholder(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldEQ(FieldPlaceholder, v))
}

// PlaceholderEQ applies the EQ predicate on the "placeholder" field.
func PlaceholderEQ(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldEQ(FieldPlaceholder, v))
}

// PlaceholderNEQ applies the NEQ predicate on the "placeholder" field.
func PlaceholderNEQ(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldNEQ(FieldPlaceholder, v))
}

// PlaceholderIn applies the In predicate on the "placeholder" field.
func PlaceholderIn(vs ...int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldIn(FieldPlaceholder, vs...))
}

// PlaceholderNotIn applies the NotIn predicate on the "placeholder" field.
func PlaceholderNotIn(vs ...int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldNotIn(FieldPlaceholder, vs...))
}

// PlaceholderGT applies the GT predicate on the "placeholder" field.
func PlaceholderGT(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldGT(FieldPlaceholder, v))
}

// PlaceholderGTE applies the GTE predicate on the "placeholder" field.
func PlaceholderGTE(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldGTE(FieldPlaceholder, v))
}

// PlaceholderLT applies the LT predicate on the "placeholder" field.
func PlaceholderLT(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldLT(FieldPlaceholder, v))
}

// PlaceholderLTE applies the LTE predicate on the "placeholder" field.
func PlaceholderLTE(v int) predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldLTE(FieldPlaceholder, v))
}

// PlaceholderIsNil applies the IsNil predicate on the "placeholder" field.
func PlaceholderIsNil() predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldIsNull(FieldPlaceholder))
}

// PlaceholderNotNil applies the NotNil predicate on the "placeholder" field.
func PlaceholderNotNil() predicate.UserBuyer {
	return predicate.UserBuyer(sql.FieldNotNull(FieldPlaceholder))
}

// HasUserProfile applies the HasEdge predicate on the "userProfile" edge.
func HasUserProfile() predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserProfileTable, UserProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserProfileWith applies the HasEdge predicate on the "userProfile" edge with a given conditions (other predicates).
func HasUserProfileWith(preds ...predicate.User) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := newUserProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := newReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinksClicked applies the HasEdge predicate on the "linksClicked" edge.
func HasLinksClicked() predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinksClickedTable, LinksClickedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinksClickedWith applies the HasEdge predicate on the "linksClicked" edge with a given conditions (other predicates).
func HasLinksClickedWith(preds ...predicate.LinkVisit) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		step := newLinksClickedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserBuyer) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserBuyer) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserBuyer) predicate.UserBuyer {
	return predicate.UserBuyer(func(s *sql.Selector) {
		p(s.Not())
	})
}
