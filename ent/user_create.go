// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/bankaccount"
	"entdemo/ent/notification"
	"entdemo/ent/paymentmethod"
	"entdemo/ent/shippingaddress"
	"entdemo/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetAddress sets the "address" field.
func (uc *UserCreate) SetAddress(s string) *UserCreate {
	uc.mutation.SetAddress(s)
	return uc
}

// SetCity sets the "city" field.
func (uc *UserCreate) SetCity(s string) *UserCreate {
	uc.mutation.SetCity(s)
	return uc
}

// SetState sets the "state" field.
func (uc *UserCreate) SetState(s string) *UserCreate {
	uc.mutation.SetState(s)
	return uc
}

// SetZip sets the "zip" field.
func (uc *UserCreate) SetZip(s string) *UserCreate {
	uc.mutation.SetZip(s)
	return uc
}

// SetCountry sets the "country" field.
func (uc *UserCreate) SetCountry(s string) *UserCreate {
	uc.mutation.SetCountry(s)
	return uc
}

// SetDateCreated sets the "dateCreated" field.
func (uc *UserCreate) SetDateCreated(s string) *UserCreate {
	uc.mutation.SetDateCreated(s)
	return uc
}

// SetNillableDateCreated sets the "dateCreated" field if the given value is not nil.
func (uc *UserCreate) SetNillableDateCreated(s *string) *UserCreate {
	if s != nil {
		uc.SetDateCreated(*s)
	}
	return uc
}

// SetDateUpdated sets the "dateUpdated" field.
func (uc *UserCreate) SetDateUpdated(s string) *UserCreate {
	uc.mutation.SetDateUpdated(s)
	return uc
}

// SetNillableDateUpdated sets the "dateUpdated" field if the given value is not nil.
func (uc *UserCreate) SetNillableDateUpdated(s *string) *UserCreate {
	if s != nil {
		uc.SetDateUpdated(*s)
	}
	return uc
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uc *UserCreate) AddNotificationIDs(ids ...int) *UserCreate {
	uc.mutation.AddNotificationIDs(ids...)
	return uc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uc *UserCreate) AddNotifications(n ...*Notification) *UserCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uc.AddNotificationIDs(ids...)
}

// AddBankAccountIDs adds the "bankAccounts" edge to the BankAccount entity by IDs.
func (uc *UserCreate) AddBankAccountIDs(ids ...int) *UserCreate {
	uc.mutation.AddBankAccountIDs(ids...)
	return uc
}

// AddBankAccounts adds the "bankAccounts" edges to the BankAccount entity.
func (uc *UserCreate) AddBankAccounts(b ...*BankAccount) *UserCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddBankAccountIDs(ids...)
}

// AddShippingAddressIDs adds the "shippingAddresses" edge to the ShippingAddress entity by IDs.
func (uc *UserCreate) AddShippingAddressIDs(ids ...int) *UserCreate {
	uc.mutation.AddShippingAddressIDs(ids...)
	return uc
}

// AddShippingAddresses adds the "shippingAddresses" edges to the ShippingAddress entity.
func (uc *UserCreate) AddShippingAddresses(s ...*ShippingAddress) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddShippingAddressIDs(ids...)
}

// AddPaymentMethodIDs adds the "paymentMethods" edge to the PaymentMethod entity by IDs.
func (uc *UserCreate) AddPaymentMethodIDs(ids ...int) *UserCreate {
	uc.mutation.AddPaymentMethodIDs(ids...)
	return uc
}

// AddPaymentMethods adds the "paymentMethods" edges to the PaymentMethod entity.
func (uc *UserCreate) AddPaymentMethods(p ...*PaymentMethod) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPaymentMethodIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks[*User, UserMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.DateCreated(); !ok {
		v := user.DefaultDateCreated
		uc.mutation.SetDateCreated(v)
	}
	if _, ok := uc.mutation.DateUpdated(); !ok {
		v := user.DefaultDateUpdated
		uc.mutation.SetDateUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "User.phone"`)}
	}
	if _, ok := uc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "User.address"`)}
	}
	if _, ok := uc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "User.city"`)}
	}
	if _, ok := uc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "User.state"`)}
	}
	if _, ok := uc.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "User.zip"`)}
	}
	if _, ok := uc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "User.country"`)}
	}
	if _, ok := uc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "User.dateCreated"`)}
	}
	if _, ok := uc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "User.dateUpdated"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := uc.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := uc.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := uc.mutation.Zip(); ok {
		_spec.SetField(user.FieldZip, field.TypeString, value)
		_node.Zip = value
	}
	if value, ok := uc.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := uc.mutation.DateCreated(); ok {
		_spec.SetField(user.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := uc.mutation.DateUpdated(); ok {
		_spec.SetField(user.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if nodes := uc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ShippingAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShippingAddressesTable,
			Columns: []string{user.ShippingAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
