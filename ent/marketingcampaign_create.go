// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/marketingcampaign"
	"entdemo/ent/product"
	"entdemo/ent/rewardtype"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MarketingCampaignCreate is the builder for creating a MarketingCampaign entity.
type MarketingCampaignCreate struct {
	config
	mutation *MarketingCampaignMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mcc *MarketingCampaignCreate) SetName(s string) *MarketingCampaignCreate {
	mcc.mutation.SetName(s)
	return mcc
}

// SetDescription sets the "description" field.
func (mcc *MarketingCampaignCreate) SetDescription(s string) *MarketingCampaignCreate {
	mcc.mutation.SetDescription(s)
	return mcc
}

// SetConsumerPurchaseValue sets the "consumerPurchaseValue" field.
func (mcc *MarketingCampaignCreate) SetConsumerPurchaseValue(s string) *MarketingCampaignCreate {
	mcc.mutation.SetConsumerPurchaseValue(s)
	return mcc
}

// SetCustomerApplicationLogic sets the "customerApplicationLogic" field.
func (mcc *MarketingCampaignCreate) SetCustomerApplicationLogic(s string) *MarketingCampaignCreate {
	mcc.mutation.SetCustomerApplicationLogic(s)
	return mcc
}

// SetInitialisationLogic sets the "initialisationLogic" field.
func (mcc *MarketingCampaignCreate) SetInitialisationLogic(s string) *MarketingCampaignCreate {
	mcc.mutation.SetInitialisationLogic(s)
	return mcc
}

// SetStartDate sets the "startDate" field.
func (mcc *MarketingCampaignCreate) SetStartDate(s string) *MarketingCampaignCreate {
	mcc.mutation.SetStartDate(s)
	return mcc
}

// SetEndDate sets the "endDate" field.
func (mcc *MarketingCampaignCreate) SetEndDate(s string) *MarketingCampaignCreate {
	mcc.mutation.SetEndDate(s)
	return mcc
}

// SetDateCreated sets the "dateCreated" field.
func (mcc *MarketingCampaignCreate) SetDateCreated(s string) *MarketingCampaignCreate {
	mcc.mutation.SetDateCreated(s)
	return mcc
}

// SetDateUpdated sets the "dateUpdated" field.
func (mcc *MarketingCampaignCreate) SetDateUpdated(s string) *MarketingCampaignCreate {
	mcc.mutation.SetDateUpdated(s)
	return mcc
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (mcc *MarketingCampaignCreate) AddProductIDs(ids ...int) *MarketingCampaignCreate {
	mcc.mutation.AddProductIDs(ids...)
	return mcc
}

// AddProduct adds the "product" edges to the Product entity.
func (mcc *MarketingCampaignCreate) AddProduct(p ...*Product) *MarketingCampaignCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mcc.AddProductIDs(ids...)
}

// AddConsumerRewardIDs adds the "consumerReward" edge to the RewardType entity by IDs.
func (mcc *MarketingCampaignCreate) AddConsumerRewardIDs(ids ...int) *MarketingCampaignCreate {
	mcc.mutation.AddConsumerRewardIDs(ids...)
	return mcc
}

// AddConsumerReward adds the "consumerReward" edges to the RewardType entity.
func (mcc *MarketingCampaignCreate) AddConsumerReward(r ...*RewardType) *MarketingCampaignCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mcc.AddConsumerRewardIDs(ids...)
}

// Mutation returns the MarketingCampaignMutation object of the builder.
func (mcc *MarketingCampaignCreate) Mutation() *MarketingCampaignMutation {
	return mcc.mutation
}

// Save creates the MarketingCampaign in the database.
func (mcc *MarketingCampaignCreate) Save(ctx context.Context) (*MarketingCampaign, error) {
	return withHooks[*MarketingCampaign, MarketingCampaignMutation](ctx, mcc.sqlSave, mcc.mutation, mcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MarketingCampaignCreate) SaveX(ctx context.Context) *MarketingCampaign {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MarketingCampaignCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MarketingCampaignCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MarketingCampaignCreate) check() error {
	if _, ok := mcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MarketingCampaign.name"`)}
	}
	if _, ok := mcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "MarketingCampaign.description"`)}
	}
	if _, ok := mcc.mutation.ConsumerPurchaseValue(); !ok {
		return &ValidationError{Name: "consumerPurchaseValue", err: errors.New(`ent: missing required field "MarketingCampaign.consumerPurchaseValue"`)}
	}
	if _, ok := mcc.mutation.CustomerApplicationLogic(); !ok {
		return &ValidationError{Name: "customerApplicationLogic", err: errors.New(`ent: missing required field "MarketingCampaign.customerApplicationLogic"`)}
	}
	if _, ok := mcc.mutation.InitialisationLogic(); !ok {
		return &ValidationError{Name: "initialisationLogic", err: errors.New(`ent: missing required field "MarketingCampaign.initialisationLogic"`)}
	}
	if _, ok := mcc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "MarketingCampaign.startDate"`)}
	}
	if _, ok := mcc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "endDate", err: errors.New(`ent: missing required field "MarketingCampaign.endDate"`)}
	}
	if _, ok := mcc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "MarketingCampaign.dateCreated"`)}
	}
	if _, ok := mcc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "MarketingCampaign.dateUpdated"`)}
	}
	if len(mcc.mutation.ProductIDs()) == 0 {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "MarketingCampaign.product"`)}
	}
	return nil
}

func (mcc *MarketingCampaignCreate) sqlSave(ctx context.Context) (*MarketingCampaign, error) {
	if err := mcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mcc.mutation.id = &_node.ID
	mcc.mutation.done = true
	return _node, nil
}

func (mcc *MarketingCampaignCreate) createSpec() (*MarketingCampaign, *sqlgraph.CreateSpec) {
	var (
		_node = &MarketingCampaign{config: mcc.config}
		_spec = sqlgraph.NewCreateSpec(marketingcampaign.Table, sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt))
	)
	if value, ok := mcc.mutation.Name(); ok {
		_spec.SetField(marketingcampaign.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mcc.mutation.Description(); ok {
		_spec.SetField(marketingcampaign.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mcc.mutation.ConsumerPurchaseValue(); ok {
		_spec.SetField(marketingcampaign.FieldConsumerPurchaseValue, field.TypeString, value)
		_node.ConsumerPurchaseValue = value
	}
	if value, ok := mcc.mutation.CustomerApplicationLogic(); ok {
		_spec.SetField(marketingcampaign.FieldCustomerApplicationLogic, field.TypeString, value)
		_node.CustomerApplicationLogic = value
	}
	if value, ok := mcc.mutation.InitialisationLogic(); ok {
		_spec.SetField(marketingcampaign.FieldInitialisationLogic, field.TypeString, value)
		_node.InitialisationLogic = value
	}
	if value, ok := mcc.mutation.StartDate(); ok {
		_spec.SetField(marketingcampaign.FieldStartDate, field.TypeString, value)
		_node.StartDate = value
	}
	if value, ok := mcc.mutation.EndDate(); ok {
		_spec.SetField(marketingcampaign.FieldEndDate, field.TypeString, value)
		_node.EndDate = value
	}
	if value, ok := mcc.mutation.DateCreated(); ok {
		_spec.SetField(marketingcampaign.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := mcc.mutation.DateUpdated(); ok {
		_spec.SetField(marketingcampaign.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if nodes := mcc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   marketingcampaign.ProductTable,
			Columns: []string{marketingcampaign.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcc.mutation.ConsumerRewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   marketingcampaign.ConsumerRewardTable,
			Columns: []string{marketingcampaign.ConsumerRewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MarketingCampaignCreateBulk is the builder for creating many MarketingCampaign entities in bulk.
type MarketingCampaignCreateBulk struct {
	config
	builders []*MarketingCampaignCreate
}

// Save creates the MarketingCampaign entities in the database.
func (mccb *MarketingCampaignCreateBulk) Save(ctx context.Context) ([]*MarketingCampaign, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MarketingCampaign, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MarketingCampaignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MarketingCampaignCreateBulk) SaveX(ctx context.Context) []*MarketingCampaign {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MarketingCampaignCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MarketingCampaignCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}
