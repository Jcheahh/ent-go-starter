// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/herocontent"
	"entdemo/ent/primarycontent"
	"entdemo/ent/productpageview"
	"entdemo/ent/viewanalytics"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPageViewCreate is the builder for creating a ProductPageView entity.
type ProductPageViewCreate struct {
	config
	mutation *ProductPageViewMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (ppvc *ProductPageViewCreate) SetVersion(i int) *ProductPageViewCreate {
	ppvc.mutation.SetVersion(i)
	return ppvc
}

// AddHeroContentIDs adds the "heroContent" edge to the HeroContent entity by IDs.
func (ppvc *ProductPageViewCreate) AddHeroContentIDs(ids ...int) *ProductPageViewCreate {
	ppvc.mutation.AddHeroContentIDs(ids...)
	return ppvc
}

// AddHeroContent adds the "heroContent" edges to the HeroContent entity.
func (ppvc *ProductPageViewCreate) AddHeroContent(h ...*HeroContent) *ProductPageViewCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ppvc.AddHeroContentIDs(ids...)
}

// AddPrimaryContentIDs adds the "primaryContent" edge to the PrimaryContent entity by IDs.
func (ppvc *ProductPageViewCreate) AddPrimaryContentIDs(ids ...int) *ProductPageViewCreate {
	ppvc.mutation.AddPrimaryContentIDs(ids...)
	return ppvc
}

// AddPrimaryContent adds the "primaryContent" edges to the PrimaryContent entity.
func (ppvc *ProductPageViewCreate) AddPrimaryContent(p ...*PrimaryContent) *ProductPageViewCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppvc.AddPrimaryContentIDs(ids...)
}

// AddViewAnalyticIDs adds the "viewAnalytics" edge to the ViewAnalytics entity by IDs.
func (ppvc *ProductPageViewCreate) AddViewAnalyticIDs(ids ...int) *ProductPageViewCreate {
	ppvc.mutation.AddViewAnalyticIDs(ids...)
	return ppvc
}

// AddViewAnalytics adds the "viewAnalytics" edges to the ViewAnalytics entity.
func (ppvc *ProductPageViewCreate) AddViewAnalytics(v ...*ViewAnalytics) *ProductPageViewCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ppvc.AddViewAnalyticIDs(ids...)
}

// Mutation returns the ProductPageViewMutation object of the builder.
func (ppvc *ProductPageViewCreate) Mutation() *ProductPageViewMutation {
	return ppvc.mutation
}

// Save creates the ProductPageView in the database.
func (ppvc *ProductPageViewCreate) Save(ctx context.Context) (*ProductPageView, error) {
	return withHooks[*ProductPageView, ProductPageViewMutation](ctx, ppvc.sqlSave, ppvc.mutation, ppvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppvc *ProductPageViewCreate) SaveX(ctx context.Context) *ProductPageView {
	v, err := ppvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppvc *ProductPageViewCreate) Exec(ctx context.Context) error {
	_, err := ppvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvc *ProductPageViewCreate) ExecX(ctx context.Context) {
	if err := ppvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppvc *ProductPageViewCreate) check() error {
	if _, ok := ppvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ProductPageView.version"`)}
	}
	return nil
}

func (ppvc *ProductPageViewCreate) sqlSave(ctx context.Context) (*ProductPageView, error) {
	if err := ppvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ppvc.mutation.id = &_node.ID
	ppvc.mutation.done = true
	return _node, nil
}

func (ppvc *ProductPageViewCreate) createSpec() (*ProductPageView, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductPageView{config: ppvc.config}
		_spec = sqlgraph.NewCreateSpec(productpageview.Table, sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt))
	)
	if value, ok := ppvc.mutation.Version(); ok {
		_spec.SetField(productpageview.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if nodes := ppvc.mutation.HeroContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.HeroContentTable,
			Columns: []string{productpageview.HeroContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herocontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppvc.mutation.PrimaryContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.PrimaryContentTable,
			Columns: []string{productpageview.PrimaryContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppvc.mutation.ViewAnalyticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpageview.ViewAnalyticsTable,
			Columns: []string{productpageview.ViewAnalyticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductPageViewCreateBulk is the builder for creating many ProductPageView entities in bulk.
type ProductPageViewCreateBulk struct {
	config
	builders []*ProductPageViewCreate
}

// Save creates the ProductPageView entities in the database.
func (ppvcb *ProductPageViewCreateBulk) Save(ctx context.Context) ([]*ProductPageView, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ppvcb.builders))
	nodes := make([]*ProductPageView, len(ppvcb.builders))
	mutators := make([]Mutator, len(ppvcb.builders))
	for i := range ppvcb.builders {
		func(i int, root context.Context) {
			builder := ppvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductPageViewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppvcb *ProductPageViewCreateBulk) SaveX(ctx context.Context) []*ProductPageView {
	v, err := ppvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppvcb *ProductPageViewCreateBulk) Exec(ctx context.Context) error {
	_, err := ppvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvcb *ProductPageViewCreateBulk) ExecX(ctx context.Context) {
	if err := ppvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
