// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"entdemo/ent/herocontent"
	"entdemo/ent/predicate"
	"entdemo/ent/primarycontent"
	"entdemo/ent/productpageview"
	"entdemo/ent/viewanalytics"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPageViewQuery is the builder for querying ProductPageView entities.
type ProductPageViewQuery struct {
	config
	ctx                     *QueryContext
	order                   []productpageview.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ProductPageView
	withHeroContent         *HeroContentQuery
	withPrimaryContent      *PrimaryContentQuery
	withViewAnalytics       *ViewAnalyticsQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*ProductPageView) error
	withNamedHeroContent    map[string]*HeroContentQuery
	withNamedPrimaryContent map[string]*PrimaryContentQuery
	withNamedViewAnalytics  map[string]*ViewAnalyticsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductPageViewQuery builder.
func (ppvq *ProductPageViewQuery) Where(ps ...predicate.ProductPageView) *ProductPageViewQuery {
	ppvq.predicates = append(ppvq.predicates, ps...)
	return ppvq
}

// Limit the number of records to be returned by this query.
func (ppvq *ProductPageViewQuery) Limit(limit int) *ProductPageViewQuery {
	ppvq.ctx.Limit = &limit
	return ppvq
}

// Offset to start from.
func (ppvq *ProductPageViewQuery) Offset(offset int) *ProductPageViewQuery {
	ppvq.ctx.Offset = &offset
	return ppvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ppvq *ProductPageViewQuery) Unique(unique bool) *ProductPageViewQuery {
	ppvq.ctx.Unique = &unique
	return ppvq
}

// Order specifies how the records should be ordered.
func (ppvq *ProductPageViewQuery) Order(o ...productpageview.OrderOption) *ProductPageViewQuery {
	ppvq.order = append(ppvq.order, o...)
	return ppvq
}

// QueryHeroContent chains the current query on the "heroContent" edge.
func (ppvq *ProductPageViewQuery) QueryHeroContent() *HeroContentQuery {
	query := (&HeroContentClient{config: ppvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productpageview.Table, productpageview.FieldID, selector),
			sqlgraph.To(herocontent.Table, herocontent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productpageview.HeroContentTable, productpageview.HeroContentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryContent chains the current query on the "primaryContent" edge.
func (ppvq *ProductPageViewQuery) QueryPrimaryContent() *PrimaryContentQuery {
	query := (&PrimaryContentClient{config: ppvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productpageview.Table, productpageview.FieldID, selector),
			sqlgraph.To(primarycontent.Table, primarycontent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productpageview.PrimaryContentTable, productpageview.PrimaryContentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewAnalytics chains the current query on the "viewAnalytics" edge.
func (ppvq *ProductPageViewQuery) QueryViewAnalytics() *ViewAnalyticsQuery {
	query := (&ViewAnalyticsClient{config: ppvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productpageview.Table, productpageview.FieldID, selector),
			sqlgraph.To(viewanalytics.Table, viewanalytics.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productpageview.ViewAnalyticsTable, productpageview.ViewAnalyticsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductPageView entity from the query.
// Returns a *NotFoundError when no ProductPageView was found.
func (ppvq *ProductPageViewQuery) First(ctx context.Context) (*ProductPageView, error) {
	nodes, err := ppvq.Limit(1).All(setContextOp(ctx, ppvq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productpageview.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) FirstX(ctx context.Context) *ProductPageView {
	node, err := ppvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductPageView ID from the query.
// Returns a *NotFoundError when no ProductPageView ID was found.
func (ppvq *ProductPageViewQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppvq.Limit(1).IDs(setContextOp(ctx, ppvq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productpageview.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) FirstIDX(ctx context.Context) int {
	id, err := ppvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductPageView entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductPageView entity is found.
// Returns a *NotFoundError when no ProductPageView entities are found.
func (ppvq *ProductPageViewQuery) Only(ctx context.Context) (*ProductPageView, error) {
	nodes, err := ppvq.Limit(2).All(setContextOp(ctx, ppvq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productpageview.Label}
	default:
		return nil, &NotSingularError{productpageview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) OnlyX(ctx context.Context) *ProductPageView {
	node, err := ppvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductPageView ID in the query.
// Returns a *NotSingularError when more than one ProductPageView ID is found.
// Returns a *NotFoundError when no entities are found.
func (ppvq *ProductPageViewQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppvq.Limit(2).IDs(setContextOp(ctx, ppvq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productpageview.Label}
	default:
		err = &NotSingularError{productpageview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) OnlyIDX(ctx context.Context) int {
	id, err := ppvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductPageViews.
func (ppvq *ProductPageViewQuery) All(ctx context.Context) ([]*ProductPageView, error) {
	ctx = setContextOp(ctx, ppvq.ctx, "All")
	if err := ppvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductPageView, *ProductPageViewQuery]()
	return withInterceptors[[]*ProductPageView](ctx, ppvq, qr, ppvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) AllX(ctx context.Context) []*ProductPageView {
	nodes, err := ppvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductPageView IDs.
func (ppvq *ProductPageViewQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ppvq.ctx.Unique == nil && ppvq.path != nil {
		ppvq.Unique(true)
	}
	ctx = setContextOp(ctx, ppvq.ctx, "IDs")
	if err = ppvq.Select(productpageview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) IDsX(ctx context.Context) []int {
	ids, err := ppvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ppvq *ProductPageViewQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ppvq.ctx, "Count")
	if err := ppvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ppvq, querierCount[*ProductPageViewQuery](), ppvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) CountX(ctx context.Context) int {
	count, err := ppvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ppvq *ProductPageViewQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ppvq.ctx, "Exist")
	switch _, err := ppvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ppvq *ProductPageViewQuery) ExistX(ctx context.Context) bool {
	exist, err := ppvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductPageViewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ppvq *ProductPageViewQuery) Clone() *ProductPageViewQuery {
	if ppvq == nil {
		return nil
	}
	return &ProductPageViewQuery{
		config:             ppvq.config,
		ctx:                ppvq.ctx.Clone(),
		order:              append([]productpageview.OrderOption{}, ppvq.order...),
		inters:             append([]Interceptor{}, ppvq.inters...),
		predicates:         append([]predicate.ProductPageView{}, ppvq.predicates...),
		withHeroContent:    ppvq.withHeroContent.Clone(),
		withPrimaryContent: ppvq.withPrimaryContent.Clone(),
		withViewAnalytics:  ppvq.withViewAnalytics.Clone(),
		// clone intermediate query.
		sql:  ppvq.sql.Clone(),
		path: ppvq.path,
	}
}

// WithHeroContent tells the query-builder to eager-load the nodes that are connected to
// the "heroContent" edge. The optional arguments are used to configure the query builder of the edge.
func (ppvq *ProductPageViewQuery) WithHeroContent(opts ...func(*HeroContentQuery)) *ProductPageViewQuery {
	query := (&HeroContentClient{config: ppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppvq.withHeroContent = query
	return ppvq
}

// WithPrimaryContent tells the query-builder to eager-load the nodes that are connected to
// the "primaryContent" edge. The optional arguments are used to configure the query builder of the edge.
func (ppvq *ProductPageViewQuery) WithPrimaryContent(opts ...func(*PrimaryContentQuery)) *ProductPageViewQuery {
	query := (&PrimaryContentClient{config: ppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppvq.withPrimaryContent = query
	return ppvq
}

// WithViewAnalytics tells the query-builder to eager-load the nodes that are connected to
// the "viewAnalytics" edge. The optional arguments are used to configure the query builder of the edge.
func (ppvq *ProductPageViewQuery) WithViewAnalytics(opts ...func(*ViewAnalyticsQuery)) *ProductPageViewQuery {
	query := (&ViewAnalyticsClient{config: ppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppvq.withViewAnalytics = query
	return ppvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Version int `json:"version,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductPageView.Query().
//		GroupBy(productpageview.FieldVersion).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ppvq *ProductPageViewQuery) GroupBy(field string, fields ...string) *ProductPageViewGroupBy {
	ppvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductPageViewGroupBy{build: ppvq}
	grbuild.flds = &ppvq.ctx.Fields
	grbuild.label = productpageview.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Version int `json:"version,omitempty"`
//	}
//
//	client.ProductPageView.Query().
//		Select(productpageview.FieldVersion).
//		Scan(ctx, &v)
func (ppvq *ProductPageViewQuery) Select(fields ...string) *ProductPageViewSelect {
	ppvq.ctx.Fields = append(ppvq.ctx.Fields, fields...)
	sbuild := &ProductPageViewSelect{ProductPageViewQuery: ppvq}
	sbuild.label = productpageview.Label
	sbuild.flds, sbuild.scan = &ppvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductPageViewSelect configured with the given aggregations.
func (ppvq *ProductPageViewQuery) Aggregate(fns ...AggregateFunc) *ProductPageViewSelect {
	return ppvq.Select().Aggregate(fns...)
}

func (ppvq *ProductPageViewQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ppvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ppvq); err != nil {
				return err
			}
		}
	}
	for _, f := range ppvq.ctx.Fields {
		if !productpageview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ppvq.path != nil {
		prev, err := ppvq.path(ctx)
		if err != nil {
			return err
		}
		ppvq.sql = prev
	}
	return nil
}

func (ppvq *ProductPageViewQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductPageView, error) {
	var (
		nodes       = []*ProductPageView{}
		withFKs     = ppvq.withFKs
		_spec       = ppvq.querySpec()
		loadedTypes = [3]bool{
			ppvq.withHeroContent != nil,
			ppvq.withPrimaryContent != nil,
			ppvq.withViewAnalytics != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productpageview.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductPageView).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductPageView{config: ppvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ppvq.modifiers) > 0 {
		_spec.Modifiers = ppvq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ppvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ppvq.withHeroContent; query != nil {
		if err := ppvq.loadHeroContent(ctx, query, nodes,
			func(n *ProductPageView) { n.Edges.HeroContent = []*HeroContent{} },
			func(n *ProductPageView, e *HeroContent) { n.Edges.HeroContent = append(n.Edges.HeroContent, e) }); err != nil {
			return nil, err
		}
	}
	if query := ppvq.withPrimaryContent; query != nil {
		if err := ppvq.loadPrimaryContent(ctx, query, nodes,
			func(n *ProductPageView) { n.Edges.PrimaryContent = []*PrimaryContent{} },
			func(n *ProductPageView, e *PrimaryContent) {
				n.Edges.PrimaryContent = append(n.Edges.PrimaryContent, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ppvq.withViewAnalytics; query != nil {
		if err := ppvq.loadViewAnalytics(ctx, query, nodes,
			func(n *ProductPageView) { n.Edges.ViewAnalytics = []*ViewAnalytics{} },
			func(n *ProductPageView, e *ViewAnalytics) { n.Edges.ViewAnalytics = append(n.Edges.ViewAnalytics, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ppvq.withNamedHeroContent {
		if err := ppvq.loadHeroContent(ctx, query, nodes,
			func(n *ProductPageView) { n.appendNamedHeroContent(name) },
			func(n *ProductPageView, e *HeroContent) { n.appendNamedHeroContent(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ppvq.withNamedPrimaryContent {
		if err := ppvq.loadPrimaryContent(ctx, query, nodes,
			func(n *ProductPageView) { n.appendNamedPrimaryContent(name) },
			func(n *ProductPageView, e *PrimaryContent) { n.appendNamedPrimaryContent(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ppvq.withNamedViewAnalytics {
		if err := ppvq.loadViewAnalytics(ctx, query, nodes,
			func(n *ProductPageView) { n.appendNamedViewAnalytics(name) },
			func(n *ProductPageView, e *ViewAnalytics) { n.appendNamedViewAnalytics(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ppvq.loadTotal {
		if err := ppvq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ppvq *ProductPageViewQuery) loadHeroContent(ctx context.Context, query *HeroContentQuery, nodes []*ProductPageView, init func(*ProductPageView), assign func(*ProductPageView, *HeroContent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProductPageView)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HeroContent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(productpageview.HeroContentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_page_view_hero_content
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_page_view_hero_content" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_page_view_hero_content" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ppvq *ProductPageViewQuery) loadPrimaryContent(ctx context.Context, query *PrimaryContentQuery, nodes []*ProductPageView, init func(*ProductPageView), assign func(*ProductPageView, *PrimaryContent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProductPageView)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PrimaryContent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(productpageview.PrimaryContentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_page_view_primary_content
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_page_view_primary_content" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_page_view_primary_content" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ppvq *ProductPageViewQuery) loadViewAnalytics(ctx context.Context, query *ViewAnalyticsQuery, nodes []*ProductPageView, init func(*ProductPageView), assign func(*ProductPageView, *ViewAnalytics)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProductPageView)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ViewAnalytics(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(productpageview.ViewAnalyticsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_page_view_view_analytics
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_page_view_view_analytics" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_page_view_view_analytics" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ppvq *ProductPageViewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ppvq.querySpec()
	if len(ppvq.modifiers) > 0 {
		_spec.Modifiers = ppvq.modifiers
	}
	_spec.Node.Columns = ppvq.ctx.Fields
	if len(ppvq.ctx.Fields) > 0 {
		_spec.Unique = ppvq.ctx.Unique != nil && *ppvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ppvq.driver, _spec)
}

func (ppvq *ProductPageViewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(productpageview.Table, productpageview.Columns, sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt))
	_spec.From = ppvq.sql
	if unique := ppvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ppvq.path != nil {
		_spec.Unique = true
	}
	if fields := ppvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpageview.FieldID)
		for i := range fields {
			if fields[i] != productpageview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ppvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ppvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ppvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ppvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ppvq *ProductPageViewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ppvq.driver.Dialect())
	t1 := builder.Table(productpageview.Table)
	columns := ppvq.ctx.Fields
	if len(columns) == 0 {
		columns = productpageview.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ppvq.sql != nil {
		selector = ppvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ppvq.ctx.Unique != nil && *ppvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ppvq.predicates {
		p(selector)
	}
	for _, p := range ppvq.order {
		p(selector)
	}
	if offset := ppvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ppvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedHeroContent tells the query-builder to eager-load the nodes that are connected to the "heroContent"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ppvq *ProductPageViewQuery) WithNamedHeroContent(name string, opts ...func(*HeroContentQuery)) *ProductPageViewQuery {
	query := (&HeroContentClient{config: ppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ppvq.withNamedHeroContent == nil {
		ppvq.withNamedHeroContent = make(map[string]*HeroContentQuery)
	}
	ppvq.withNamedHeroContent[name] = query
	return ppvq
}

// WithNamedPrimaryContent tells the query-builder to eager-load the nodes that are connected to the "primaryContent"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ppvq *ProductPageViewQuery) WithNamedPrimaryContent(name string, opts ...func(*PrimaryContentQuery)) *ProductPageViewQuery {
	query := (&PrimaryContentClient{config: ppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ppvq.withNamedPrimaryContent == nil {
		ppvq.withNamedPrimaryContent = make(map[string]*PrimaryContentQuery)
	}
	ppvq.withNamedPrimaryContent[name] = query
	return ppvq
}

// WithNamedViewAnalytics tells the query-builder to eager-load the nodes that are connected to the "viewAnalytics"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ppvq *ProductPageViewQuery) WithNamedViewAnalytics(name string, opts ...func(*ViewAnalyticsQuery)) *ProductPageViewQuery {
	query := (&ViewAnalyticsClient{config: ppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ppvq.withNamedViewAnalytics == nil {
		ppvq.withNamedViewAnalytics = make(map[string]*ViewAnalyticsQuery)
	}
	ppvq.withNamedViewAnalytics[name] = query
	return ppvq
}

// ProductPageViewGroupBy is the group-by builder for ProductPageView entities.
type ProductPageViewGroupBy struct {
	selector
	build *ProductPageViewQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ppvgb *ProductPageViewGroupBy) Aggregate(fns ...AggregateFunc) *ProductPageViewGroupBy {
	ppvgb.fns = append(ppvgb.fns, fns...)
	return ppvgb
}

// Scan applies the selector query and scans the result into the given value.
func (ppvgb *ProductPageViewGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ppvgb.build.ctx, "GroupBy")
	if err := ppvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductPageViewQuery, *ProductPageViewGroupBy](ctx, ppvgb.build, ppvgb, ppvgb.build.inters, v)
}

func (ppvgb *ProductPageViewGroupBy) sqlScan(ctx context.Context, root *ProductPageViewQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ppvgb.fns))
	for _, fn := range ppvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ppvgb.flds)+len(ppvgb.fns))
		for _, f := range *ppvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ppvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductPageViewSelect is the builder for selecting fields of ProductPageView entities.
type ProductPageViewSelect struct {
	*ProductPageViewQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ppvs *ProductPageViewSelect) Aggregate(fns ...AggregateFunc) *ProductPageViewSelect {
	ppvs.fns = append(ppvs.fns, fns...)
	return ppvs
}

// Scan applies the selector query and scans the result into the given value.
func (ppvs *ProductPageViewSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ppvs.ctx, "Select")
	if err := ppvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductPageViewQuery, *ProductPageViewSelect](ctx, ppvs.ProductPageViewQuery, ppvs, ppvs.inters, v)
}

func (ppvs *ProductPageViewSelect) sqlScan(ctx context.Context, root *ProductPageViewQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ppvs.fns))
	for _, fn := range ppvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ppvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
