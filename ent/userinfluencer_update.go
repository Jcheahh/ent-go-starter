// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/referrallink"
	"entdemo/ent/review"
	"entdemo/ent/tag"
	"entdemo/ent/user"
	"entdemo/ent/userinfluencer"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInfluencerUpdate is the builder for updating UserInfluencer entities.
type UserInfluencerUpdate struct {
	config
	hooks    []Hook
	mutation *UserInfluencerMutation
}

// Where appends a list predicates to the UserInfluencerUpdate builder.
func (uiu *UserInfluencerUpdate) Where(ps ...predicate.UserInfluencer) *UserInfluencerUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetPlaceholder sets the "placeholder" field.
func (uiu *UserInfluencerUpdate) SetPlaceholder(i int) *UserInfluencerUpdate {
	uiu.mutation.ResetPlaceholder()
	uiu.mutation.SetPlaceholder(i)
	return uiu
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (uiu *UserInfluencerUpdate) SetNillablePlaceholder(i *int) *UserInfluencerUpdate {
	if i != nil {
		uiu.SetPlaceholder(*i)
	}
	return uiu
}

// AddPlaceholder adds i to the "placeholder" field.
func (uiu *UserInfluencerUpdate) AddPlaceholder(i int) *UserInfluencerUpdate {
	uiu.mutation.AddPlaceholder(i)
	return uiu
}

// ClearPlaceholder clears the value of the "placeholder" field.
func (uiu *UserInfluencerUpdate) ClearPlaceholder() *UserInfluencerUpdate {
	uiu.mutation.ClearPlaceholder()
	return uiu
}

// AddUserProfileIDs adds the "userProfile" edge to the User entity by IDs.
func (uiu *UserInfluencerUpdate) AddUserProfileIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.AddUserProfileIDs(ids...)
	return uiu
}

// AddUserProfile adds the "userProfile" edges to the User entity.
func (uiu *UserInfluencerUpdate) AddUserProfile(u ...*User) *UserInfluencerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uiu.AddUserProfileIDs(ids...)
}

// AddReferralLinkIDs adds the "referralLinks" edge to the ReferralLink entity by IDs.
func (uiu *UserInfluencerUpdate) AddReferralLinkIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.AddReferralLinkIDs(ids...)
	return uiu
}

// AddReferralLinks adds the "referralLinks" edges to the ReferralLink entity.
func (uiu *UserInfluencerUpdate) AddReferralLinks(r ...*ReferralLink) *UserInfluencerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiu.AddReferralLinkIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (uiu *UserInfluencerUpdate) AddReviewIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.AddReviewIDs(ids...)
	return uiu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (uiu *UserInfluencerUpdate) AddReviews(r ...*Review) *UserInfluencerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiu.AddReviewIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (uiu *UserInfluencerUpdate) AddProductIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.AddProductIDs(ids...)
	return uiu
}

// AddProducts adds the "products" edges to the Product entity.
func (uiu *UserInfluencerUpdate) AddProducts(p ...*Product) *UserInfluencerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uiu.AddProductIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (uiu *UserInfluencerUpdate) AddTagIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.AddTagIDs(ids...)
	return uiu
}

// AddTags adds the "tags" edges to the Tag entity.
func (uiu *UserInfluencerUpdate) AddTags(t ...*Tag) *UserInfluencerUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uiu.AddTagIDs(ids...)
}

// Mutation returns the UserInfluencerMutation object of the builder.
func (uiu *UserInfluencerUpdate) Mutation() *UserInfluencerMutation {
	return uiu.mutation
}

// ClearUserProfile clears all "userProfile" edges to the User entity.
func (uiu *UserInfluencerUpdate) ClearUserProfile() *UserInfluencerUpdate {
	uiu.mutation.ClearUserProfile()
	return uiu
}

// RemoveUserProfileIDs removes the "userProfile" edge to User entities by IDs.
func (uiu *UserInfluencerUpdate) RemoveUserProfileIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.RemoveUserProfileIDs(ids...)
	return uiu
}

// RemoveUserProfile removes "userProfile" edges to User entities.
func (uiu *UserInfluencerUpdate) RemoveUserProfile(u ...*User) *UserInfluencerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uiu.RemoveUserProfileIDs(ids...)
}

// ClearReferralLinks clears all "referralLinks" edges to the ReferralLink entity.
func (uiu *UserInfluencerUpdate) ClearReferralLinks() *UserInfluencerUpdate {
	uiu.mutation.ClearReferralLinks()
	return uiu
}

// RemoveReferralLinkIDs removes the "referralLinks" edge to ReferralLink entities by IDs.
func (uiu *UserInfluencerUpdate) RemoveReferralLinkIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.RemoveReferralLinkIDs(ids...)
	return uiu
}

// RemoveReferralLinks removes "referralLinks" edges to ReferralLink entities.
func (uiu *UserInfluencerUpdate) RemoveReferralLinks(r ...*ReferralLink) *UserInfluencerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiu.RemoveReferralLinkIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (uiu *UserInfluencerUpdate) ClearReviews() *UserInfluencerUpdate {
	uiu.mutation.ClearReviews()
	return uiu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (uiu *UserInfluencerUpdate) RemoveReviewIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.RemoveReviewIDs(ids...)
	return uiu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (uiu *UserInfluencerUpdate) RemoveReviews(r ...*Review) *UserInfluencerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiu.RemoveReviewIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (uiu *UserInfluencerUpdate) ClearProducts() *UserInfluencerUpdate {
	uiu.mutation.ClearProducts()
	return uiu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (uiu *UserInfluencerUpdate) RemoveProductIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.RemoveProductIDs(ids...)
	return uiu
}

// RemoveProducts removes "products" edges to Product entities.
func (uiu *UserInfluencerUpdate) RemoveProducts(p ...*Product) *UserInfluencerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uiu.RemoveProductIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (uiu *UserInfluencerUpdate) ClearTags() *UserInfluencerUpdate {
	uiu.mutation.ClearTags()
	return uiu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (uiu *UserInfluencerUpdate) RemoveTagIDs(ids ...int) *UserInfluencerUpdate {
	uiu.mutation.RemoveTagIDs(ids...)
	return uiu
}

// RemoveTags removes "tags" edges to Tag entities.
func (uiu *UserInfluencerUpdate) RemoveTags(t ...*Tag) *UserInfluencerUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uiu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserInfluencerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserInfluencerMutation](ctx, uiu.sqlSave, uiu.mutation, uiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserInfluencerUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserInfluencerUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserInfluencerUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uiu *UserInfluencerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userinfluencer.Table, userinfluencer.Columns, sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt))
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.Placeholder(); ok {
		_spec.SetField(userinfluencer.FieldPlaceholder, field.TypeInt, value)
	}
	if value, ok := uiu.mutation.AddedPlaceholder(); ok {
		_spec.AddField(userinfluencer.FieldPlaceholder, field.TypeInt, value)
	}
	if uiu.mutation.PlaceholderCleared() {
		_spec.ClearField(userinfluencer.FieldPlaceholder, field.TypeInt)
	}
	if uiu.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.RemovedUserProfileIDs(); len(nodes) > 0 && !uiu.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiu.mutation.ReferralLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.RemovedReferralLinksIDs(); len(nodes) > 0 && !uiu.mutation.ReferralLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.ReferralLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !uiu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !uiu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !uiu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfluencer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiu.mutation.done = true
	return n, nil
}

// UserInfluencerUpdateOne is the builder for updating a single UserInfluencer entity.
type UserInfluencerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInfluencerMutation
}

// SetPlaceholder sets the "placeholder" field.
func (uiuo *UserInfluencerUpdateOne) SetPlaceholder(i int) *UserInfluencerUpdateOne {
	uiuo.mutation.ResetPlaceholder()
	uiuo.mutation.SetPlaceholder(i)
	return uiuo
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (uiuo *UserInfluencerUpdateOne) SetNillablePlaceholder(i *int) *UserInfluencerUpdateOne {
	if i != nil {
		uiuo.SetPlaceholder(*i)
	}
	return uiuo
}

// AddPlaceholder adds i to the "placeholder" field.
func (uiuo *UserInfluencerUpdateOne) AddPlaceholder(i int) *UserInfluencerUpdateOne {
	uiuo.mutation.AddPlaceholder(i)
	return uiuo
}

// ClearPlaceholder clears the value of the "placeholder" field.
func (uiuo *UserInfluencerUpdateOne) ClearPlaceholder() *UserInfluencerUpdateOne {
	uiuo.mutation.ClearPlaceholder()
	return uiuo
}

// AddUserProfileIDs adds the "userProfile" edge to the User entity by IDs.
func (uiuo *UserInfluencerUpdateOne) AddUserProfileIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.AddUserProfileIDs(ids...)
	return uiuo
}

// AddUserProfile adds the "userProfile" edges to the User entity.
func (uiuo *UserInfluencerUpdateOne) AddUserProfile(u ...*User) *UserInfluencerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uiuo.AddUserProfileIDs(ids...)
}

// AddReferralLinkIDs adds the "referralLinks" edge to the ReferralLink entity by IDs.
func (uiuo *UserInfluencerUpdateOne) AddReferralLinkIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.AddReferralLinkIDs(ids...)
	return uiuo
}

// AddReferralLinks adds the "referralLinks" edges to the ReferralLink entity.
func (uiuo *UserInfluencerUpdateOne) AddReferralLinks(r ...*ReferralLink) *UserInfluencerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiuo.AddReferralLinkIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (uiuo *UserInfluencerUpdateOne) AddReviewIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.AddReviewIDs(ids...)
	return uiuo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (uiuo *UserInfluencerUpdateOne) AddReviews(r ...*Review) *UserInfluencerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiuo.AddReviewIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (uiuo *UserInfluencerUpdateOne) AddProductIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.AddProductIDs(ids...)
	return uiuo
}

// AddProducts adds the "products" edges to the Product entity.
func (uiuo *UserInfluencerUpdateOne) AddProducts(p ...*Product) *UserInfluencerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uiuo.AddProductIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (uiuo *UserInfluencerUpdateOne) AddTagIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.AddTagIDs(ids...)
	return uiuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (uiuo *UserInfluencerUpdateOne) AddTags(t ...*Tag) *UserInfluencerUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uiuo.AddTagIDs(ids...)
}

// Mutation returns the UserInfluencerMutation object of the builder.
func (uiuo *UserInfluencerUpdateOne) Mutation() *UserInfluencerMutation {
	return uiuo.mutation
}

// ClearUserProfile clears all "userProfile" edges to the User entity.
func (uiuo *UserInfluencerUpdateOne) ClearUserProfile() *UserInfluencerUpdateOne {
	uiuo.mutation.ClearUserProfile()
	return uiuo
}

// RemoveUserProfileIDs removes the "userProfile" edge to User entities by IDs.
func (uiuo *UserInfluencerUpdateOne) RemoveUserProfileIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.RemoveUserProfileIDs(ids...)
	return uiuo
}

// RemoveUserProfile removes "userProfile" edges to User entities.
func (uiuo *UserInfluencerUpdateOne) RemoveUserProfile(u ...*User) *UserInfluencerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uiuo.RemoveUserProfileIDs(ids...)
}

// ClearReferralLinks clears all "referralLinks" edges to the ReferralLink entity.
func (uiuo *UserInfluencerUpdateOne) ClearReferralLinks() *UserInfluencerUpdateOne {
	uiuo.mutation.ClearReferralLinks()
	return uiuo
}

// RemoveReferralLinkIDs removes the "referralLinks" edge to ReferralLink entities by IDs.
func (uiuo *UserInfluencerUpdateOne) RemoveReferralLinkIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.RemoveReferralLinkIDs(ids...)
	return uiuo
}

// RemoveReferralLinks removes "referralLinks" edges to ReferralLink entities.
func (uiuo *UserInfluencerUpdateOne) RemoveReferralLinks(r ...*ReferralLink) *UserInfluencerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiuo.RemoveReferralLinkIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (uiuo *UserInfluencerUpdateOne) ClearReviews() *UserInfluencerUpdateOne {
	uiuo.mutation.ClearReviews()
	return uiuo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (uiuo *UserInfluencerUpdateOne) RemoveReviewIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.RemoveReviewIDs(ids...)
	return uiuo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (uiuo *UserInfluencerUpdateOne) RemoveReviews(r ...*Review) *UserInfluencerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uiuo.RemoveReviewIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (uiuo *UserInfluencerUpdateOne) ClearProducts() *UserInfluencerUpdateOne {
	uiuo.mutation.ClearProducts()
	return uiuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (uiuo *UserInfluencerUpdateOne) RemoveProductIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.RemoveProductIDs(ids...)
	return uiuo
}

// RemoveProducts removes "products" edges to Product entities.
func (uiuo *UserInfluencerUpdateOne) RemoveProducts(p ...*Product) *UserInfluencerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uiuo.RemoveProductIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (uiuo *UserInfluencerUpdateOne) ClearTags() *UserInfluencerUpdateOne {
	uiuo.mutation.ClearTags()
	return uiuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (uiuo *UserInfluencerUpdateOne) RemoveTagIDs(ids ...int) *UserInfluencerUpdateOne {
	uiuo.mutation.RemoveTagIDs(ids...)
	return uiuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (uiuo *UserInfluencerUpdateOne) RemoveTags(t ...*Tag) *UserInfluencerUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uiuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the UserInfluencerUpdate builder.
func (uiuo *UserInfluencerUpdateOne) Where(ps ...predicate.UserInfluencer) *UserInfluencerUpdateOne {
	uiuo.mutation.Where(ps...)
	return uiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserInfluencerUpdateOne) Select(field string, fields ...string) *UserInfluencerUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserInfluencer entity.
func (uiuo *UserInfluencerUpdateOne) Save(ctx context.Context) (*UserInfluencer, error) {
	return withHooks[*UserInfluencer, UserInfluencerMutation](ctx, uiuo.sqlSave, uiuo.mutation, uiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserInfluencerUpdateOne) SaveX(ctx context.Context) *UserInfluencer {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserInfluencerUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserInfluencerUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uiuo *UserInfluencerUpdateOne) sqlSave(ctx context.Context) (_node *UserInfluencer, err error) {
	_spec := sqlgraph.NewUpdateSpec(userinfluencer.Table, userinfluencer.Columns, sqlgraph.NewFieldSpec(userinfluencer.FieldID, field.TypeInt))
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInfluencer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinfluencer.FieldID)
		for _, f := range fields {
			if !userinfluencer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinfluencer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.Placeholder(); ok {
		_spec.SetField(userinfluencer.FieldPlaceholder, field.TypeInt, value)
	}
	if value, ok := uiuo.mutation.AddedPlaceholder(); ok {
		_spec.AddField(userinfluencer.FieldPlaceholder, field.TypeInt, value)
	}
	if uiuo.mutation.PlaceholderCleared() {
		_spec.ClearField(userinfluencer.FieldPlaceholder, field.TypeInt)
	}
	if uiuo.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.RemovedUserProfileIDs(); len(nodes) > 0 && !uiuo.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.UserProfileTable,
			Columns: []string{userinfluencer.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiuo.mutation.ReferralLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.RemovedReferralLinksIDs(); len(nodes) > 0 && !uiuo.mutation.ReferralLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.ReferralLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReferralLinksTable,
			Columns: []string{userinfluencer.ReferralLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !uiuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ReviewsTable,
			Columns: []string{userinfluencer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !uiuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.ProductsTable,
			Columns: []string{userinfluencer.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !uiuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userinfluencer.TagsTable,
			Columns: []string{userinfluencer.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserInfluencer{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfluencer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiuo.mutation.done = true
	return _node, nil
}
