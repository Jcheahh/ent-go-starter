// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/commissionstructure"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CommissionStructure is the model entity for the CommissionStructure schema.
type CommissionStructure struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CommissionValue holds the value of the "commissionValue" field.
	CommissionValue string `json:"commissionValue,omitempty"`
	// CommissionPercentage holds the value of the "commissionPercentage" field.
	CommissionPercentage string `json:"commissionPercentage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommissionStructureQuery when eager-loading is set.
	Edges                        CommissionStructureEdges `json:"edges"`
	product_commission_structure *int
	selectValues                 sql.SelectValues
}

// CommissionStructureEdges holds the relations/edges for other nodes in the graph.
type CommissionStructureEdges struct {
	// ProductSeller holds the value of the productSeller edge.
	ProductSeller []*UserSeller `json:"productSeller,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProductSeller map[string][]*UserSeller
}

// ProductSellerOrErr returns the ProductSeller value or an error if the edge
// was not loaded in eager-loading.
func (e CommissionStructureEdges) ProductSellerOrErr() ([]*UserSeller, error) {
	if e.loadedTypes[0] {
		return e.ProductSeller, nil
	}
	return nil, &NotLoadedError{edge: "productSeller"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommissionStructure) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commissionstructure.FieldID:
			values[i] = new(sql.NullInt64)
		case commissionstructure.FieldName, commissionstructure.FieldDescription, commissionstructure.FieldCommissionValue, commissionstructure.FieldCommissionPercentage:
			values[i] = new(sql.NullString)
		case commissionstructure.ForeignKeys[0]: // product_commission_structure
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommissionStructure fields.
func (cs *CommissionStructure) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commissionstructure.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case commissionstructure.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cs.Name = value.String
			}
		case commissionstructure.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cs.Description = value.String
			}
		case commissionstructure.FieldCommissionValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commissionValue", values[i])
			} else if value.Valid {
				cs.CommissionValue = value.String
			}
		case commissionstructure.FieldCommissionPercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commissionPercentage", values[i])
			} else if value.Valid {
				cs.CommissionPercentage = value.String
			}
		case commissionstructure.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_commission_structure", value)
			} else if value.Valid {
				cs.product_commission_structure = new(int)
				*cs.product_commission_structure = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommissionStructure.
// This includes values selected through modifiers, order, etc.
func (cs *CommissionStructure) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryProductSeller queries the "productSeller" edge of the CommissionStructure entity.
func (cs *CommissionStructure) QueryProductSeller() *UserSellerQuery {
	return NewCommissionStructureClient(cs.config).QueryProductSeller(cs)
}

// Update returns a builder for updating this CommissionStructure.
// Note that you need to call CommissionStructure.Unwrap() before calling this method if this CommissionStructure
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CommissionStructure) Update() *CommissionStructureUpdateOne {
	return NewCommissionStructureClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CommissionStructure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CommissionStructure) Unwrap() *CommissionStructure {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommissionStructure is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CommissionStructure) String() string {
	var builder strings.Builder
	builder.WriteString("CommissionStructure(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("name=")
	builder.WriteString(cs.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cs.Description)
	builder.WriteString(", ")
	builder.WriteString("commissionValue=")
	builder.WriteString(cs.CommissionValue)
	builder.WriteString(", ")
	builder.WriteString("commissionPercentage=")
	builder.WriteString(cs.CommissionPercentage)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProductSeller returns the ProductSeller named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cs *CommissionStructure) NamedProductSeller(name string) ([]*UserSeller, error) {
	if cs.Edges.namedProductSeller == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cs.Edges.namedProductSeller[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cs *CommissionStructure) appendNamedProductSeller(name string, edges ...*UserSeller) {
	if cs.Edges.namedProductSeller == nil {
		cs.Edges.namedProductSeller = make(map[string][]*UserSeller)
	}
	if len(edges) == 0 {
		cs.Edges.namedProductSeller[name] = []*UserSeller{}
	} else {
		cs.Edges.namedProductSeller[name] = append(cs.Edges.namedProductSeller[name], edges...)
	}
}

// CommissionStructures is a parsable slice of CommissionStructure.
type CommissionStructures []*CommissionStructure
