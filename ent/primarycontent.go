// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/primarycontent"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PrimaryContent is the model entity for the PrimaryContent schema.
type PrimaryContent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Placeholder holds the value of the "placeholder" field.
	Placeholder int `json:"placeholder,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrimaryContentQuery when eager-loading is set.
	Edges                             PrimaryContentEdges `json:"edges"`
	product_page_view_primary_content *int
	selectValues                      sql.SelectValues
}

// PrimaryContentEdges holds the relations/edges for other nodes in the graph.
type PrimaryContentEdges struct {
	// ContentBlock holds the value of the contentBlock edge.
	ContentBlock []*ContentBlock `json:"contentBlock,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedContentBlock map[string][]*ContentBlock
}

// ContentBlockOrErr returns the ContentBlock value or an error if the edge
// was not loaded in eager-loading.
func (e PrimaryContentEdges) ContentBlockOrErr() ([]*ContentBlock, error) {
	if e.loadedTypes[0] {
		return e.ContentBlock, nil
	}
	return nil, &NotLoadedError{edge: "contentBlock"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrimaryContent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case primarycontent.FieldID, primarycontent.FieldPlaceholder:
			values[i] = new(sql.NullInt64)
		case primarycontent.ForeignKeys[0]: // product_page_view_primary_content
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrimaryContent fields.
func (pc *PrimaryContent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case primarycontent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case primarycontent.FieldPlaceholder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field placeholder", values[i])
			} else if value.Valid {
				pc.Placeholder = int(value.Int64)
			}
		case primarycontent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_page_view_primary_content", value)
			} else if value.Valid {
				pc.product_page_view_primary_content = new(int)
				*pc.product_page_view_primary_content = int(value.Int64)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrimaryContent.
// This includes values selected through modifiers, order, etc.
func (pc *PrimaryContent) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryContentBlock queries the "contentBlock" edge of the PrimaryContent entity.
func (pc *PrimaryContent) QueryContentBlock() *ContentBlockQuery {
	return NewPrimaryContentClient(pc.config).QueryContentBlock(pc)
}

// Update returns a builder for updating this PrimaryContent.
// Note that you need to call PrimaryContent.Unwrap() before calling this method if this PrimaryContent
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PrimaryContent) Update() *PrimaryContentUpdateOne {
	return NewPrimaryContentClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PrimaryContent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PrimaryContent) Unwrap() *PrimaryContent {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrimaryContent is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PrimaryContent) String() string {
	var builder strings.Builder
	builder.WriteString("PrimaryContent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("placeholder=")
	builder.WriteString(fmt.Sprintf("%v", pc.Placeholder))
	builder.WriteByte(')')
	return builder.String()
}

// NamedContentBlock returns the ContentBlock named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PrimaryContent) NamedContentBlock(name string) ([]*ContentBlock, error) {
	if pc.Edges.namedContentBlock == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedContentBlock[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PrimaryContent) appendNamedContentBlock(name string, edges ...*ContentBlock) {
	if pc.Edges.namedContentBlock == nil {
		pc.Edges.namedContentBlock = make(map[string][]*ContentBlock)
	}
	if len(edges) == 0 {
		pc.Edges.namedContentBlock[name] = []*ContentBlock{}
	} else {
		pc.Edges.namedContentBlock[name] = append(pc.Edges.namedContentBlock[name], edges...)
	}
}

// PrimaryContents is a parsable slice of PrimaryContent.
type PrimaryContents []*PrimaryContent
