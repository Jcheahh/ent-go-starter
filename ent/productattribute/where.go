// Code generated by ent, DO NOT EDIT.

package productattribute

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldDescription, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldValue, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLTE(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLTE(FieldDescription, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v int) predicate.ProductAttribute {
	return predicate.ProductAttribute(sql.FieldLTE(FieldValue, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductAttribute) predicate.ProductAttribute {
	return predicate.ProductAttribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductAttribute) predicate.ProductAttribute {
	return predicate.ProductAttribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductAttribute) predicate.ProductAttribute {
	return predicate.ProductAttribute(func(s *sql.Selector) {
		p(s.Not())
	})
}
