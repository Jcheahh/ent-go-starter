// Code generated by ent, DO NOT EDIT.

package productpageview

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productpageview type in the database.
	Label = "product_page_view"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// EdgeHeroContent holds the string denoting the herocontent edge name in mutations.
	EdgeHeroContent = "heroContent"
	// EdgePrimaryContent holds the string denoting the primarycontent edge name in mutations.
	EdgePrimaryContent = "primaryContent"
	// EdgeViewAnalytics holds the string denoting the viewanalytics edge name in mutations.
	EdgeViewAnalytics = "viewAnalytics"
	// Table holds the table name of the productpageview in the database.
	Table = "product_page_views"
	// HeroContentTable is the table that holds the heroContent relation/edge.
	HeroContentTable = "hero_contents"
	// HeroContentInverseTable is the table name for the HeroContent entity.
	// It exists in this package in order to avoid circular dependency with the "herocontent" package.
	HeroContentInverseTable = "hero_contents"
	// HeroContentColumn is the table column denoting the heroContent relation/edge.
	HeroContentColumn = "product_page_view_hero_content"
	// PrimaryContentTable is the table that holds the primaryContent relation/edge.
	PrimaryContentTable = "primary_contents"
	// PrimaryContentInverseTable is the table name for the PrimaryContent entity.
	// It exists in this package in order to avoid circular dependency with the "primarycontent" package.
	PrimaryContentInverseTable = "primary_contents"
	// PrimaryContentColumn is the table column denoting the primaryContent relation/edge.
	PrimaryContentColumn = "product_page_view_primary_content"
	// ViewAnalyticsTable is the table that holds the viewAnalytics relation/edge.
	ViewAnalyticsTable = "view_analytics"
	// ViewAnalyticsInverseTable is the table name for the ViewAnalytics entity.
	// It exists in this package in order to avoid circular dependency with the "viewanalytics" package.
	ViewAnalyticsInverseTable = "view_analytics"
	// ViewAnalyticsColumn is the table column denoting the viewAnalytics relation/edge.
	ViewAnalyticsColumn = "product_page_view_view_analytics"
)

// Columns holds all SQL columns for productpageview fields.
var Columns = []string{
	FieldID,
	FieldVersion,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_page_views"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_product_page_views",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProductPageView queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByHeroContentCount orders the results by heroContent count.
func ByHeroContentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHeroContentStep(), opts...)
	}
}

// ByHeroContent orders the results by heroContent terms.
func ByHeroContent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHeroContentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrimaryContentCount orders the results by primaryContent count.
func ByPrimaryContentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrimaryContentStep(), opts...)
	}
}

// ByPrimaryContent orders the results by primaryContent terms.
func ByPrimaryContent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrimaryContentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByViewAnalyticsCount orders the results by viewAnalytics count.
func ByViewAnalyticsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newViewAnalyticsStep(), opts...)
	}
}

// ByViewAnalytics orders the results by viewAnalytics terms.
func ByViewAnalytics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newViewAnalyticsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHeroContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HeroContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HeroContentTable, HeroContentColumn),
	)
}
func newPrimaryContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrimaryContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PrimaryContentTable, PrimaryContentColumn),
	)
}
func newViewAnalyticsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ViewAnalyticsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ViewAnalyticsTable, ViewAnalyticsColumn),
	)
}
