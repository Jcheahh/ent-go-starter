// Code generated by ent, DO NOT EDIT.

package productpageview

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldLTE(FieldID, id))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldEQ(FieldVersion, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.ProductPageView {
	return predicate.ProductPageView(sql.FieldLTE(FieldVersion, v))
}

// HasHeroContent applies the HasEdge predicate on the "heroContent" edge.
func HasHeroContent() predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeroContentTable, HeroContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeroContentWith applies the HasEdge predicate on the "heroContent" edge with a given conditions (other predicates).
func HasHeroContentWith(preds ...predicate.HeroContent) predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		step := newHeroContentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryContent applies the HasEdge predicate on the "primaryContent" edge.
func HasPrimaryContent() predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrimaryContentTable, PrimaryContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryContentWith applies the HasEdge predicate on the "primaryContent" edge with a given conditions (other predicates).
func HasPrimaryContentWith(preds ...predicate.PrimaryContent) predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		step := newPrimaryContentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasViewAnalytics applies the HasEdge predicate on the "viewAnalytics" edge.
func HasViewAnalytics() predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ViewAnalyticsTable, ViewAnalyticsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasViewAnalyticsWith applies the HasEdge predicate on the "viewAnalytics" edge with a given conditions (other predicates).
func HasViewAnalyticsWith(preds ...predicate.ViewAnalytics) predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		step := newViewAnalyticsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductPageView) predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductPageView) predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductPageView) predicate.ProductPageView {
	return predicate.ProductPageView(func(s *sql.Selector) {
		p(s.Not())
	})
}
