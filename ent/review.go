// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/review"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Review is the model entity for the Review schema.
type Review struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating string `json:"rating,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReviewQuery when eager-loading is set.
	Edges                   ReviewEdges `json:"edges"`
	product_reviews         *int
	user_buyer_reviews      *int
	user_influencer_reviews *int
	selectValues            sql.SelectValues
}

// ReviewEdges holds the relations/edges for other nodes in the graph.
type ReviewEdges struct {
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// ProductCustomer holds the value of the productCustomer edge.
	ProductCustomer []*UserBuyer `json:"productCustomer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedProduct         map[string][]*Product
	namedProductCustomer map[string][]*UserBuyer
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e ReviewEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ProductCustomerOrErr returns the ProductCustomer value or an error if the edge
// was not loaded in eager-loading.
func (e ReviewEdges) ProductCustomerOrErr() ([]*UserBuyer, error) {
	if e.loadedTypes[1] {
		return e.ProductCustomer, nil
	}
	return nil, &NotLoadedError{edge: "productCustomer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Review) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case review.FieldID:
			values[i] = new(sql.NullInt64)
		case review.FieldType, review.FieldContent, review.FieldRating, review.FieldDateCreated:
			values[i] = new(sql.NullString)
		case review.ForeignKeys[0]: // product_reviews
			values[i] = new(sql.NullInt64)
		case review.ForeignKeys[1]: // user_buyer_reviews
			values[i] = new(sql.NullInt64)
		case review.ForeignKeys[2]: // user_influencer_reviews
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Review fields.
func (r *Review) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case review.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case review.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case review.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case review.FieldRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				r.Rating = value.String
			}
		case review.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				r.DateCreated = value.String
			}
		case review.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_reviews", value)
			} else if value.Valid {
				r.product_reviews = new(int)
				*r.product_reviews = int(value.Int64)
			}
		case review.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_buyer_reviews", value)
			} else if value.Valid {
				r.user_buyer_reviews = new(int)
				*r.user_buyer_reviews = int(value.Int64)
			}
		case review.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_influencer_reviews", value)
			} else if value.Valid {
				r.user_influencer_reviews = new(int)
				*r.user_influencer_reviews = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Review.
// This includes values selected through modifiers, order, etc.
func (r *Review) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the Review entity.
func (r *Review) QueryProduct() *ProductQuery {
	return NewReviewClient(r.config).QueryProduct(r)
}

// QueryProductCustomer queries the "productCustomer" edge of the Review entity.
func (r *Review) QueryProductCustomer() *UserBuyerQuery {
	return NewReviewClient(r.config).QueryProductCustomer(r)
}

// Update returns a builder for updating this Review.
// Note that you need to call Review.Unwrap() before calling this method if this Review
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Review) Update() *ReviewUpdateOne {
	return NewReviewClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Review entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Review) Unwrap() *Review {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Review is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Review) String() string {
	var builder strings.Builder
	builder.WriteString("Review(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(r.Content)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(r.Rating)
	builder.WriteString(", ")
	builder.WriteString("dateCreated=")
	builder.WriteString(r.DateCreated)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProduct returns the Product named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Review) NamedProduct(name string) ([]*Product, error) {
	if r.Edges.namedProduct == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedProduct[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Review) appendNamedProduct(name string, edges ...*Product) {
	if r.Edges.namedProduct == nil {
		r.Edges.namedProduct = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		r.Edges.namedProduct[name] = []*Product{}
	} else {
		r.Edges.namedProduct[name] = append(r.Edges.namedProduct[name], edges...)
	}
}

// NamedProductCustomer returns the ProductCustomer named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Review) NamedProductCustomer(name string) ([]*UserBuyer, error) {
	if r.Edges.namedProductCustomer == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedProductCustomer[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Review) appendNamedProductCustomer(name string, edges ...*UserBuyer) {
	if r.Edges.namedProductCustomer == nil {
		r.Edges.namedProductCustomer = make(map[string][]*UserBuyer)
	}
	if len(edges) == 0 {
		r.Edges.namedProductCustomer[name] = []*UserBuyer{}
	} else {
		r.Edges.namedProductCustomer[name] = append(r.Edges.namedProductCustomer[name], edges...)
	}
}

// Reviews is a parsable slice of Review.
type Reviews []*Review
