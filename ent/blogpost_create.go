// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/blogpost"
	"entdemo/ent/userseller"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogPostCreate is the builder for creating a BlogPost entity.
type BlogPostCreate struct {
	config
	mutation *BlogPostMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (bpc *BlogPostCreate) SetTitle(s string) *BlogPostCreate {
	bpc.mutation.SetTitle(s)
	return bpc
}

// SetContent sets the "content" field.
func (bpc *BlogPostCreate) SetContent(s string) *BlogPostCreate {
	bpc.mutation.SetContent(s)
	return bpc
}

// SetDateCreated sets the "dateCreated" field.
func (bpc *BlogPostCreate) SetDateCreated(s string) *BlogPostCreate {
	bpc.mutation.SetDateCreated(s)
	return bpc
}

// SetDateUpdated sets the "dateUpdated" field.
func (bpc *BlogPostCreate) SetDateUpdated(s string) *BlogPostCreate {
	bpc.mutation.SetDateUpdated(s)
	return bpc
}

// AddAuthorIDs adds the "author" edge to the UserSeller entity by IDs.
func (bpc *BlogPostCreate) AddAuthorIDs(ids ...int) *BlogPostCreate {
	bpc.mutation.AddAuthorIDs(ids...)
	return bpc
}

// AddAuthor adds the "author" edges to the UserSeller entity.
func (bpc *BlogPostCreate) AddAuthor(u ...*UserSeller) *BlogPostCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bpc.AddAuthorIDs(ids...)
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpc *BlogPostCreate) Mutation() *BlogPostMutation {
	return bpc.mutation
}

// Save creates the BlogPost in the database.
func (bpc *BlogPostCreate) Save(ctx context.Context) (*BlogPost, error) {
	return withHooks[*BlogPost, BlogPostMutation](ctx, bpc.sqlSave, bpc.mutation, bpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BlogPostCreate) SaveX(ctx context.Context) *BlogPost {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BlogPostCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BlogPostCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BlogPostCreate) check() error {
	if _, ok := bpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlogPost.title"`)}
	}
	if _, ok := bpc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlogPost.content"`)}
	}
	if _, ok := bpc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "BlogPost.dateCreated"`)}
	}
	if _, ok := bpc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "BlogPost.dateUpdated"`)}
	}
	return nil
}

func (bpc *BlogPostCreate) sqlSave(ctx context.Context) (*BlogPost, error) {
	if err := bpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bpc.mutation.id = &_node.ID
	bpc.mutation.done = true
	return _node, nil
}

func (bpc *BlogPostCreate) createSpec() (*BlogPost, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogPost{config: bpc.config}
		_spec = sqlgraph.NewCreateSpec(blogpost.Table, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt))
	)
	if value, ok := bpc.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bpc.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := bpc.mutation.DateCreated(); ok {
		_spec.SetField(blogpost.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := bpc.mutation.DateUpdated(); ok {
		_spec.SetField(blogpost.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if nodes := bpc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.AuthorTable,
			Columns: []string{blogpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogPostCreateBulk is the builder for creating many BlogPost entities in bulk.
type BlogPostCreateBulk struct {
	config
	builders []*BlogPostCreate
}

// Save creates the BlogPost entities in the database.
func (bpcb *BlogPostCreateBulk) Save(ctx context.Context) ([]*BlogPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BlogPost, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BlogPostCreateBulk) SaveX(ctx context.Context) []*BlogPost {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BlogPostCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BlogPostCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
