// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/contentblock"
	"entdemo/ent/predicate"
	"entdemo/ent/primarycontent"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrimaryContentUpdate is the builder for updating PrimaryContent entities.
type PrimaryContentUpdate struct {
	config
	hooks    []Hook
	mutation *PrimaryContentMutation
}

// Where appends a list predicates to the PrimaryContentUpdate builder.
func (pcu *PrimaryContentUpdate) Where(ps ...predicate.PrimaryContent) *PrimaryContentUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetPlaceholder sets the "placeholder" field.
func (pcu *PrimaryContentUpdate) SetPlaceholder(i int) *PrimaryContentUpdate {
	pcu.mutation.ResetPlaceholder()
	pcu.mutation.SetPlaceholder(i)
	return pcu
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (pcu *PrimaryContentUpdate) SetNillablePlaceholder(i *int) *PrimaryContentUpdate {
	if i != nil {
		pcu.SetPlaceholder(*i)
	}
	return pcu
}

// AddPlaceholder adds i to the "placeholder" field.
func (pcu *PrimaryContentUpdate) AddPlaceholder(i int) *PrimaryContentUpdate {
	pcu.mutation.AddPlaceholder(i)
	return pcu
}

// ClearPlaceholder clears the value of the "placeholder" field.
func (pcu *PrimaryContentUpdate) ClearPlaceholder() *PrimaryContentUpdate {
	pcu.mutation.ClearPlaceholder()
	return pcu
}

// AddContentBlockIDs adds the "contentBlock" edge to the ContentBlock entity by IDs.
func (pcu *PrimaryContentUpdate) AddContentBlockIDs(ids ...int) *PrimaryContentUpdate {
	pcu.mutation.AddContentBlockIDs(ids...)
	return pcu
}

// AddContentBlock adds the "contentBlock" edges to the ContentBlock entity.
func (pcu *PrimaryContentUpdate) AddContentBlock(c ...*ContentBlock) *PrimaryContentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pcu.AddContentBlockIDs(ids...)
}

// Mutation returns the PrimaryContentMutation object of the builder.
func (pcu *PrimaryContentUpdate) Mutation() *PrimaryContentMutation {
	return pcu.mutation
}

// ClearContentBlock clears all "contentBlock" edges to the ContentBlock entity.
func (pcu *PrimaryContentUpdate) ClearContentBlock() *PrimaryContentUpdate {
	pcu.mutation.ClearContentBlock()
	return pcu
}

// RemoveContentBlockIDs removes the "contentBlock" edge to ContentBlock entities by IDs.
func (pcu *PrimaryContentUpdate) RemoveContentBlockIDs(ids ...int) *PrimaryContentUpdate {
	pcu.mutation.RemoveContentBlockIDs(ids...)
	return pcu
}

// RemoveContentBlock removes "contentBlock" edges to ContentBlock entities.
func (pcu *PrimaryContentUpdate) RemoveContentBlock(c ...*ContentBlock) *PrimaryContentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pcu.RemoveContentBlockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PrimaryContentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PrimaryContentMutation](ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PrimaryContentUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PrimaryContentUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PrimaryContentUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcu *PrimaryContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(primarycontent.Table, primarycontent.Columns, sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Placeholder(); ok {
		_spec.SetField(primarycontent.FieldPlaceholder, field.TypeInt, value)
	}
	if value, ok := pcu.mutation.AddedPlaceholder(); ok {
		_spec.AddField(primarycontent.FieldPlaceholder, field.TypeInt, value)
	}
	if pcu.mutation.PlaceholderCleared() {
		_spec.ClearField(primarycontent.FieldPlaceholder, field.TypeInt)
	}
	if pcu.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   primarycontent.ContentBlockTable,
			Columns: []string{primarycontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedContentBlockIDs(); len(nodes) > 0 && !pcu.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   primarycontent.ContentBlockTable,
			Columns: []string{primarycontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   primarycontent.ContentBlockTable,
			Columns: []string{primarycontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{primarycontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PrimaryContentUpdateOne is the builder for updating a single PrimaryContent entity.
type PrimaryContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrimaryContentMutation
}

// SetPlaceholder sets the "placeholder" field.
func (pcuo *PrimaryContentUpdateOne) SetPlaceholder(i int) *PrimaryContentUpdateOne {
	pcuo.mutation.ResetPlaceholder()
	pcuo.mutation.SetPlaceholder(i)
	return pcuo
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (pcuo *PrimaryContentUpdateOne) SetNillablePlaceholder(i *int) *PrimaryContentUpdateOne {
	if i != nil {
		pcuo.SetPlaceholder(*i)
	}
	return pcuo
}

// AddPlaceholder adds i to the "placeholder" field.
func (pcuo *PrimaryContentUpdateOne) AddPlaceholder(i int) *PrimaryContentUpdateOne {
	pcuo.mutation.AddPlaceholder(i)
	return pcuo
}

// ClearPlaceholder clears the value of the "placeholder" field.
func (pcuo *PrimaryContentUpdateOne) ClearPlaceholder() *PrimaryContentUpdateOne {
	pcuo.mutation.ClearPlaceholder()
	return pcuo
}

// AddContentBlockIDs adds the "contentBlock" edge to the ContentBlock entity by IDs.
func (pcuo *PrimaryContentUpdateOne) AddContentBlockIDs(ids ...int) *PrimaryContentUpdateOne {
	pcuo.mutation.AddContentBlockIDs(ids...)
	return pcuo
}

// AddContentBlock adds the "contentBlock" edges to the ContentBlock entity.
func (pcuo *PrimaryContentUpdateOne) AddContentBlock(c ...*ContentBlock) *PrimaryContentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pcuo.AddContentBlockIDs(ids...)
}

// Mutation returns the PrimaryContentMutation object of the builder.
func (pcuo *PrimaryContentUpdateOne) Mutation() *PrimaryContentMutation {
	return pcuo.mutation
}

// ClearContentBlock clears all "contentBlock" edges to the ContentBlock entity.
func (pcuo *PrimaryContentUpdateOne) ClearContentBlock() *PrimaryContentUpdateOne {
	pcuo.mutation.ClearContentBlock()
	return pcuo
}

// RemoveContentBlockIDs removes the "contentBlock" edge to ContentBlock entities by IDs.
func (pcuo *PrimaryContentUpdateOne) RemoveContentBlockIDs(ids ...int) *PrimaryContentUpdateOne {
	pcuo.mutation.RemoveContentBlockIDs(ids...)
	return pcuo
}

// RemoveContentBlock removes "contentBlock" edges to ContentBlock entities.
func (pcuo *PrimaryContentUpdateOne) RemoveContentBlock(c ...*ContentBlock) *PrimaryContentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pcuo.RemoveContentBlockIDs(ids...)
}

// Where appends a list predicates to the PrimaryContentUpdate builder.
func (pcuo *PrimaryContentUpdateOne) Where(ps ...predicate.PrimaryContent) *PrimaryContentUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PrimaryContentUpdateOne) Select(field string, fields ...string) *PrimaryContentUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PrimaryContent entity.
func (pcuo *PrimaryContentUpdateOne) Save(ctx context.Context) (*PrimaryContent, error) {
	return withHooks[*PrimaryContent, PrimaryContentMutation](ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PrimaryContentUpdateOne) SaveX(ctx context.Context) *PrimaryContent {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PrimaryContentUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PrimaryContentUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcuo *PrimaryContentUpdateOne) sqlSave(ctx context.Context) (_node *PrimaryContent, err error) {
	_spec := sqlgraph.NewUpdateSpec(primarycontent.Table, primarycontent.Columns, sqlgraph.NewFieldSpec(primarycontent.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrimaryContent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, primarycontent.FieldID)
		for _, f := range fields {
			if !primarycontent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != primarycontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Placeholder(); ok {
		_spec.SetField(primarycontent.FieldPlaceholder, field.TypeInt, value)
	}
	if value, ok := pcuo.mutation.AddedPlaceholder(); ok {
		_spec.AddField(primarycontent.FieldPlaceholder, field.TypeInt, value)
	}
	if pcuo.mutation.PlaceholderCleared() {
		_spec.ClearField(primarycontent.FieldPlaceholder, field.TypeInt)
	}
	if pcuo.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   primarycontent.ContentBlockTable,
			Columns: []string{primarycontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedContentBlockIDs(); len(nodes) > 0 && !pcuo.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   primarycontent.ContentBlockTable,
			Columns: []string{primarycontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   primarycontent.ContentBlockTable,
			Columns: []string{primarycontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrimaryContent{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{primarycontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
