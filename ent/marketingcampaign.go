// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/marketingcampaign"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MarketingCampaign is the model entity for the MarketingCampaign schema.
type MarketingCampaign struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ConsumerPurchaseValue holds the value of the "consumerPurchaseValue" field.
	ConsumerPurchaseValue string `json:"consumerPurchaseValue,omitempty"`
	// CustomerApplicationLogic holds the value of the "customerApplicationLogic" field.
	CustomerApplicationLogic string `json:"customerApplicationLogic,omitempty"`
	// InitialisationLogic holds the value of the "initialisationLogic" field.
	InitialisationLogic string `json:"initialisationLogic,omitempty"`
	// StartDate holds the value of the "startDate" field.
	StartDate string `json:"startDate,omitempty"`
	// EndDate holds the value of the "endDate" field.
	EndDate string `json:"endDate,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// DateUpdated holds the value of the "dateUpdated" field.
	DateUpdated string `json:"dateUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MarketingCampaignQuery when eager-loading is set.
	Edges                       MarketingCampaignEdges `json:"edges"`
	product_marketing_campaigns *int
	selectValues                sql.SelectValues
}

// MarketingCampaignEdges holds the relations/edges for other nodes in the graph.
type MarketingCampaignEdges struct {
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// ConsumerReward holds the value of the consumerReward edge.
	ConsumerReward []*RewardType `json:"consumerReward,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedProduct        map[string][]*Product
	namedConsumerReward map[string][]*RewardType
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e MarketingCampaignEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ConsumerRewardOrErr returns the ConsumerReward value or an error if the edge
// was not loaded in eager-loading.
func (e MarketingCampaignEdges) ConsumerRewardOrErr() ([]*RewardType, error) {
	if e.loadedTypes[1] {
		return e.ConsumerReward, nil
	}
	return nil, &NotLoadedError{edge: "consumerReward"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MarketingCampaign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case marketingcampaign.FieldID:
			values[i] = new(sql.NullInt64)
		case marketingcampaign.FieldName, marketingcampaign.FieldDescription, marketingcampaign.FieldConsumerPurchaseValue, marketingcampaign.FieldCustomerApplicationLogic, marketingcampaign.FieldInitialisationLogic, marketingcampaign.FieldStartDate, marketingcampaign.FieldEndDate, marketingcampaign.FieldDateCreated, marketingcampaign.FieldDateUpdated:
			values[i] = new(sql.NullString)
		case marketingcampaign.ForeignKeys[0]: // product_marketing_campaigns
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MarketingCampaign fields.
func (mc *MarketingCampaign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case marketingcampaign.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mc.ID = int(value.Int64)
		case marketingcampaign.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mc.Name = value.String
			}
		case marketingcampaign.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mc.Description = value.String
			}
		case marketingcampaign.FieldConsumerPurchaseValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consumerPurchaseValue", values[i])
			} else if value.Valid {
				mc.ConsumerPurchaseValue = value.String
			}
		case marketingcampaign.FieldCustomerApplicationLogic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerApplicationLogic", values[i])
			} else if value.Valid {
				mc.CustomerApplicationLogic = value.String
			}
		case marketingcampaign.FieldInitialisationLogic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field initialisationLogic", values[i])
			} else if value.Valid {
				mc.InitialisationLogic = value.String
			}
		case marketingcampaign.FieldStartDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field startDate", values[i])
			} else if value.Valid {
				mc.StartDate = value.String
			}
		case marketingcampaign.FieldEndDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endDate", values[i])
			} else if value.Valid {
				mc.EndDate = value.String
			}
		case marketingcampaign.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				mc.DateCreated = value.String
			}
		case marketingcampaign.FieldDateUpdated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateUpdated", values[i])
			} else if value.Valid {
				mc.DateUpdated = value.String
			}
		case marketingcampaign.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_marketing_campaigns", value)
			} else if value.Valid {
				mc.product_marketing_campaigns = new(int)
				*mc.product_marketing_campaigns = int(value.Int64)
			}
		default:
			mc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MarketingCampaign.
// This includes values selected through modifiers, order, etc.
func (mc *MarketingCampaign) Value(name string) (ent.Value, error) {
	return mc.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the MarketingCampaign entity.
func (mc *MarketingCampaign) QueryProduct() *ProductQuery {
	return NewMarketingCampaignClient(mc.config).QueryProduct(mc)
}

// QueryConsumerReward queries the "consumerReward" edge of the MarketingCampaign entity.
func (mc *MarketingCampaign) QueryConsumerReward() *RewardTypeQuery {
	return NewMarketingCampaignClient(mc.config).QueryConsumerReward(mc)
}

// Update returns a builder for updating this MarketingCampaign.
// Note that you need to call MarketingCampaign.Unwrap() before calling this method if this MarketingCampaign
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MarketingCampaign) Update() *MarketingCampaignUpdateOne {
	return NewMarketingCampaignClient(mc.config).UpdateOne(mc)
}

// Unwrap unwraps the MarketingCampaign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mc *MarketingCampaign) Unwrap() *MarketingCampaign {
	_tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MarketingCampaign is not a transactional entity")
	}
	mc.config.driver = _tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MarketingCampaign) String() string {
	var builder strings.Builder
	builder.WriteString("MarketingCampaign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mc.ID))
	builder.WriteString("name=")
	builder.WriteString(mc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mc.Description)
	builder.WriteString(", ")
	builder.WriteString("consumerPurchaseValue=")
	builder.WriteString(mc.ConsumerPurchaseValue)
	builder.WriteString(", ")
	builder.WriteString("customerApplicationLogic=")
	builder.WriteString(mc.CustomerApplicationLogic)
	builder.WriteString(", ")
	builder.WriteString("initialisationLogic=")
	builder.WriteString(mc.InitialisationLogic)
	builder.WriteString(", ")
	builder.WriteString("startDate=")
	builder.WriteString(mc.StartDate)
	builder.WriteString(", ")
	builder.WriteString("endDate=")
	builder.WriteString(mc.EndDate)
	builder.WriteString(", ")
	builder.WriteString("dateCreated=")
	builder.WriteString(mc.DateCreated)
	builder.WriteString(", ")
	builder.WriteString("dateUpdated=")
	builder.WriteString(mc.DateUpdated)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProduct returns the Product named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mc *MarketingCampaign) NamedProduct(name string) ([]*Product, error) {
	if mc.Edges.namedProduct == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mc.Edges.namedProduct[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mc *MarketingCampaign) appendNamedProduct(name string, edges ...*Product) {
	if mc.Edges.namedProduct == nil {
		mc.Edges.namedProduct = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		mc.Edges.namedProduct[name] = []*Product{}
	} else {
		mc.Edges.namedProduct[name] = append(mc.Edges.namedProduct[name], edges...)
	}
}

// NamedConsumerReward returns the ConsumerReward named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mc *MarketingCampaign) NamedConsumerReward(name string) ([]*RewardType, error) {
	if mc.Edges.namedConsumerReward == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mc.Edges.namedConsumerReward[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mc *MarketingCampaign) appendNamedConsumerReward(name string, edges ...*RewardType) {
	if mc.Edges.namedConsumerReward == nil {
		mc.Edges.namedConsumerReward = make(map[string][]*RewardType)
	}
	if len(edges) == 0 {
		mc.Edges.namedConsumerReward[name] = []*RewardType{}
	} else {
		mc.Edges.namedConsumerReward[name] = append(mc.Edges.namedConsumerReward[name], edges...)
	}
}

// MarketingCampaigns is a parsable slice of MarketingCampaign.
type MarketingCampaigns []*MarketingCampaign
