// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/shippingaddress"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShippingAddress is the model entity for the ShippingAddress schema.
type ShippingAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip string `json:"zip,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// DateUpdated holds the value of the "dateUpdated" field.
	DateUpdated             string `json:"dateUpdated,omitempty"`
	user_shipping_addresses *int
	selectValues            sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShippingAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shippingaddress.FieldID:
			values[i] = new(sql.NullInt64)
		case shippingaddress.FieldName, shippingaddress.FieldAddress, shippingaddress.FieldCity, shippingaddress.FieldState, shippingaddress.FieldZip, shippingaddress.FieldCountry, shippingaddress.FieldDateCreated, shippingaddress.FieldDateUpdated:
			values[i] = new(sql.NullString)
		case shippingaddress.ForeignKeys[0]: // user_shipping_addresses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShippingAddress fields.
func (sa *ShippingAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shippingaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int(value.Int64)
		case shippingaddress.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sa.Name = value.String
			}
		case shippingaddress.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				sa.Address = value.String
			}
		case shippingaddress.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				sa.City = value.String
			}
		case shippingaddress.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				sa.State = value.String
			}
		case shippingaddress.FieldZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				sa.Zip = value.String
			}
		case shippingaddress.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				sa.Country = value.String
			}
		case shippingaddress.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				sa.DateCreated = value.String
			}
		case shippingaddress.FieldDateUpdated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateUpdated", values[i])
			} else if value.Valid {
				sa.DateUpdated = value.String
			}
		case shippingaddress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_shipping_addresses", value)
			} else if value.Valid {
				sa.user_shipping_addresses = new(int)
				*sa.user_shipping_addresses = int(value.Int64)
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShippingAddress.
// This includes values selected through modifiers, order, etc.
func (sa *ShippingAddress) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// Update returns a builder for updating this ShippingAddress.
// Note that you need to call ShippingAddress.Unwrap() before calling this method if this ShippingAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *ShippingAddress) Update() *ShippingAddressUpdateOne {
	return NewShippingAddressClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the ShippingAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *ShippingAddress) Unwrap() *ShippingAddress {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShippingAddress is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *ShippingAddress) String() string {
	var builder strings.Builder
	builder.WriteString("ShippingAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("name=")
	builder.WriteString(sa.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(sa.Address)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(sa.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(sa.State)
	builder.WriteString(", ")
	builder.WriteString("zip=")
	builder.WriteString(sa.Zip)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(sa.Country)
	builder.WriteString(", ")
	builder.WriteString("dateCreated=")
	builder.WriteString(sa.DateCreated)
	builder.WriteString(", ")
	builder.WriteString("dateUpdated=")
	builder.WriteString(sa.DateUpdated)
	builder.WriteByte(')')
	return builder.String()
}

// ShippingAddresses is a parsable slice of ShippingAddress.
type ShippingAddresses []*ShippingAddress
