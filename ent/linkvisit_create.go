// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/linkvisit"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkVisitCreate is the builder for creating a LinkVisit entity.
type LinkVisitCreate struct {
	config
	mutation *LinkVisitMutation
	hooks    []Hook
}

// SetDateCreated sets the "dateCreated" field.
func (lvc *LinkVisitCreate) SetDateCreated(s string) *LinkVisitCreate {
	lvc.mutation.SetDateCreated(s)
	return lvc
}

// SetIpAddress sets the "ipAddress" field.
func (lvc *LinkVisitCreate) SetIpAddress(s string) *LinkVisitCreate {
	lvc.mutation.SetIpAddress(s)
	return lvc
}

// SetSaleValue sets the "saleValue" field.
func (lvc *LinkVisitCreate) SetSaleValue(i int) *LinkVisitCreate {
	lvc.mutation.SetSaleValue(i)
	return lvc
}

// SetCommissionEarned sets the "commissionEarned" field.
func (lvc *LinkVisitCreate) SetCommissionEarned(i int) *LinkVisitCreate {
	lvc.mutation.SetCommissionEarned(i)
	return lvc
}

// Mutation returns the LinkVisitMutation object of the builder.
func (lvc *LinkVisitCreate) Mutation() *LinkVisitMutation {
	return lvc.mutation
}

// Save creates the LinkVisit in the database.
func (lvc *LinkVisitCreate) Save(ctx context.Context) (*LinkVisit, error) {
	return withHooks[*LinkVisit, LinkVisitMutation](ctx, lvc.sqlSave, lvc.mutation, lvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lvc *LinkVisitCreate) SaveX(ctx context.Context) *LinkVisit {
	v, err := lvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lvc *LinkVisitCreate) Exec(ctx context.Context) error {
	_, err := lvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvc *LinkVisitCreate) ExecX(ctx context.Context) {
	if err := lvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lvc *LinkVisitCreate) check() error {
	if _, ok := lvc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "LinkVisit.dateCreated"`)}
	}
	if _, ok := lvc.mutation.IpAddress(); !ok {
		return &ValidationError{Name: "ipAddress", err: errors.New(`ent: missing required field "LinkVisit.ipAddress"`)}
	}
	if _, ok := lvc.mutation.SaleValue(); !ok {
		return &ValidationError{Name: "saleValue", err: errors.New(`ent: missing required field "LinkVisit.saleValue"`)}
	}
	if _, ok := lvc.mutation.CommissionEarned(); !ok {
		return &ValidationError{Name: "commissionEarned", err: errors.New(`ent: missing required field "LinkVisit.commissionEarned"`)}
	}
	return nil
}

func (lvc *LinkVisitCreate) sqlSave(ctx context.Context) (*LinkVisit, error) {
	if err := lvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lvc.mutation.id = &_node.ID
	lvc.mutation.done = true
	return _node, nil
}

func (lvc *LinkVisitCreate) createSpec() (*LinkVisit, *sqlgraph.CreateSpec) {
	var (
		_node = &LinkVisit{config: lvc.config}
		_spec = sqlgraph.NewCreateSpec(linkvisit.Table, sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt))
	)
	if value, ok := lvc.mutation.DateCreated(); ok {
		_spec.SetField(linkvisit.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := lvc.mutation.IpAddress(); ok {
		_spec.SetField(linkvisit.FieldIpAddress, field.TypeString, value)
		_node.IpAddress = value
	}
	if value, ok := lvc.mutation.SaleValue(); ok {
		_spec.SetField(linkvisit.FieldSaleValue, field.TypeInt, value)
		_node.SaleValue = value
	}
	if value, ok := lvc.mutation.CommissionEarned(); ok {
		_spec.SetField(linkvisit.FieldCommissionEarned, field.TypeInt, value)
		_node.CommissionEarned = value
	}
	return _node, _spec
}

// LinkVisitCreateBulk is the builder for creating many LinkVisit entities in bulk.
type LinkVisitCreateBulk struct {
	config
	builders []*LinkVisitCreate
}

// Save creates the LinkVisit entities in the database.
func (lvcb *LinkVisitCreateBulk) Save(ctx context.Context) ([]*LinkVisit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lvcb.builders))
	nodes := make([]*LinkVisit, len(lvcb.builders))
	mutators := make([]Mutator, len(lvcb.builders))
	for i := range lvcb.builders {
		func(i int, root context.Context) {
			builder := lvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinkVisitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lvcb *LinkVisitCreateBulk) SaveX(ctx context.Context) []*LinkVisit {
	v, err := lvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lvcb *LinkVisitCreateBulk) Exec(ctx context.Context) error {
	_, err := lvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvcb *LinkVisitCreateBulk) ExecX(ctx context.Context) {
	if err := lvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
