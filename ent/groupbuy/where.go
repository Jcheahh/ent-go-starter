// Code generated by ent, DO NOT EDIT.

package groupbuy

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLTE(FieldID, id))
}

// DateCreated applies equality check predicate on the "dateCreated" field. It's identical to DateCreatedEQ.
func DateCreated(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldDateCreated, v))
}

// ProductPrice applies equality check predicate on the "productPrice" field. It's identical to ProductPriceEQ.
func ProductPrice(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldProductPrice, v))
}

// Moq applies equality check predicate on the "moq" field. It's identical to MoqEQ.
func Moq(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldMoq, v))
}

// StartDate applies equality check predicate on the "startDate" field. It's identical to StartDateEQ.
func StartDate(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "endDate" field. It's identical to EndDateEQ.
func EndDate(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldEndDate, v))
}

// DateCreatedEQ applies the EQ predicate on the "dateCreated" field.
func DateCreatedEQ(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "dateCreated" field.
func DateCreatedNEQ(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "dateCreated" field.
func DateCreatedIn(vs ...string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "dateCreated" field.
func DateCreatedNotIn(vs ...string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "dateCreated" field.
func DateCreatedGT(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "dateCreated" field.
func DateCreatedGTE(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "dateCreated" field.
func DateCreatedLT(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "dateCreated" field.
func DateCreatedLTE(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLTE(FieldDateCreated, v))
}

// DateCreatedContains applies the Contains predicate on the "dateCreated" field.
func DateCreatedContains(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldContains(FieldDateCreated, v))
}

// DateCreatedHasPrefix applies the HasPrefix predicate on the "dateCreated" field.
func DateCreatedHasPrefix(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldHasPrefix(FieldDateCreated, v))
}

// DateCreatedHasSuffix applies the HasSuffix predicate on the "dateCreated" field.
func DateCreatedHasSuffix(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldHasSuffix(FieldDateCreated, v))
}

// DateCreatedEqualFold applies the EqualFold predicate on the "dateCreated" field.
func DateCreatedEqualFold(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEqualFold(FieldDateCreated, v))
}

// DateCreatedContainsFold applies the ContainsFold predicate on the "dateCreated" field.
func DateCreatedContainsFold(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldContainsFold(FieldDateCreated, v))
}

// ProductPriceEQ applies the EQ predicate on the "productPrice" field.
func ProductPriceEQ(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldProductPrice, v))
}

// ProductPriceNEQ applies the NEQ predicate on the "productPrice" field.
func ProductPriceNEQ(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNEQ(FieldProductPrice, v))
}

// ProductPriceIn applies the In predicate on the "productPrice" field.
func ProductPriceIn(vs ...int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldIn(FieldProductPrice, vs...))
}

// ProductPriceNotIn applies the NotIn predicate on the "productPrice" field.
func ProductPriceNotIn(vs ...int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNotIn(FieldProductPrice, vs...))
}

// ProductPriceGT applies the GT predicate on the "productPrice" field.
func ProductPriceGT(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGT(FieldProductPrice, v))
}

// ProductPriceGTE applies the GTE predicate on the "productPrice" field.
func ProductPriceGTE(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGTE(FieldProductPrice, v))
}

// ProductPriceLT applies the LT predicate on the "productPrice" field.
func ProductPriceLT(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLT(FieldProductPrice, v))
}

// ProductPriceLTE applies the LTE predicate on the "productPrice" field.
func ProductPriceLTE(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLTE(FieldProductPrice, v))
}

// MoqEQ applies the EQ predicate on the "moq" field.
func MoqEQ(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldMoq, v))
}

// MoqNEQ applies the NEQ predicate on the "moq" field.
func MoqNEQ(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNEQ(FieldMoq, v))
}

// MoqIn applies the In predicate on the "moq" field.
func MoqIn(vs ...int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldIn(FieldMoq, vs...))
}

// MoqNotIn applies the NotIn predicate on the "moq" field.
func MoqNotIn(vs ...int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNotIn(FieldMoq, vs...))
}

// MoqGT applies the GT predicate on the "moq" field.
func MoqGT(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGT(FieldMoq, v))
}

// MoqGTE applies the GTE predicate on the "moq" field.
func MoqGTE(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGTE(FieldMoq, v))
}

// MoqLT applies the LT predicate on the "moq" field.
func MoqLT(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLT(FieldMoq, v))
}

// MoqLTE applies the LTE predicate on the "moq" field.
func MoqLTE(v int) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLTE(FieldMoq, v))
}

// StartDateEQ applies the EQ predicate on the "startDate" field.
func StartDateEQ(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "startDate" field.
func StartDateNEQ(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "startDate" field.
func StartDateIn(vs ...string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "startDate" field.
func StartDateNotIn(vs ...string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "startDate" field.
func StartDateGT(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "startDate" field.
func StartDateGTE(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "startDate" field.
func StartDateLT(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "startDate" field.
func StartDateLTE(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLTE(FieldStartDate, v))
}

// StartDateContains applies the Contains predicate on the "startDate" field.
func StartDateContains(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldContains(FieldStartDate, v))
}

// StartDateHasPrefix applies the HasPrefix predicate on the "startDate" field.
func StartDateHasPrefix(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldHasPrefix(FieldStartDate, v))
}

// StartDateHasSuffix applies the HasSuffix predicate on the "startDate" field.
func StartDateHasSuffix(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldHasSuffix(FieldStartDate, v))
}

// StartDateEqualFold applies the EqualFold predicate on the "startDate" field.
func StartDateEqualFold(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEqualFold(FieldStartDate, v))
}

// StartDateContainsFold applies the ContainsFold predicate on the "startDate" field.
func StartDateContainsFold(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldContainsFold(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "endDate" field.
func EndDateEQ(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "endDate" field.
func EndDateNEQ(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "endDate" field.
func EndDateIn(vs ...string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "endDate" field.
func EndDateNotIn(vs ...string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "endDate" field.
func EndDateGT(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "endDate" field.
func EndDateGTE(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "endDate" field.
func EndDateLT(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "endDate" field.
func EndDateLTE(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldLTE(FieldEndDate, v))
}

// EndDateContains applies the Contains predicate on the "endDate" field.
func EndDateContains(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldContains(FieldEndDate, v))
}

// EndDateHasPrefix applies the HasPrefix predicate on the "endDate" field.
func EndDateHasPrefix(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldHasPrefix(FieldEndDate, v))
}

// EndDateHasSuffix applies the HasSuffix predicate on the "endDate" field.
func EndDateHasSuffix(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldHasSuffix(FieldEndDate, v))
}

// EndDateEqualFold applies the EqualFold predicate on the "endDate" field.
func EndDateEqualFold(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldEqualFold(FieldEndDate, v))
}

// EndDateContainsFold applies the ContainsFold predicate on the "endDate" field.
func EndDateContainsFold(v string) predicate.GroupBuy {
	return predicate.GroupBuy(sql.FieldContainsFold(FieldEndDate, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransaction applies the HasEdge predicate on the "transaction" edge.
func HasTransaction() predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionWith applies the HasEdge predicate on the "transaction" edge with a given conditions (other predicates).
func HasTransactionWith(preds ...predicate.Transaction) predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		step := newTransactionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupBuy) predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupBuy) predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupBuy) predicate.GroupBuy {
	return predicate.GroupBuy(func(s *sql.Selector) {
		p(s.Not())
	})
}
