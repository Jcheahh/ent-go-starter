// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/linkvisit"
	"entdemo/ent/referrallink"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReferralLinkCreate is the builder for creating a ReferralLink entity.
type ReferralLinkCreate struct {
	config
	mutation *ReferralLinkMutation
	hooks    []Hook
}

// SetXid sets the "xid" field.
func (rlc *ReferralLinkCreate) SetXid(i int) *ReferralLinkCreate {
	rlc.mutation.SetXid(i)
	return rlc
}

// SetName sets the "name" field.
func (rlc *ReferralLinkCreate) SetName(s string) *ReferralLinkCreate {
	rlc.mutation.SetName(s)
	return rlc
}

// SetDescription sets the "description" field.
func (rlc *ReferralLinkCreate) SetDescription(s string) *ReferralLinkCreate {
	rlc.mutation.SetDescription(s)
	return rlc
}

// SetLink sets the "link" field.
func (rlc *ReferralLinkCreate) SetLink(s string) *ReferralLinkCreate {
	rlc.mutation.SetLink(s)
	return rlc
}

// AddVisitIDs adds the "visits" edge to the LinkVisit entity by IDs.
func (rlc *ReferralLinkCreate) AddVisitIDs(ids ...int) *ReferralLinkCreate {
	rlc.mutation.AddVisitIDs(ids...)
	return rlc
}

// AddVisits adds the "visits" edges to the LinkVisit entity.
func (rlc *ReferralLinkCreate) AddVisits(l ...*LinkVisit) *ReferralLinkCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rlc.AddVisitIDs(ids...)
}

// Mutation returns the ReferralLinkMutation object of the builder.
func (rlc *ReferralLinkCreate) Mutation() *ReferralLinkMutation {
	return rlc.mutation
}

// Save creates the ReferralLink in the database.
func (rlc *ReferralLinkCreate) Save(ctx context.Context) (*ReferralLink, error) {
	return withHooks[*ReferralLink, ReferralLinkMutation](ctx, rlc.sqlSave, rlc.mutation, rlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rlc *ReferralLinkCreate) SaveX(ctx context.Context) *ReferralLink {
	v, err := rlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlc *ReferralLinkCreate) Exec(ctx context.Context) error {
	_, err := rlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlc *ReferralLinkCreate) ExecX(ctx context.Context) {
	if err := rlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlc *ReferralLinkCreate) check() error {
	if _, ok := rlc.mutation.Xid(); !ok {
		return &ValidationError{Name: "xid", err: errors.New(`ent: missing required field "ReferralLink.xid"`)}
	}
	if _, ok := rlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ReferralLink.name"`)}
	}
	if _, ok := rlc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ReferralLink.description"`)}
	}
	if _, ok := rlc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "ReferralLink.link"`)}
	}
	return nil
}

func (rlc *ReferralLinkCreate) sqlSave(ctx context.Context) (*ReferralLink, error) {
	if err := rlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rlc.mutation.id = &_node.ID
	rlc.mutation.done = true
	return _node, nil
}

func (rlc *ReferralLinkCreate) createSpec() (*ReferralLink, *sqlgraph.CreateSpec) {
	var (
		_node = &ReferralLink{config: rlc.config}
		_spec = sqlgraph.NewCreateSpec(referrallink.Table, sqlgraph.NewFieldSpec(referrallink.FieldID, field.TypeInt))
	)
	if value, ok := rlc.mutation.Xid(); ok {
		_spec.SetField(referrallink.FieldXid, field.TypeInt, value)
		_node.Xid = value
	}
	if value, ok := rlc.mutation.Name(); ok {
		_spec.SetField(referrallink.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rlc.mutation.Description(); ok {
		_spec.SetField(referrallink.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rlc.mutation.Link(); ok {
		_spec.SetField(referrallink.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if nodes := rlc.mutation.VisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referrallink.VisitsTable,
			Columns: []string{referrallink.VisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkvisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReferralLinkCreateBulk is the builder for creating many ReferralLink entities in bulk.
type ReferralLinkCreateBulk struct {
	config
	builders []*ReferralLinkCreate
}

// Save creates the ReferralLink entities in the database.
func (rlcb *ReferralLinkCreateBulk) Save(ctx context.Context) ([]*ReferralLink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rlcb.builders))
	nodes := make([]*ReferralLink, len(rlcb.builders))
	mutators := make([]Mutator, len(rlcb.builders))
	for i := range rlcb.builders {
		func(i int, root context.Context) {
			builder := rlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReferralLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rlcb *ReferralLinkCreateBulk) SaveX(ctx context.Context) []*ReferralLink {
	v, err := rlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlcb *ReferralLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := rlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlcb *ReferralLinkCreateBulk) ExecX(ctx context.Context) {
	if err := rlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
