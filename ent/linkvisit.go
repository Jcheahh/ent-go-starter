// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/linkvisit"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LinkVisit is the model entity for the LinkVisit schema.
type LinkVisit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// IpAddress holds the value of the "ipAddress" field.
	IpAddress string `json:"ipAddress,omitempty"`
	// SaleValue holds the value of the "saleValue" field.
	SaleValue int `json:"saleValue,omitempty"`
	// CommissionEarned holds the value of the "commissionEarned" field.
	CommissionEarned         int `json:"commissionEarned,omitempty"`
	referral_link_visits     *int
	transaction_origin_link  *int
	user_buyer_links_clicked *int
	selectValues             sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinkVisit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case linkvisit.FieldID, linkvisit.FieldSaleValue, linkvisit.FieldCommissionEarned:
			values[i] = new(sql.NullInt64)
		case linkvisit.FieldDateCreated, linkvisit.FieldIpAddress:
			values[i] = new(sql.NullString)
		case linkvisit.ForeignKeys[0]: // referral_link_visits
			values[i] = new(sql.NullInt64)
		case linkvisit.ForeignKeys[1]: // transaction_origin_link
			values[i] = new(sql.NullInt64)
		case linkvisit.ForeignKeys[2]: // user_buyer_links_clicked
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinkVisit fields.
func (lv *LinkVisit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linkvisit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lv.ID = int(value.Int64)
		case linkvisit.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				lv.DateCreated = value.String
			}
		case linkvisit.FieldIpAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipAddress", values[i])
			} else if value.Valid {
				lv.IpAddress = value.String
			}
		case linkvisit.FieldSaleValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saleValue", values[i])
			} else if value.Valid {
				lv.SaleValue = int(value.Int64)
			}
		case linkvisit.FieldCommissionEarned:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field commissionEarned", values[i])
			} else if value.Valid {
				lv.CommissionEarned = int(value.Int64)
			}
		case linkvisit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field referral_link_visits", value)
			} else if value.Valid {
				lv.referral_link_visits = new(int)
				*lv.referral_link_visits = int(value.Int64)
			}
		case linkvisit.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transaction_origin_link", value)
			} else if value.Valid {
				lv.transaction_origin_link = new(int)
				*lv.transaction_origin_link = int(value.Int64)
			}
		case linkvisit.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_buyer_links_clicked", value)
			} else if value.Valid {
				lv.user_buyer_links_clicked = new(int)
				*lv.user_buyer_links_clicked = int(value.Int64)
			}
		default:
			lv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LinkVisit.
// This includes values selected through modifiers, order, etc.
func (lv *LinkVisit) Value(name string) (ent.Value, error) {
	return lv.selectValues.Get(name)
}

// Update returns a builder for updating this LinkVisit.
// Note that you need to call LinkVisit.Unwrap() before calling this method if this LinkVisit
// was returned from a transaction, and the transaction was committed or rolled back.
func (lv *LinkVisit) Update() *LinkVisitUpdateOne {
	return NewLinkVisitClient(lv.config).UpdateOne(lv)
}

// Unwrap unwraps the LinkVisit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lv *LinkVisit) Unwrap() *LinkVisit {
	_tx, ok := lv.config.driver.(*txDriver)
	if !ok {
		panic("ent: LinkVisit is not a transactional entity")
	}
	lv.config.driver = _tx.drv
	return lv
}

// String implements the fmt.Stringer.
func (lv *LinkVisit) String() string {
	var builder strings.Builder
	builder.WriteString("LinkVisit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lv.ID))
	builder.WriteString("dateCreated=")
	builder.WriteString(lv.DateCreated)
	builder.WriteString(", ")
	builder.WriteString("ipAddress=")
	builder.WriteString(lv.IpAddress)
	builder.WriteString(", ")
	builder.WriteString("saleValue=")
	builder.WriteString(fmt.Sprintf("%v", lv.SaleValue))
	builder.WriteString(", ")
	builder.WriteString("commissionEarned=")
	builder.WriteString(fmt.Sprintf("%v", lv.CommissionEarned))
	builder.WriteByte(')')
	return builder.String()
}

// LinkVisits is a parsable slice of LinkVisit.
type LinkVisits []*LinkVisit
