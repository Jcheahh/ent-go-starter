// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/herocontent"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HeroContent is the model entity for the HeroContent schema.
type HeroContent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PrimaryMessage holds the value of the "primaryMessage" field.
	PrimaryMessage string `json:"primaryMessage,omitempty"`
	// SecondaryMessage holds the value of the "secondaryMessage" field.
	SecondaryMessage string `json:"secondaryMessage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HeroContentQuery when eager-loading is set.
	Edges                          HeroContentEdges `json:"edges"`
	product_page_view_hero_content *int
	selectValues                   sql.SelectValues
}

// HeroContentEdges holds the relations/edges for other nodes in the graph.
type HeroContentEdges struct {
	// Image holds the value of the image edge.
	Image []*Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedImage map[string][]*Image
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading.
func (e HeroContentEdges) ImageOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HeroContent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case herocontent.FieldID:
			values[i] = new(sql.NullInt64)
		case herocontent.FieldPrimaryMessage, herocontent.FieldSecondaryMessage:
			values[i] = new(sql.NullString)
		case herocontent.ForeignKeys[0]: // product_page_view_hero_content
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HeroContent fields.
func (hc *HeroContent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case herocontent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hc.ID = int(value.Int64)
		case herocontent.FieldPrimaryMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primaryMessage", values[i])
			} else if value.Valid {
				hc.PrimaryMessage = value.String
			}
		case herocontent.FieldSecondaryMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secondaryMessage", values[i])
			} else if value.Valid {
				hc.SecondaryMessage = value.String
			}
		case herocontent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_page_view_hero_content", value)
			} else if value.Valid {
				hc.product_page_view_hero_content = new(int)
				*hc.product_page_view_hero_content = int(value.Int64)
			}
		default:
			hc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HeroContent.
// This includes values selected through modifiers, order, etc.
func (hc *HeroContent) Value(name string) (ent.Value, error) {
	return hc.selectValues.Get(name)
}

// QueryImage queries the "image" edge of the HeroContent entity.
func (hc *HeroContent) QueryImage() *ImageQuery {
	return NewHeroContentClient(hc.config).QueryImage(hc)
}

// Update returns a builder for updating this HeroContent.
// Note that you need to call HeroContent.Unwrap() before calling this method if this HeroContent
// was returned from a transaction, and the transaction was committed or rolled back.
func (hc *HeroContent) Update() *HeroContentUpdateOne {
	return NewHeroContentClient(hc.config).UpdateOne(hc)
}

// Unwrap unwraps the HeroContent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hc *HeroContent) Unwrap() *HeroContent {
	_tx, ok := hc.config.driver.(*txDriver)
	if !ok {
		panic("ent: HeroContent is not a transactional entity")
	}
	hc.config.driver = _tx.drv
	return hc
}

// String implements the fmt.Stringer.
func (hc *HeroContent) String() string {
	var builder strings.Builder
	builder.WriteString("HeroContent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hc.ID))
	builder.WriteString("primaryMessage=")
	builder.WriteString(hc.PrimaryMessage)
	builder.WriteString(", ")
	builder.WriteString("secondaryMessage=")
	builder.WriteString(hc.SecondaryMessage)
	builder.WriteByte(')')
	return builder.String()
}

// NamedImage returns the Image named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hc *HeroContent) NamedImage(name string) ([]*Image, error) {
	if hc.Edges.namedImage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hc.Edges.namedImage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hc *HeroContent) appendNamedImage(name string, edges ...*Image) {
	if hc.Edges.namedImage == nil {
		hc.Edges.namedImage = make(map[string][]*Image)
	}
	if len(edges) == 0 {
		hc.Edges.namedImage[name] = []*Image{}
	} else {
		hc.Edges.namedImage[name] = append(hc.Edges.namedImage[name], edges...)
	}
}

// HeroContents is a parsable slice of HeroContent.
type HeroContents []*HeroContent
