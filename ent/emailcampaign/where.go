// Code generated by ent, DO NOT EDIT.

package emailcampaign

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldLTE(FieldID, id))
}

// Xid applies equality check predicate on the "xid" field. It's identical to XidEQ.
func Xid(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldEQ(FieldXid, v))
}

// XidEQ applies the EQ predicate on the "xid" field.
func XidEQ(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldEQ(FieldXid, v))
}

// XidNEQ applies the NEQ predicate on the "xid" field.
func XidNEQ(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldNEQ(FieldXid, v))
}

// XidIn applies the In predicate on the "xid" field.
func XidIn(vs ...int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldIn(FieldXid, vs...))
}

// XidNotIn applies the NotIn predicate on the "xid" field.
func XidNotIn(vs ...int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldNotIn(FieldXid, vs...))
}

// XidGT applies the GT predicate on the "xid" field.
func XidGT(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldGT(FieldXid, v))
}

// XidGTE applies the GTE predicate on the "xid" field.
func XidGTE(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldGTE(FieldXid, v))
}

// XidLT applies the LT predicate on the "xid" field.
func XidLT(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldLT(FieldXid, v))
}

// XidLTE applies the LTE predicate on the "xid" field.
func XidLTE(v int) predicate.EmailCampaign {
	return predicate.EmailCampaign(sql.FieldLTE(FieldXid, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailCampaign) predicate.EmailCampaign {
	return predicate.EmailCampaign(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailCampaign) predicate.EmailCampaign {
	return predicate.EmailCampaign(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailCampaign) predicate.EmailCampaign {
	return predicate.EmailCampaign(func(s *sql.Selector) {
		p(s.Not())
	})
}
