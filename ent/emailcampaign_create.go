// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/emailcampaign"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailCampaignCreate is the builder for creating a EmailCampaign entity.
type EmailCampaignCreate struct {
	config
	mutation *EmailCampaignMutation
	hooks    []Hook
}

// SetXid sets the "xid" field.
func (ecc *EmailCampaignCreate) SetXid(i int) *EmailCampaignCreate {
	ecc.mutation.SetXid(i)
	return ecc
}

// Mutation returns the EmailCampaignMutation object of the builder.
func (ecc *EmailCampaignCreate) Mutation() *EmailCampaignMutation {
	return ecc.mutation
}

// Save creates the EmailCampaign in the database.
func (ecc *EmailCampaignCreate) Save(ctx context.Context) (*EmailCampaign, error) {
	return withHooks[*EmailCampaign, EmailCampaignMutation](ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EmailCampaignCreate) SaveX(ctx context.Context) *EmailCampaign {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EmailCampaignCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EmailCampaignCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EmailCampaignCreate) check() error {
	if _, ok := ecc.mutation.Xid(); !ok {
		return &ValidationError{Name: "xid", err: errors.New(`ent: missing required field "EmailCampaign.xid"`)}
	}
	return nil
}

func (ecc *EmailCampaignCreate) sqlSave(ctx context.Context) (*EmailCampaign, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EmailCampaignCreate) createSpec() (*EmailCampaign, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailCampaign{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(emailcampaign.Table, sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt))
	)
	if value, ok := ecc.mutation.Xid(); ok {
		_spec.SetField(emailcampaign.FieldXid, field.TypeInt, value)
		_node.Xid = value
	}
	return _node, _spec
}

// EmailCampaignCreateBulk is the builder for creating many EmailCampaign entities in bulk.
type EmailCampaignCreateBulk struct {
	config
	builders []*EmailCampaignCreate
}

// Save creates the EmailCampaign entities in the database.
func (eccb *EmailCampaignCreateBulk) Save(ctx context.Context) ([]*EmailCampaign, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EmailCampaign, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailCampaignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EmailCampaignCreateBulk) SaveX(ctx context.Context) []*EmailCampaign {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EmailCampaignCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EmailCampaignCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
