// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/paymentmethod"
	"entdemo/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentMethodUpdate is the builder for updating PaymentMethod entities.
type PaymentMethodUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMethodMutation
}

// Where appends a list predicates to the PaymentMethodUpdate builder.
func (pmu *PaymentMethodUpdate) Where(ps ...predicate.PaymentMethod) *PaymentMethodUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetXid sets the "xid" field.
func (pmu *PaymentMethodUpdate) SetXid(i int) *PaymentMethodUpdate {
	pmu.mutation.ResetXid()
	pmu.mutation.SetXid(i)
	return pmu
}

// AddXid adds i to the "xid" field.
func (pmu *PaymentMethodUpdate) AddXid(i int) *PaymentMethodUpdate {
	pmu.mutation.AddXid(i)
	return pmu
}

// Mutation returns the PaymentMethodMutation object of the builder.
func (pmu *PaymentMethodUpdate) Mutation() *PaymentMethodMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PaymentMethodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PaymentMethodMutation](ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PaymentMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PaymentMethodUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PaymentMethodUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmu *PaymentMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentmethod.Table, paymentmethod.Columns, sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Xid(); ok {
		_spec.SetField(paymentmethod.FieldXid, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.AddedXid(); ok {
		_spec.AddField(paymentmethod.FieldXid, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PaymentMethodUpdateOne is the builder for updating a single PaymentMethod entity.
type PaymentMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMethodMutation
}

// SetXid sets the "xid" field.
func (pmuo *PaymentMethodUpdateOne) SetXid(i int) *PaymentMethodUpdateOne {
	pmuo.mutation.ResetXid()
	pmuo.mutation.SetXid(i)
	return pmuo
}

// AddXid adds i to the "xid" field.
func (pmuo *PaymentMethodUpdateOne) AddXid(i int) *PaymentMethodUpdateOne {
	pmuo.mutation.AddXid(i)
	return pmuo
}

// Mutation returns the PaymentMethodMutation object of the builder.
func (pmuo *PaymentMethodUpdateOne) Mutation() *PaymentMethodMutation {
	return pmuo.mutation
}

// Where appends a list predicates to the PaymentMethodUpdate builder.
func (pmuo *PaymentMethodUpdateOne) Where(ps ...predicate.PaymentMethod) *PaymentMethodUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PaymentMethodUpdateOne) Select(field string, fields ...string) *PaymentMethodUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PaymentMethod entity.
func (pmuo *PaymentMethodUpdateOne) Save(ctx context.Context) (*PaymentMethod, error) {
	return withHooks[*PaymentMethod, PaymentMethodMutation](ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PaymentMethodUpdateOne) SaveX(ctx context.Context) *PaymentMethod {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PaymentMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PaymentMethodUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmuo *PaymentMethodUpdateOne) sqlSave(ctx context.Context) (_node *PaymentMethod, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentmethod.Table, paymentmethod.Columns, sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentMethod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentmethod.FieldID)
		for _, f := range fields {
			if !paymentmethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentmethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Xid(); ok {
		_spec.SetField(paymentmethod.FieldXid, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.AddedXid(); ok {
		_spec.AddField(paymentmethod.FieldXid, field.TypeInt, value)
	}
	_node = &PaymentMethod{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
