// Code generated by ent, DO NOT EDIT.

package referrallink

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the referrallink type in the database.
	Label = "referral_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldXid holds the string denoting the xid field in the database.
	FieldXid = "xid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// EdgeVisits holds the string denoting the visits edge name in mutations.
	EdgeVisits = "visits"
	// Table holds the table name of the referrallink in the database.
	Table = "referral_links"
	// VisitsTable is the table that holds the visits relation/edge.
	VisitsTable = "link_visits"
	// VisitsInverseTable is the table name for the LinkVisit entity.
	// It exists in this package in order to avoid circular dependency with the "linkvisit" package.
	VisitsInverseTable = "link_visits"
	// VisitsColumn is the table column denoting the visits relation/edge.
	VisitsColumn = "referral_link_visits"
)

// Columns holds all SQL columns for referrallink fields.
var Columns = []string{
	FieldID,
	FieldXid,
	FieldName,
	FieldDescription,
	FieldLink,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "referral_links"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_influencer_referral_links",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ReferralLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByXid orders the results by the xid field.
func ByXid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXid, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByVisitsCount orders the results by visits count.
func ByVisitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVisitsStep(), opts...)
	}
}

// ByVisits orders the results by visits terms.
func ByVisits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVisitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVisitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VisitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VisitsTable, VisitsColumn),
	)
}
