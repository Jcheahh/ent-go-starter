// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/predicate"
	"entdemo/ent/productattribute"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductAttributeUpdate is the builder for updating ProductAttribute entities.
type ProductAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductAttributeMutation
}

// Where appends a list predicates to the ProductAttributeUpdate builder.
func (pau *ProductAttributeUpdate) Where(ps ...predicate.ProductAttribute) *ProductAttributeUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetName sets the "name" field.
func (pau *ProductAttributeUpdate) SetName(i int) *ProductAttributeUpdate {
	pau.mutation.ResetName()
	pau.mutation.SetName(i)
	return pau
}

// AddName adds i to the "name" field.
func (pau *ProductAttributeUpdate) AddName(i int) *ProductAttributeUpdate {
	pau.mutation.AddName(i)
	return pau
}

// SetDescription sets the "description" field.
func (pau *ProductAttributeUpdate) SetDescription(i int) *ProductAttributeUpdate {
	pau.mutation.ResetDescription()
	pau.mutation.SetDescription(i)
	return pau
}

// AddDescription adds i to the "description" field.
func (pau *ProductAttributeUpdate) AddDescription(i int) *ProductAttributeUpdate {
	pau.mutation.AddDescription(i)
	return pau
}

// SetValue sets the "value" field.
func (pau *ProductAttributeUpdate) SetValue(i int) *ProductAttributeUpdate {
	pau.mutation.ResetValue()
	pau.mutation.SetValue(i)
	return pau
}

// AddValue adds i to the "value" field.
func (pau *ProductAttributeUpdate) AddValue(i int) *ProductAttributeUpdate {
	pau.mutation.AddValue(i)
	return pau
}

// Mutation returns the ProductAttributeMutation object of the builder.
func (pau *ProductAttributeUpdate) Mutation() *ProductAttributeMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *ProductAttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProductAttributeMutation](ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *ProductAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *ProductAttributeUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *ProductAttributeUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pau *ProductAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productattribute.Table, productattribute.Columns, sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.Name(); ok {
		_spec.SetField(productattribute.FieldName, field.TypeInt, value)
	}
	if value, ok := pau.mutation.AddedName(); ok {
		_spec.AddField(productattribute.FieldName, field.TypeInt, value)
	}
	if value, ok := pau.mutation.Description(); ok {
		_spec.SetField(productattribute.FieldDescription, field.TypeInt, value)
	}
	if value, ok := pau.mutation.AddedDescription(); ok {
		_spec.AddField(productattribute.FieldDescription, field.TypeInt, value)
	}
	if value, ok := pau.mutation.Value(); ok {
		_spec.SetField(productattribute.FieldValue, field.TypeInt, value)
	}
	if value, ok := pau.mutation.AddedValue(); ok {
		_spec.AddField(productattribute.FieldValue, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// ProductAttributeUpdateOne is the builder for updating a single ProductAttribute entity.
type ProductAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductAttributeMutation
}

// SetName sets the "name" field.
func (pauo *ProductAttributeUpdateOne) SetName(i int) *ProductAttributeUpdateOne {
	pauo.mutation.ResetName()
	pauo.mutation.SetName(i)
	return pauo
}

// AddName adds i to the "name" field.
func (pauo *ProductAttributeUpdateOne) AddName(i int) *ProductAttributeUpdateOne {
	pauo.mutation.AddName(i)
	return pauo
}

// SetDescription sets the "description" field.
func (pauo *ProductAttributeUpdateOne) SetDescription(i int) *ProductAttributeUpdateOne {
	pauo.mutation.ResetDescription()
	pauo.mutation.SetDescription(i)
	return pauo
}

// AddDescription adds i to the "description" field.
func (pauo *ProductAttributeUpdateOne) AddDescription(i int) *ProductAttributeUpdateOne {
	pauo.mutation.AddDescription(i)
	return pauo
}

// SetValue sets the "value" field.
func (pauo *ProductAttributeUpdateOne) SetValue(i int) *ProductAttributeUpdateOne {
	pauo.mutation.ResetValue()
	pauo.mutation.SetValue(i)
	return pauo
}

// AddValue adds i to the "value" field.
func (pauo *ProductAttributeUpdateOne) AddValue(i int) *ProductAttributeUpdateOne {
	pauo.mutation.AddValue(i)
	return pauo
}

// Mutation returns the ProductAttributeMutation object of the builder.
func (pauo *ProductAttributeUpdateOne) Mutation() *ProductAttributeMutation {
	return pauo.mutation
}

// Where appends a list predicates to the ProductAttributeUpdate builder.
func (pauo *ProductAttributeUpdateOne) Where(ps ...predicate.ProductAttribute) *ProductAttributeUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *ProductAttributeUpdateOne) Select(field string, fields ...string) *ProductAttributeUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated ProductAttribute entity.
func (pauo *ProductAttributeUpdateOne) Save(ctx context.Context) (*ProductAttribute, error) {
	return withHooks[*ProductAttribute, ProductAttributeMutation](ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *ProductAttributeUpdateOne) SaveX(ctx context.Context) *ProductAttribute {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *ProductAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *ProductAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pauo *ProductAttributeUpdateOne) sqlSave(ctx context.Context) (_node *ProductAttribute, err error) {
	_spec := sqlgraph.NewUpdateSpec(productattribute.Table, productattribute.Columns, sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productattribute.FieldID)
		for _, f := range fields {
			if !productattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.Name(); ok {
		_spec.SetField(productattribute.FieldName, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.AddedName(); ok {
		_spec.AddField(productattribute.FieldName, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.Description(); ok {
		_spec.SetField(productattribute.FieldDescription, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.AddedDescription(); ok {
		_spec.AddField(productattribute.FieldDescription, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.Value(); ok {
		_spec.SetField(productattribute.FieldValue, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.AddedValue(); ok {
		_spec.AddField(productattribute.FieldValue, field.TypeInt, value)
	}
	_node = &ProductAttribute{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
