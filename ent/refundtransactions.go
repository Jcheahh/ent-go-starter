// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/refundtransactions"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RefundTransactions is the model entity for the RefundTransactions schema.
type RefundTransactions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RefundAmount holds the value of the "refundAmount" field.
	RefundAmount string `json:"refundAmount,omitempty"`
	// RefundCurrency holds the value of the "refundCurrency" field.
	RefundCurrency string `json:"refundCurrency,omitempty"`
	// RefundReason holds the value of the "refundReason" field.
	RefundReason string `json:"refundReason,omitempty"`
	// RefundStatus holds the value of the "refundStatus" field.
	RefundStatus string `json:"refundStatus,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// DateUpdated holds the value of the "dateUpdated" field.
	DateUpdated string `json:"dateUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RefundTransactionsQuery when eager-loading is set.
	Edges        RefundTransactionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RefundTransactionsEdges holds the relations/edges for other nodes in the graph.
type RefundTransactionsEdges struct {
	// Transaction holds the value of the transaction edge.
	Transaction []*Transaction `json:"transaction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedTransaction map[string][]*Transaction
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading.
func (e RefundTransactionsEdges) TransactionOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.Transaction, nil
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RefundTransactions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case refundtransactions.FieldID:
			values[i] = new(sql.NullInt64)
		case refundtransactions.FieldRefundAmount, refundtransactions.FieldRefundCurrency, refundtransactions.FieldRefundReason, refundtransactions.FieldRefundStatus, refundtransactions.FieldDateCreated, refundtransactions.FieldDateUpdated:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RefundTransactions fields.
func (rt *RefundTransactions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case refundtransactions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case refundtransactions.FieldRefundAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refundAmount", values[i])
			} else if value.Valid {
				rt.RefundAmount = value.String
			}
		case refundtransactions.FieldRefundCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refundCurrency", values[i])
			} else if value.Valid {
				rt.RefundCurrency = value.String
			}
		case refundtransactions.FieldRefundReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refundReason", values[i])
			} else if value.Valid {
				rt.RefundReason = value.String
			}
		case refundtransactions.FieldRefundStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refundStatus", values[i])
			} else if value.Valid {
				rt.RefundStatus = value.String
			}
		case refundtransactions.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				rt.DateCreated = value.String
			}
		case refundtransactions.FieldDateUpdated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateUpdated", values[i])
			} else if value.Valid {
				rt.DateUpdated = value.String
			}
		default:
			rt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RefundTransactions.
// This includes values selected through modifiers, order, etc.
func (rt *RefundTransactions) Value(name string) (ent.Value, error) {
	return rt.selectValues.Get(name)
}

// QueryTransaction queries the "transaction" edge of the RefundTransactions entity.
func (rt *RefundTransactions) QueryTransaction() *TransactionQuery {
	return NewRefundTransactionsClient(rt.config).QueryTransaction(rt)
}

// Update returns a builder for updating this RefundTransactions.
// Note that you need to call RefundTransactions.Unwrap() before calling this method if this RefundTransactions
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RefundTransactions) Update() *RefundTransactionsUpdateOne {
	return NewRefundTransactionsClient(rt.config).UpdateOne(rt)
}

// Unwrap unwraps the RefundTransactions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RefundTransactions) Unwrap() *RefundTransactions {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RefundTransactions is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RefundTransactions) String() string {
	var builder strings.Builder
	builder.WriteString("RefundTransactions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("refundAmount=")
	builder.WriteString(rt.RefundAmount)
	builder.WriteString(", ")
	builder.WriteString("refundCurrency=")
	builder.WriteString(rt.RefundCurrency)
	builder.WriteString(", ")
	builder.WriteString("refundReason=")
	builder.WriteString(rt.RefundReason)
	builder.WriteString(", ")
	builder.WriteString("refundStatus=")
	builder.WriteString(rt.RefundStatus)
	builder.WriteString(", ")
	builder.WriteString("dateCreated=")
	builder.WriteString(rt.DateCreated)
	builder.WriteString(", ")
	builder.WriteString("dateUpdated=")
	builder.WriteString(rt.DateUpdated)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransaction returns the Transaction named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rt *RefundTransactions) NamedTransaction(name string) ([]*Transaction, error) {
	if rt.Edges.namedTransaction == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rt.Edges.namedTransaction[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rt *RefundTransactions) appendNamedTransaction(name string, edges ...*Transaction) {
	if rt.Edges.namedTransaction == nil {
		rt.Edges.namedTransaction = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		rt.Edges.namedTransaction[name] = []*Transaction{}
	} else {
		rt.Edges.namedTransaction[name] = append(rt.Edges.namedTransaction[name], edges...)
	}
}

// RefundTransactionsSlice is a parsable slice of RefundTransactions.
type RefundTransactionsSlice []*RefundTransactions
