// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/viewanalytics"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ViewAnalytics is the model entity for the ViewAnalytics schema.
type ViewAnalytics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Views holds the value of the "views" field.
	Views int `json:"views,omitempty"`
	// Scrolls holds the value of the "scrolls" field.
	Scrolls int `json:"scrolls,omitempty"`
	// Exits holds the value of the "exits" field.
	Exits int `json:"exits,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ViewAnalyticsQuery when eager-loading is set.
	Edges                            ViewAnalyticsEdges `json:"edges"`
	product_page_view_view_analytics *int
	selectValues                     sql.SelectValues
}

// ViewAnalyticsEdges holds the relations/edges for other nodes in the graph.
type ViewAnalyticsEdges struct {
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProduct map[string][]*Product
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e ViewAnalyticsEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ViewAnalytics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case viewanalytics.FieldID, viewanalytics.FieldViews, viewanalytics.FieldScrolls, viewanalytics.FieldExits:
			values[i] = new(sql.NullInt64)
		case viewanalytics.FieldDateCreated:
			values[i] = new(sql.NullString)
		case viewanalytics.ForeignKeys[0]: // product_page_view_view_analytics
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ViewAnalytics fields.
func (va *ViewAnalytics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case viewanalytics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			va.ID = int(value.Int64)
		case viewanalytics.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				va.Views = int(value.Int64)
			}
		case viewanalytics.FieldScrolls:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scrolls", values[i])
			} else if value.Valid {
				va.Scrolls = int(value.Int64)
			}
		case viewanalytics.FieldExits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exits", values[i])
			} else if value.Valid {
				va.Exits = int(value.Int64)
			}
		case viewanalytics.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				va.DateCreated = value.String
			}
		case viewanalytics.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_page_view_view_analytics", value)
			} else if value.Valid {
				va.product_page_view_view_analytics = new(int)
				*va.product_page_view_view_analytics = int(value.Int64)
			}
		default:
			va.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ViewAnalytics.
// This includes values selected through modifiers, order, etc.
func (va *ViewAnalytics) Value(name string) (ent.Value, error) {
	return va.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ViewAnalytics entity.
func (va *ViewAnalytics) QueryProduct() *ProductQuery {
	return NewViewAnalyticsClient(va.config).QueryProduct(va)
}

// Update returns a builder for updating this ViewAnalytics.
// Note that you need to call ViewAnalytics.Unwrap() before calling this method if this ViewAnalytics
// was returned from a transaction, and the transaction was committed or rolled back.
func (va *ViewAnalytics) Update() *ViewAnalyticsUpdateOne {
	return NewViewAnalyticsClient(va.config).UpdateOne(va)
}

// Unwrap unwraps the ViewAnalytics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (va *ViewAnalytics) Unwrap() *ViewAnalytics {
	_tx, ok := va.config.driver.(*txDriver)
	if !ok {
		panic("ent: ViewAnalytics is not a transactional entity")
	}
	va.config.driver = _tx.drv
	return va
}

// String implements the fmt.Stringer.
func (va *ViewAnalytics) String() string {
	var builder strings.Builder
	builder.WriteString("ViewAnalytics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", va.ID))
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", va.Views))
	builder.WriteString(", ")
	builder.WriteString("scrolls=")
	builder.WriteString(fmt.Sprintf("%v", va.Scrolls))
	builder.WriteString(", ")
	builder.WriteString("exits=")
	builder.WriteString(fmt.Sprintf("%v", va.Exits))
	builder.WriteString(", ")
	builder.WriteString("dateCreated=")
	builder.WriteString(va.DateCreated)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProduct returns the Product named value or an error if the edge was not
// loaded in eager-loading with this name.
func (va *ViewAnalytics) NamedProduct(name string) ([]*Product, error) {
	if va.Edges.namedProduct == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := va.Edges.namedProduct[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (va *ViewAnalytics) appendNamedProduct(name string, edges ...*Product) {
	if va.Edges.namedProduct == nil {
		va.Edges.namedProduct = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		va.Edges.namedProduct[name] = []*Product{}
	} else {
		va.Edges.namedProduct[name] = append(va.Edges.namedProduct[name], edges...)
	}
}

// ViewAnalyticsSlice is a parsable slice of ViewAnalytics.
type ViewAnalyticsSlice []*ViewAnalytics
