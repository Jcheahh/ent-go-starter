// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/bankaccount"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/shop"
	"entdemo/ent/transaction"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopUpdate is the builder for updating Shop entities.
type ShopUpdate struct {
	config
	hooks    []Hook
	mutation *ShopMutation
}

// Where appends a list predicates to the ShopUpdate builder.
func (su *ShopUpdate) Where(ps ...predicate.Shop) *ShopUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ShopUpdate) SetName(s string) *ShopUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *ShopUpdate) SetDescription(s string) *ShopUpdate {
	su.mutation.SetDescription(s)
	return su
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (su *ShopUpdate) AddProductIDs(ids ...int) *ShopUpdate {
	su.mutation.AddProductIDs(ids...)
	return su
}

// AddProducts adds the "products" edges to the Product entity.
func (su *ShopUpdate) AddProducts(p ...*Product) *ShopUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProductIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (su *ShopUpdate) AddTransactionIDs(ids ...int) *ShopUpdate {
	su.mutation.AddTransactionIDs(ids...)
	return su
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (su *ShopUpdate) AddTransactions(t ...*Transaction) *ShopUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTransactionIDs(ids...)
}

// AddBankAccountIDs adds the "bankAccounts" edge to the BankAccount entity by IDs.
func (su *ShopUpdate) AddBankAccountIDs(ids ...int) *ShopUpdate {
	su.mutation.AddBankAccountIDs(ids...)
	return su
}

// AddBankAccounts adds the "bankAccounts" edges to the BankAccount entity.
func (su *ShopUpdate) AddBankAccounts(b ...*BankAccount) *ShopUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.AddBankAccountIDs(ids...)
}

// Mutation returns the ShopMutation object of the builder.
func (su *ShopUpdate) Mutation() *ShopMutation {
	return su.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (su *ShopUpdate) ClearProducts() *ShopUpdate {
	su.mutation.ClearProducts()
	return su
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (su *ShopUpdate) RemoveProductIDs(ids ...int) *ShopUpdate {
	su.mutation.RemoveProductIDs(ids...)
	return su
}

// RemoveProducts removes "products" edges to Product entities.
func (su *ShopUpdate) RemoveProducts(p ...*Product) *ShopUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProductIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (su *ShopUpdate) ClearTransactions() *ShopUpdate {
	su.mutation.ClearTransactions()
	return su
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (su *ShopUpdate) RemoveTransactionIDs(ids ...int) *ShopUpdate {
	su.mutation.RemoveTransactionIDs(ids...)
	return su
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (su *ShopUpdate) RemoveTransactions(t ...*Transaction) *ShopUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTransactionIDs(ids...)
}

// ClearBankAccounts clears all "bankAccounts" edges to the BankAccount entity.
func (su *ShopUpdate) ClearBankAccounts() *ShopUpdate {
	su.mutation.ClearBankAccounts()
	return su
}

// RemoveBankAccountIDs removes the "bankAccounts" edge to BankAccount entities by IDs.
func (su *ShopUpdate) RemoveBankAccountIDs(ids ...int) *ShopUpdate {
	su.mutation.RemoveBankAccountIDs(ids...)
	return su
}

// RemoveBankAccounts removes "bankAccounts" edges to BankAccount entities.
func (su *ShopUpdate) RemoveBankAccounts(b ...*BankAccount) *ShopUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.RemoveBankAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShopUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ShopMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShopUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShopUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShopUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ShopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shop.Table, shop.Columns, sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(shop.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(shop.FieldDescription, field.TypeString, value)
	}
	if su.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ProductsTable,
			Columns: []string{shop.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProductsIDs(); len(nodes) > 0 && !su.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ProductsTable,
			Columns: []string{shop.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ProductsTable,
			Columns: []string{shop.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.TransactionsTable,
			Columns: []string{shop.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !su.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.TransactionsTable,
			Columns: []string{shop.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.TransactionsTable,
			Columns: []string{shop.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.BankAccountsTable,
			Columns: []string{shop.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !su.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.BankAccountsTable,
			Columns: []string{shop.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.BankAccountsTable,
			Columns: []string{shop.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShopUpdateOne is the builder for updating a single Shop entity.
type ShopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShopMutation
}

// SetName sets the "name" field.
func (suo *ShopUpdateOne) SetName(s string) *ShopUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *ShopUpdateOne) SetDescription(s string) *ShopUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (suo *ShopUpdateOne) AddProductIDs(ids ...int) *ShopUpdateOne {
	suo.mutation.AddProductIDs(ids...)
	return suo
}

// AddProducts adds the "products" edges to the Product entity.
func (suo *ShopUpdateOne) AddProducts(p ...*Product) *ShopUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProductIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (suo *ShopUpdateOne) AddTransactionIDs(ids ...int) *ShopUpdateOne {
	suo.mutation.AddTransactionIDs(ids...)
	return suo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (suo *ShopUpdateOne) AddTransactions(t ...*Transaction) *ShopUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTransactionIDs(ids...)
}

// AddBankAccountIDs adds the "bankAccounts" edge to the BankAccount entity by IDs.
func (suo *ShopUpdateOne) AddBankAccountIDs(ids ...int) *ShopUpdateOne {
	suo.mutation.AddBankAccountIDs(ids...)
	return suo
}

// AddBankAccounts adds the "bankAccounts" edges to the BankAccount entity.
func (suo *ShopUpdateOne) AddBankAccounts(b ...*BankAccount) *ShopUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.AddBankAccountIDs(ids...)
}

// Mutation returns the ShopMutation object of the builder.
func (suo *ShopUpdateOne) Mutation() *ShopMutation {
	return suo.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (suo *ShopUpdateOne) ClearProducts() *ShopUpdateOne {
	suo.mutation.ClearProducts()
	return suo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (suo *ShopUpdateOne) RemoveProductIDs(ids ...int) *ShopUpdateOne {
	suo.mutation.RemoveProductIDs(ids...)
	return suo
}

// RemoveProducts removes "products" edges to Product entities.
func (suo *ShopUpdateOne) RemoveProducts(p ...*Product) *ShopUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProductIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (suo *ShopUpdateOne) ClearTransactions() *ShopUpdateOne {
	suo.mutation.ClearTransactions()
	return suo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (suo *ShopUpdateOne) RemoveTransactionIDs(ids ...int) *ShopUpdateOne {
	suo.mutation.RemoveTransactionIDs(ids...)
	return suo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (suo *ShopUpdateOne) RemoveTransactions(t ...*Transaction) *ShopUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTransactionIDs(ids...)
}

// ClearBankAccounts clears all "bankAccounts" edges to the BankAccount entity.
func (suo *ShopUpdateOne) ClearBankAccounts() *ShopUpdateOne {
	suo.mutation.ClearBankAccounts()
	return suo
}

// RemoveBankAccountIDs removes the "bankAccounts" edge to BankAccount entities by IDs.
func (suo *ShopUpdateOne) RemoveBankAccountIDs(ids ...int) *ShopUpdateOne {
	suo.mutation.RemoveBankAccountIDs(ids...)
	return suo
}

// RemoveBankAccounts removes "bankAccounts" edges to BankAccount entities.
func (suo *ShopUpdateOne) RemoveBankAccounts(b ...*BankAccount) *ShopUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.RemoveBankAccountIDs(ids...)
}

// Where appends a list predicates to the ShopUpdate builder.
func (suo *ShopUpdateOne) Where(ps ...predicate.Shop) *ShopUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShopUpdateOne) Select(field string, fields ...string) *ShopUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shop entity.
func (suo *ShopUpdateOne) Save(ctx context.Context) (*Shop, error) {
	return withHooks[*Shop, ShopMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShopUpdateOne) SaveX(ctx context.Context) *Shop {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShopUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShopUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ShopUpdateOne) sqlSave(ctx context.Context) (_node *Shop, err error) {
	_spec := sqlgraph.NewUpdateSpec(shop.Table, shop.Columns, sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shop.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shop.FieldID)
		for _, f := range fields {
			if !shop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(shop.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(shop.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ProductsTable,
			Columns: []string{shop.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !suo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ProductsTable,
			Columns: []string{shop.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ProductsTable,
			Columns: []string{shop.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.TransactionsTable,
			Columns: []string{shop.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !suo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.TransactionsTable,
			Columns: []string{shop.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.TransactionsTable,
			Columns: []string{shop.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.BankAccountsTable,
			Columns: []string{shop.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !suo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.BankAccountsTable,
			Columns: []string{shop.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.BankAccountsTable,
			Columns: []string{shop.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shop{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
