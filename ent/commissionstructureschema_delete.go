// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/commissionstructureschema"
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommissionStructureSchemaDelete is the builder for deleting a CommissionStructureSchema entity.
type CommissionStructureSchemaDelete struct {
	config
	hooks    []Hook
	mutation *CommissionStructureSchemaMutation
}

// Where appends a list predicates to the CommissionStructureSchemaDelete builder.
func (cssd *CommissionStructureSchemaDelete) Where(ps ...predicate.CommissionStructureSchema) *CommissionStructureSchemaDelete {
	cssd.mutation.Where(ps...)
	return cssd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cssd *CommissionStructureSchemaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, CommissionStructureSchemaMutation](ctx, cssd.sqlExec, cssd.mutation, cssd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cssd *CommissionStructureSchemaDelete) ExecX(ctx context.Context) int {
	n, err := cssd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cssd *CommissionStructureSchemaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(commissionstructureschema.Table, sqlgraph.NewFieldSpec(commissionstructureschema.FieldID, field.TypeInt))
	if ps := cssd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cssd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cssd.mutation.done = true
	return affected, err
}

// CommissionStructureSchemaDeleteOne is the builder for deleting a single CommissionStructureSchema entity.
type CommissionStructureSchemaDeleteOne struct {
	cssd *CommissionStructureSchemaDelete
}

// Where appends a list predicates to the CommissionStructureSchemaDelete builder.
func (cssdo *CommissionStructureSchemaDeleteOne) Where(ps ...predicate.CommissionStructureSchema) *CommissionStructureSchemaDeleteOne {
	cssdo.cssd.mutation.Where(ps...)
	return cssdo
}

// Exec executes the deletion query.
func (cssdo *CommissionStructureSchemaDeleteOne) Exec(ctx context.Context) error {
	n, err := cssdo.cssd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{commissionstructureschema.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cssdo *CommissionStructureSchemaDeleteOne) ExecX(ctx context.Context) {
	if err := cssdo.Exec(ctx); err != nil {
		panic(err)
	}
}
