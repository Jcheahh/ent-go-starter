// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/productvariation"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductVariation is the model entity for the ProductVariation schema.
type ProductVariation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductVariationQuery when eager-loading is set.
	Edges              ProductVariationEdges `json:"edges"`
	product_variations *int
	selectValues       sql.SelectValues
}

// ProductVariationEdges holds the relations/edges for other nodes in the graph.
type ProductVariationEdges struct {
	// ProductAttributes holds the value of the productAttributes edge.
	ProductAttributes []*ProductAttribute `json:"productAttributes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProductAttributes map[string][]*ProductAttribute
}

// ProductAttributesOrErr returns the ProductAttributes value or an error if the edge
// was not loaded in eager-loading.
func (e ProductVariationEdges) ProductAttributesOrErr() ([]*ProductAttribute, error) {
	if e.loadedTypes[0] {
		return e.ProductAttributes, nil
	}
	return nil, &NotLoadedError{edge: "productAttributes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductVariation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productvariation.FieldID:
			values[i] = new(sql.NullInt64)
		case productvariation.FieldName, productvariation.FieldDescription, productvariation.FieldPrice:
			values[i] = new(sql.NullString)
		case productvariation.ForeignKeys[0]: // product_variations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductVariation fields.
func (pv *ProductVariation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productvariation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pv.ID = int(value.Int64)
		case productvariation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pv.Name = value.String
			}
		case productvariation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pv.Description = value.String
			}
		case productvariation.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pv.Price = value.String
			}
		case productvariation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_variations", value)
			} else if value.Valid {
				pv.product_variations = new(int)
				*pv.product_variations = int(value.Int64)
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductVariation.
// This includes values selected through modifiers, order, etc.
func (pv *ProductVariation) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// QueryProductAttributes queries the "productAttributes" edge of the ProductVariation entity.
func (pv *ProductVariation) QueryProductAttributes() *ProductAttributeQuery {
	return NewProductVariationClient(pv.config).QueryProductAttributes(pv)
}

// Update returns a builder for updating this ProductVariation.
// Note that you need to call ProductVariation.Unwrap() before calling this method if this ProductVariation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *ProductVariation) Update() *ProductVariationUpdateOne {
	return NewProductVariationClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the ProductVariation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *ProductVariation) Unwrap() *ProductVariation {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductVariation is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *ProductVariation) String() string {
	var builder strings.Builder
	builder.WriteString("ProductVariation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("name=")
	builder.WriteString(pv.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pv.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(pv.Price)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProductAttributes returns the ProductAttributes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *ProductVariation) NamedProductAttributes(name string) ([]*ProductAttribute, error) {
	if pv.Edges.namedProductAttributes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedProductAttributes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *ProductVariation) appendNamedProductAttributes(name string, edges ...*ProductAttribute) {
	if pv.Edges.namedProductAttributes == nil {
		pv.Edges.namedProductAttributes = make(map[string][]*ProductAttribute)
	}
	if len(edges) == 0 {
		pv.Edges.namedProductAttributes[name] = []*ProductAttribute{}
	} else {
		pv.Edges.namedProductAttributes[name] = append(pv.Edges.namedProductAttributes[name], edges...)
	}
}

// ProductVariations is a parsable slice of ProductVariation.
type ProductVariations []*ProductVariation
