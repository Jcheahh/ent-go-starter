// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/userbuyer"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserBuyer is the model entity for the UserBuyer schema.
type UserBuyer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Placeholder holds the value of the "placeholder" field.
	Placeholder int `json:"placeholder,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserBuyerQuery when eager-loading is set.
	Edges                        UserBuyerEdges `json:"edges"`
	review_product_customer      *int
	transaction_product_customer *int
	selectValues                 sql.SelectValues
}

// UserBuyerEdges holds the relations/edges for other nodes in the graph.
type UserBuyerEdges struct {
	// UserProfile holds the value of the userProfile edge.
	UserProfile []*User `json:"userProfile,omitempty"`
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// LinksClicked holds the value of the linksClicked edge.
	LinksClicked []*LinkVisit `json:"linksClicked,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedUserProfile  map[string][]*User
	namedReviews      map[string][]*Review
	namedTransactions map[string][]*Transaction
	namedLinksClicked map[string][]*LinkVisit
}

// UserProfileOrErr returns the UserProfile value or an error if the edge
// was not loaded in eager-loading.
func (e UserBuyerEdges) UserProfileOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UserProfile, nil
	}
	return nil, &NotLoadedError{edge: "userProfile"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e UserBuyerEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[1] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e UserBuyerEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[2] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// LinksClickedOrErr returns the LinksClicked value or an error if the edge
// was not loaded in eager-loading.
func (e UserBuyerEdges) LinksClickedOrErr() ([]*LinkVisit, error) {
	if e.loadedTypes[3] {
		return e.LinksClicked, nil
	}
	return nil, &NotLoadedError{edge: "linksClicked"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserBuyer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userbuyer.FieldID, userbuyer.FieldPlaceholder:
			values[i] = new(sql.NullInt64)
		case userbuyer.ForeignKeys[0]: // review_product_customer
			values[i] = new(sql.NullInt64)
		case userbuyer.ForeignKeys[1]: // transaction_product_customer
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserBuyer fields.
func (ub *UserBuyer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userbuyer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ub.ID = int(value.Int64)
		case userbuyer.FieldPlaceholder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field placeholder", values[i])
			} else if value.Valid {
				ub.Placeholder = int(value.Int64)
			}
		case userbuyer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field review_product_customer", value)
			} else if value.Valid {
				ub.review_product_customer = new(int)
				*ub.review_product_customer = int(value.Int64)
			}
		case userbuyer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transaction_product_customer", value)
			} else if value.Valid {
				ub.transaction_product_customer = new(int)
				*ub.transaction_product_customer = int(value.Int64)
			}
		default:
			ub.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserBuyer.
// This includes values selected through modifiers, order, etc.
func (ub *UserBuyer) Value(name string) (ent.Value, error) {
	return ub.selectValues.Get(name)
}

// QueryUserProfile queries the "userProfile" edge of the UserBuyer entity.
func (ub *UserBuyer) QueryUserProfile() *UserQuery {
	return NewUserBuyerClient(ub.config).QueryUserProfile(ub)
}

// QueryReviews queries the "reviews" edge of the UserBuyer entity.
func (ub *UserBuyer) QueryReviews() *ReviewQuery {
	return NewUserBuyerClient(ub.config).QueryReviews(ub)
}

// QueryTransactions queries the "transactions" edge of the UserBuyer entity.
func (ub *UserBuyer) QueryTransactions() *TransactionQuery {
	return NewUserBuyerClient(ub.config).QueryTransactions(ub)
}

// QueryLinksClicked queries the "linksClicked" edge of the UserBuyer entity.
func (ub *UserBuyer) QueryLinksClicked() *LinkVisitQuery {
	return NewUserBuyerClient(ub.config).QueryLinksClicked(ub)
}

// Update returns a builder for updating this UserBuyer.
// Note that you need to call UserBuyer.Unwrap() before calling this method if this UserBuyer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ub *UserBuyer) Update() *UserBuyerUpdateOne {
	return NewUserBuyerClient(ub.config).UpdateOne(ub)
}

// Unwrap unwraps the UserBuyer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ub *UserBuyer) Unwrap() *UserBuyer {
	_tx, ok := ub.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserBuyer is not a transactional entity")
	}
	ub.config.driver = _tx.drv
	return ub
}

// String implements the fmt.Stringer.
func (ub *UserBuyer) String() string {
	var builder strings.Builder
	builder.WriteString("UserBuyer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ub.ID))
	builder.WriteString("placeholder=")
	builder.WriteString(fmt.Sprintf("%v", ub.Placeholder))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserProfile returns the UserProfile named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ub *UserBuyer) NamedUserProfile(name string) ([]*User, error) {
	if ub.Edges.namedUserProfile == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ub.Edges.namedUserProfile[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ub *UserBuyer) appendNamedUserProfile(name string, edges ...*User) {
	if ub.Edges.namedUserProfile == nil {
		ub.Edges.namedUserProfile = make(map[string][]*User)
	}
	if len(edges) == 0 {
		ub.Edges.namedUserProfile[name] = []*User{}
	} else {
		ub.Edges.namedUserProfile[name] = append(ub.Edges.namedUserProfile[name], edges...)
	}
}

// NamedReviews returns the Reviews named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ub *UserBuyer) NamedReviews(name string) ([]*Review, error) {
	if ub.Edges.namedReviews == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ub.Edges.namedReviews[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ub *UserBuyer) appendNamedReviews(name string, edges ...*Review) {
	if ub.Edges.namedReviews == nil {
		ub.Edges.namedReviews = make(map[string][]*Review)
	}
	if len(edges) == 0 {
		ub.Edges.namedReviews[name] = []*Review{}
	} else {
		ub.Edges.namedReviews[name] = append(ub.Edges.namedReviews[name], edges...)
	}
}

// NamedTransactions returns the Transactions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ub *UserBuyer) NamedTransactions(name string) ([]*Transaction, error) {
	if ub.Edges.namedTransactions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ub.Edges.namedTransactions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ub *UserBuyer) appendNamedTransactions(name string, edges ...*Transaction) {
	if ub.Edges.namedTransactions == nil {
		ub.Edges.namedTransactions = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		ub.Edges.namedTransactions[name] = []*Transaction{}
	} else {
		ub.Edges.namedTransactions[name] = append(ub.Edges.namedTransactions[name], edges...)
	}
}

// NamedLinksClicked returns the LinksClicked named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ub *UserBuyer) NamedLinksClicked(name string) ([]*LinkVisit, error) {
	if ub.Edges.namedLinksClicked == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ub.Edges.namedLinksClicked[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ub *UserBuyer) appendNamedLinksClicked(name string, edges ...*LinkVisit) {
	if ub.Edges.namedLinksClicked == nil {
		ub.Edges.namedLinksClicked = make(map[string][]*LinkVisit)
	}
	if len(edges) == 0 {
		ub.Edges.namedLinksClicked[name] = []*LinkVisit{}
	} else {
		ub.Edges.namedLinksClicked[name] = append(ub.Edges.namedLinksClicked[name], edges...)
	}
}

// UserBuyers is a parsable slice of UserBuyer.
type UserBuyers []*UserBuyer
