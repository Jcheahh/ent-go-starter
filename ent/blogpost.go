// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/blogpost"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BlogPost is the model entity for the BlogPost schema.
type BlogPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated string `json:"dateCreated,omitempty"`
	// DateUpdated holds the value of the "dateUpdated" field.
	DateUpdated string `json:"dateUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogPostQuery when eager-loading is set.
	Edges              BlogPostEdges `json:"edges"`
	product_blog_posts *int
	selectValues       sql.SelectValues
}

// BlogPostEdges holds the relations/edges for other nodes in the graph.
type BlogPostEdges struct {
	// Author holds the value of the author edge.
	Author []*UserSeller `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedAuthor map[string][]*UserSeller
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading.
func (e BlogPostEdges) AuthorOrErr() ([]*UserSeller, error) {
	if e.loadedTypes[0] {
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogpost.FieldID:
			values[i] = new(sql.NullInt64)
		case blogpost.FieldTitle, blogpost.FieldContent, blogpost.FieldDateCreated, blogpost.FieldDateUpdated:
			values[i] = new(sql.NullString)
		case blogpost.ForeignKeys[0]: // product_blog_posts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogPost fields.
func (bp *BlogPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bp.ID = int(value.Int64)
		case blogpost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				bp.Title = value.String
			}
		case blogpost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				bp.Content = value.String
			}
		case blogpost.FieldDateCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				bp.DateCreated = value.String
			}
		case blogpost.FieldDateUpdated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dateUpdated", values[i])
			} else if value.Valid {
				bp.DateUpdated = value.String
			}
		case blogpost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_blog_posts", value)
			} else if value.Valid {
				bp.product_blog_posts = new(int)
				*bp.product_blog_posts = int(value.Int64)
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogPost.
// This includes values selected through modifiers, order, etc.
func (bp *BlogPost) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the BlogPost entity.
func (bp *BlogPost) QueryAuthor() *UserSellerQuery {
	return NewBlogPostClient(bp.config).QueryAuthor(bp)
}

// Update returns a builder for updating this BlogPost.
// Note that you need to call BlogPost.Unwrap() before calling this method if this BlogPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BlogPost) Update() *BlogPostUpdateOne {
	return NewBlogPostClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BlogPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BlogPost) Unwrap() *BlogPost {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogPost is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BlogPost) String() string {
	var builder strings.Builder
	builder.WriteString("BlogPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("title=")
	builder.WriteString(bp.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(bp.Content)
	builder.WriteString(", ")
	builder.WriteString("dateCreated=")
	builder.WriteString(bp.DateCreated)
	builder.WriteString(", ")
	builder.WriteString("dateUpdated=")
	builder.WriteString(bp.DateUpdated)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthor returns the Author named value or an error if the edge was not
// loaded in eager-loading with this name.
func (bp *BlogPost) NamedAuthor(name string) ([]*UserSeller, error) {
	if bp.Edges.namedAuthor == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := bp.Edges.namedAuthor[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (bp *BlogPost) appendNamedAuthor(name string, edges ...*UserSeller) {
	if bp.Edges.namedAuthor == nil {
		bp.Edges.namedAuthor = make(map[string][]*UserSeller)
	}
	if len(edges) == 0 {
		bp.Edges.namedAuthor[name] = []*UserSeller{}
	} else {
		bp.Edges.namedAuthor[name] = append(bp.Edges.namedAuthor[name], edges...)
	}
}

// BlogPosts is a parsable slice of BlogPost.
type BlogPosts []*BlogPost
