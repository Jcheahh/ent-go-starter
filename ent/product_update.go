// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/blogpost"
	"entdemo/ent/category"
	"entdemo/ent/chat"
	"entdemo/ent/commissionstructure"
	"entdemo/ent/emailcampaign"
	"entdemo/ent/groupbuy"
	"entdemo/ent/image"
	"entdemo/ent/marketingcampaign"
	"entdemo/ent/predicate"
	"entdemo/ent/product"
	"entdemo/ent/productattribute"
	"entdemo/ent/productpageview"
	"entdemo/ent/productvariation"
	"entdemo/ent/review"
	"entdemo/ent/shop"
	"entdemo/ent/tag"
	"entdemo/ent/userseller"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(s string) *ProductUpdate {
	pu.mutation.SetPrice(s)
	return pu
}

// SetDateCreated sets the "dateCreated" field.
func (pu *ProductUpdate) SetDateCreated(s string) *ProductUpdate {
	pu.mutation.SetDateCreated(s)
	return pu
}

// SetDateUpdated sets the "dateUpdated" field.
func (pu *ProductUpdate) SetDateUpdated(s string) *ProductUpdate {
	pu.mutation.SetDateUpdated(s)
	return pu
}

// AddProductSellerIDs adds the "productSeller" edge to the UserSeller entity by IDs.
func (pu *ProductUpdate) AddProductSellerIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddProductSellerIDs(ids...)
	return pu
}

// AddProductSeller adds the "productSeller" edges to the UserSeller entity.
func (pu *ProductUpdate) AddProductSeller(u ...*UserSeller) *ProductUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddProductSellerIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pu *ProductUpdate) AddReviewIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddReviewIDs(ids...)
	return pu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pu *ProductUpdate) AddReviews(r ...*Review) *ProductUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReviewIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (pu *ProductUpdate) AddImageIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddImageIDs(ids...)
	return pu
}

// AddImages adds the "images" edges to the Image entity.
func (pu *ProductUpdate) AddImages(i ...*Image) *ProductUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddImageIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (pu *ProductUpdate) AddCategoryIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCategoryIDs(ids...)
	return pu
}

// AddCategories adds the "categories" edges to the Category entity.
func (pu *ProductUpdate) AddCategories(c ...*Category) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCategoryIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pu *ProductUpdate) AddTagIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddTagIDs(ids...)
	return pu
}

// AddTags adds the "tags" edges to the Tag entity.
func (pu *ProductUpdate) AddTags(t ...*Tag) *ProductUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTagIDs(ids...)
}

// AddProductAttributeIDs adds the "productAttributes" edge to the ProductAttribute entity by IDs.
func (pu *ProductUpdate) AddProductAttributeIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddProductAttributeIDs(ids...)
	return pu
}

// AddProductAttributes adds the "productAttributes" edges to the ProductAttribute entity.
func (pu *ProductUpdate) AddProductAttributes(p ...*ProductAttribute) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductAttributeIDs(ids...)
}

// AddVariationIDs adds the "variations" edge to the ProductVariation entity by IDs.
func (pu *ProductUpdate) AddVariationIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddVariationIDs(ids...)
	return pu
}

// AddVariations adds the "variations" edges to the ProductVariation entity.
func (pu *ProductUpdate) AddVariations(p ...*ProductVariation) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddVariationIDs(ids...)
}

// AddCommissionStructureIDs adds the "commissionStructure" edge to the CommissionStructure entity by IDs.
func (pu *ProductUpdate) AddCommissionStructureIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCommissionStructureIDs(ids...)
	return pu
}

// AddCommissionStructure adds the "commissionStructure" edges to the CommissionStructure entity.
func (pu *ProductUpdate) AddCommissionStructure(c ...*CommissionStructure) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCommissionStructureIDs(ids...)
}

// AddShopIDs adds the "shop" edge to the Shop entity by IDs.
func (pu *ProductUpdate) AddShopIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddShopIDs(ids...)
	return pu
}

// AddShop adds the "shop" edges to the Shop entity.
func (pu *ProductUpdate) AddShop(s ...*Shop) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddShopIDs(ids...)
}

// AddGroupBuyIDs adds the "groupBuys" edge to the GroupBuy entity by IDs.
func (pu *ProductUpdate) AddGroupBuyIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddGroupBuyIDs(ids...)
	return pu
}

// AddGroupBuys adds the "groupBuys" edges to the GroupBuy entity.
func (pu *ProductUpdate) AddGroupBuys(g ...*GroupBuy) *ProductUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.AddGroupBuyIDs(ids...)
}

// AddProductPageViewIDs adds the "productPageViews" edge to the ProductPageView entity by IDs.
func (pu *ProductUpdate) AddProductPageViewIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddProductPageViewIDs(ids...)
	return pu
}

// AddProductPageViews adds the "productPageViews" edges to the ProductPageView entity.
func (pu *ProductUpdate) AddProductPageViews(p ...*ProductPageView) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductPageViewIDs(ids...)
}

// AddBlogPostIDs adds the "blogPosts" edge to the BlogPost entity by IDs.
func (pu *ProductUpdate) AddBlogPostIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddBlogPostIDs(ids...)
	return pu
}

// AddBlogPosts adds the "blogPosts" edges to the BlogPost entity.
func (pu *ProductUpdate) AddBlogPosts(b ...*BlogPost) *ProductUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBlogPostIDs(ids...)
}

// AddMarketingCampaignIDs adds the "marketingCampaigns" edge to the MarketingCampaign entity by IDs.
func (pu *ProductUpdate) AddMarketingCampaignIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddMarketingCampaignIDs(ids...)
	return pu
}

// AddMarketingCampaigns adds the "marketingCampaigns" edges to the MarketingCampaign entity.
func (pu *ProductUpdate) AddMarketingCampaigns(m ...*MarketingCampaign) *ProductUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMarketingCampaignIDs(ids...)
}

// AddChatIDs adds the "chats" edge to the Chat entity by IDs.
func (pu *ProductUpdate) AddChatIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddChatIDs(ids...)
	return pu
}

// AddChats adds the "chats" edges to the Chat entity.
func (pu *ProductUpdate) AddChats(c ...*Chat) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddChatIDs(ids...)
}

// AddEmailCampaignIDs adds the "emailCampaign" edge to the EmailCampaign entity by IDs.
func (pu *ProductUpdate) AddEmailCampaignIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddEmailCampaignIDs(ids...)
	return pu
}

// AddEmailCampaign adds the "emailCampaign" edges to the EmailCampaign entity.
func (pu *ProductUpdate) AddEmailCampaign(e ...*EmailCampaign) *ProductUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEmailCampaignIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearProductSeller clears all "productSeller" edges to the UserSeller entity.
func (pu *ProductUpdate) ClearProductSeller() *ProductUpdate {
	pu.mutation.ClearProductSeller()
	return pu
}

// RemoveProductSellerIDs removes the "productSeller" edge to UserSeller entities by IDs.
func (pu *ProductUpdate) RemoveProductSellerIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveProductSellerIDs(ids...)
	return pu
}

// RemoveProductSeller removes "productSeller" edges to UserSeller entities.
func (pu *ProductUpdate) RemoveProductSeller(u ...*UserSeller) *ProductUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveProductSellerIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (pu *ProductUpdate) ClearReviews() *ProductUpdate {
	pu.mutation.ClearReviews()
	return pu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (pu *ProductUpdate) RemoveReviewIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveReviewIDs(ids...)
	return pu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (pu *ProductUpdate) RemoveReviews(r ...*Review) *ProductUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReviewIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (pu *ProductUpdate) ClearImages() *ProductUpdate {
	pu.mutation.ClearImages()
	return pu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (pu *ProductUpdate) RemoveImageIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveImageIDs(ids...)
	return pu
}

// RemoveImages removes "images" edges to Image entities.
func (pu *ProductUpdate) RemoveImages(i ...*Image) *ProductUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveImageIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (pu *ProductUpdate) ClearCategories() *ProductUpdate {
	pu.mutation.ClearCategories()
	return pu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (pu *ProductUpdate) RemoveCategoryIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCategoryIDs(ids...)
	return pu
}

// RemoveCategories removes "categories" edges to Category entities.
func (pu *ProductUpdate) RemoveCategories(c ...*Category) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCategoryIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (pu *ProductUpdate) ClearTags() *ProductUpdate {
	pu.mutation.ClearTags()
	return pu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (pu *ProductUpdate) RemoveTagIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveTagIDs(ids...)
	return pu
}

// RemoveTags removes "tags" edges to Tag entities.
func (pu *ProductUpdate) RemoveTags(t ...*Tag) *ProductUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTagIDs(ids...)
}

// ClearProductAttributes clears all "productAttributes" edges to the ProductAttribute entity.
func (pu *ProductUpdate) ClearProductAttributes() *ProductUpdate {
	pu.mutation.ClearProductAttributes()
	return pu
}

// RemoveProductAttributeIDs removes the "productAttributes" edge to ProductAttribute entities by IDs.
func (pu *ProductUpdate) RemoveProductAttributeIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveProductAttributeIDs(ids...)
	return pu
}

// RemoveProductAttributes removes "productAttributes" edges to ProductAttribute entities.
func (pu *ProductUpdate) RemoveProductAttributes(p ...*ProductAttribute) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductAttributeIDs(ids...)
}

// ClearVariations clears all "variations" edges to the ProductVariation entity.
func (pu *ProductUpdate) ClearVariations() *ProductUpdate {
	pu.mutation.ClearVariations()
	return pu
}

// RemoveVariationIDs removes the "variations" edge to ProductVariation entities by IDs.
func (pu *ProductUpdate) RemoveVariationIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveVariationIDs(ids...)
	return pu
}

// RemoveVariations removes "variations" edges to ProductVariation entities.
func (pu *ProductUpdate) RemoveVariations(p ...*ProductVariation) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveVariationIDs(ids...)
}

// ClearCommissionStructure clears all "commissionStructure" edges to the CommissionStructure entity.
func (pu *ProductUpdate) ClearCommissionStructure() *ProductUpdate {
	pu.mutation.ClearCommissionStructure()
	return pu
}

// RemoveCommissionStructureIDs removes the "commissionStructure" edge to CommissionStructure entities by IDs.
func (pu *ProductUpdate) RemoveCommissionStructureIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCommissionStructureIDs(ids...)
	return pu
}

// RemoveCommissionStructure removes "commissionStructure" edges to CommissionStructure entities.
func (pu *ProductUpdate) RemoveCommissionStructure(c ...*CommissionStructure) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCommissionStructureIDs(ids...)
}

// ClearShop clears all "shop" edges to the Shop entity.
func (pu *ProductUpdate) ClearShop() *ProductUpdate {
	pu.mutation.ClearShop()
	return pu
}

// RemoveShopIDs removes the "shop" edge to Shop entities by IDs.
func (pu *ProductUpdate) RemoveShopIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveShopIDs(ids...)
	return pu
}

// RemoveShop removes "shop" edges to Shop entities.
func (pu *ProductUpdate) RemoveShop(s ...*Shop) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveShopIDs(ids...)
}

// ClearGroupBuys clears all "groupBuys" edges to the GroupBuy entity.
func (pu *ProductUpdate) ClearGroupBuys() *ProductUpdate {
	pu.mutation.ClearGroupBuys()
	return pu
}

// RemoveGroupBuyIDs removes the "groupBuys" edge to GroupBuy entities by IDs.
func (pu *ProductUpdate) RemoveGroupBuyIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveGroupBuyIDs(ids...)
	return pu
}

// RemoveGroupBuys removes "groupBuys" edges to GroupBuy entities.
func (pu *ProductUpdate) RemoveGroupBuys(g ...*GroupBuy) *ProductUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.RemoveGroupBuyIDs(ids...)
}

// ClearProductPageViews clears all "productPageViews" edges to the ProductPageView entity.
func (pu *ProductUpdate) ClearProductPageViews() *ProductUpdate {
	pu.mutation.ClearProductPageViews()
	return pu
}

// RemoveProductPageViewIDs removes the "productPageViews" edge to ProductPageView entities by IDs.
func (pu *ProductUpdate) RemoveProductPageViewIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveProductPageViewIDs(ids...)
	return pu
}

// RemoveProductPageViews removes "productPageViews" edges to ProductPageView entities.
func (pu *ProductUpdate) RemoveProductPageViews(p ...*ProductPageView) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductPageViewIDs(ids...)
}

// ClearBlogPosts clears all "blogPosts" edges to the BlogPost entity.
func (pu *ProductUpdate) ClearBlogPosts() *ProductUpdate {
	pu.mutation.ClearBlogPosts()
	return pu
}

// RemoveBlogPostIDs removes the "blogPosts" edge to BlogPost entities by IDs.
func (pu *ProductUpdate) RemoveBlogPostIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveBlogPostIDs(ids...)
	return pu
}

// RemoveBlogPosts removes "blogPosts" edges to BlogPost entities.
func (pu *ProductUpdate) RemoveBlogPosts(b ...*BlogPost) *ProductUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBlogPostIDs(ids...)
}

// ClearMarketingCampaigns clears all "marketingCampaigns" edges to the MarketingCampaign entity.
func (pu *ProductUpdate) ClearMarketingCampaigns() *ProductUpdate {
	pu.mutation.ClearMarketingCampaigns()
	return pu
}

// RemoveMarketingCampaignIDs removes the "marketingCampaigns" edge to MarketingCampaign entities by IDs.
func (pu *ProductUpdate) RemoveMarketingCampaignIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveMarketingCampaignIDs(ids...)
	return pu
}

// RemoveMarketingCampaigns removes "marketingCampaigns" edges to MarketingCampaign entities.
func (pu *ProductUpdate) RemoveMarketingCampaigns(m ...*MarketingCampaign) *ProductUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMarketingCampaignIDs(ids...)
}

// ClearChats clears all "chats" edges to the Chat entity.
func (pu *ProductUpdate) ClearChats() *ProductUpdate {
	pu.mutation.ClearChats()
	return pu
}

// RemoveChatIDs removes the "chats" edge to Chat entities by IDs.
func (pu *ProductUpdate) RemoveChatIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveChatIDs(ids...)
	return pu
}

// RemoveChats removes "chats" edges to Chat entities.
func (pu *ProductUpdate) RemoveChats(c ...*Chat) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveChatIDs(ids...)
}

// ClearEmailCampaign clears all "emailCampaign" edges to the EmailCampaign entity.
func (pu *ProductUpdate) ClearEmailCampaign() *ProductUpdate {
	pu.mutation.ClearEmailCampaign()
	return pu
}

// RemoveEmailCampaignIDs removes the "emailCampaign" edge to EmailCampaign entities by IDs.
func (pu *ProductUpdate) RemoveEmailCampaignIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveEmailCampaignIDs(ids...)
	return pu
}

// RemoveEmailCampaign removes "emailCampaign" edges to EmailCampaign entities.
func (pu *ProductUpdate) RemoveEmailCampaign(e ...*EmailCampaign) *ProductUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEmailCampaignIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProductMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeString, value)
	}
	if value, ok := pu.mutation.DateCreated(); ok {
		_spec.SetField(product.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := pu.mutation.DateUpdated(); ok {
		_spec.SetField(product.FieldDateUpdated, field.TypeString, value)
	}
	if pu.mutation.ProductSellerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductSellerIDs(); len(nodes) > 0 && !pu.mutation.ProductSellerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductSellerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductAttributesIDs(); len(nodes) > 0 && !pu.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVariationsIDs(); len(nodes) > 0 && !pu.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CommissionStructureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructure.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCommissionStructureIDs(); len(nodes) > 0 && !pu.mutation.CommissionStructureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommissionStructureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedShopIDs(); len(nodes) > 0 && !pu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.GroupBuysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedGroupBuysIDs(); len(nodes) > 0 && !pu.mutation.GroupBuysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GroupBuysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductPageViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductPageViewsIDs(); len(nodes) > 0 && !pu.mutation.ProductPageViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductPageViewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !pu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MarketingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMarketingCampaignsIDs(); len(nodes) > 0 && !pu.mutation.MarketingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MarketingCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChatsIDs(); len(nodes) > 0 && !pu.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EmailCampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEmailCampaignIDs(); len(nodes) > 0 && !pu.mutation.EmailCampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EmailCampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(s string) *ProductUpdateOne {
	puo.mutation.SetPrice(s)
	return puo
}

// SetDateCreated sets the "dateCreated" field.
func (puo *ProductUpdateOne) SetDateCreated(s string) *ProductUpdateOne {
	puo.mutation.SetDateCreated(s)
	return puo
}

// SetDateUpdated sets the "dateUpdated" field.
func (puo *ProductUpdateOne) SetDateUpdated(s string) *ProductUpdateOne {
	puo.mutation.SetDateUpdated(s)
	return puo
}

// AddProductSellerIDs adds the "productSeller" edge to the UserSeller entity by IDs.
func (puo *ProductUpdateOne) AddProductSellerIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddProductSellerIDs(ids...)
	return puo
}

// AddProductSeller adds the "productSeller" edges to the UserSeller entity.
func (puo *ProductUpdateOne) AddProductSeller(u ...*UserSeller) *ProductUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddProductSellerIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (puo *ProductUpdateOne) AddReviewIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddReviewIDs(ids...)
	return puo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (puo *ProductUpdateOne) AddReviews(r ...*Review) *ProductUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReviewIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (puo *ProductUpdateOne) AddImageIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddImageIDs(ids...)
	return puo
}

// AddImages adds the "images" edges to the Image entity.
func (puo *ProductUpdateOne) AddImages(i ...*Image) *ProductUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddImageIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (puo *ProductUpdateOne) AddCategoryIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCategoryIDs(ids...)
	return puo
}

// AddCategories adds the "categories" edges to the Category entity.
func (puo *ProductUpdateOne) AddCategories(c ...*Category) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCategoryIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (puo *ProductUpdateOne) AddTagIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddTagIDs(ids...)
	return puo
}

// AddTags adds the "tags" edges to the Tag entity.
func (puo *ProductUpdateOne) AddTags(t ...*Tag) *ProductUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTagIDs(ids...)
}

// AddProductAttributeIDs adds the "productAttributes" edge to the ProductAttribute entity by IDs.
func (puo *ProductUpdateOne) AddProductAttributeIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddProductAttributeIDs(ids...)
	return puo
}

// AddProductAttributes adds the "productAttributes" edges to the ProductAttribute entity.
func (puo *ProductUpdateOne) AddProductAttributes(p ...*ProductAttribute) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductAttributeIDs(ids...)
}

// AddVariationIDs adds the "variations" edge to the ProductVariation entity by IDs.
func (puo *ProductUpdateOne) AddVariationIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddVariationIDs(ids...)
	return puo
}

// AddVariations adds the "variations" edges to the ProductVariation entity.
func (puo *ProductUpdateOne) AddVariations(p ...*ProductVariation) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddVariationIDs(ids...)
}

// AddCommissionStructureIDs adds the "commissionStructure" edge to the CommissionStructure entity by IDs.
func (puo *ProductUpdateOne) AddCommissionStructureIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCommissionStructureIDs(ids...)
	return puo
}

// AddCommissionStructure adds the "commissionStructure" edges to the CommissionStructure entity.
func (puo *ProductUpdateOne) AddCommissionStructure(c ...*CommissionStructure) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCommissionStructureIDs(ids...)
}

// AddShopIDs adds the "shop" edge to the Shop entity by IDs.
func (puo *ProductUpdateOne) AddShopIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddShopIDs(ids...)
	return puo
}

// AddShop adds the "shop" edges to the Shop entity.
func (puo *ProductUpdateOne) AddShop(s ...*Shop) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddShopIDs(ids...)
}

// AddGroupBuyIDs adds the "groupBuys" edge to the GroupBuy entity by IDs.
func (puo *ProductUpdateOne) AddGroupBuyIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddGroupBuyIDs(ids...)
	return puo
}

// AddGroupBuys adds the "groupBuys" edges to the GroupBuy entity.
func (puo *ProductUpdateOne) AddGroupBuys(g ...*GroupBuy) *ProductUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.AddGroupBuyIDs(ids...)
}

// AddProductPageViewIDs adds the "productPageViews" edge to the ProductPageView entity by IDs.
func (puo *ProductUpdateOne) AddProductPageViewIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddProductPageViewIDs(ids...)
	return puo
}

// AddProductPageViews adds the "productPageViews" edges to the ProductPageView entity.
func (puo *ProductUpdateOne) AddProductPageViews(p ...*ProductPageView) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductPageViewIDs(ids...)
}

// AddBlogPostIDs adds the "blogPosts" edge to the BlogPost entity by IDs.
func (puo *ProductUpdateOne) AddBlogPostIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddBlogPostIDs(ids...)
	return puo
}

// AddBlogPosts adds the "blogPosts" edges to the BlogPost entity.
func (puo *ProductUpdateOne) AddBlogPosts(b ...*BlogPost) *ProductUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBlogPostIDs(ids...)
}

// AddMarketingCampaignIDs adds the "marketingCampaigns" edge to the MarketingCampaign entity by IDs.
func (puo *ProductUpdateOne) AddMarketingCampaignIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddMarketingCampaignIDs(ids...)
	return puo
}

// AddMarketingCampaigns adds the "marketingCampaigns" edges to the MarketingCampaign entity.
func (puo *ProductUpdateOne) AddMarketingCampaigns(m ...*MarketingCampaign) *ProductUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMarketingCampaignIDs(ids...)
}

// AddChatIDs adds the "chats" edge to the Chat entity by IDs.
func (puo *ProductUpdateOne) AddChatIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddChatIDs(ids...)
	return puo
}

// AddChats adds the "chats" edges to the Chat entity.
func (puo *ProductUpdateOne) AddChats(c ...*Chat) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddChatIDs(ids...)
}

// AddEmailCampaignIDs adds the "emailCampaign" edge to the EmailCampaign entity by IDs.
func (puo *ProductUpdateOne) AddEmailCampaignIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddEmailCampaignIDs(ids...)
	return puo
}

// AddEmailCampaign adds the "emailCampaign" edges to the EmailCampaign entity.
func (puo *ProductUpdateOne) AddEmailCampaign(e ...*EmailCampaign) *ProductUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEmailCampaignIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearProductSeller clears all "productSeller" edges to the UserSeller entity.
func (puo *ProductUpdateOne) ClearProductSeller() *ProductUpdateOne {
	puo.mutation.ClearProductSeller()
	return puo
}

// RemoveProductSellerIDs removes the "productSeller" edge to UserSeller entities by IDs.
func (puo *ProductUpdateOne) RemoveProductSellerIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveProductSellerIDs(ids...)
	return puo
}

// RemoveProductSeller removes "productSeller" edges to UserSeller entities.
func (puo *ProductUpdateOne) RemoveProductSeller(u ...*UserSeller) *ProductUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveProductSellerIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (puo *ProductUpdateOne) ClearReviews() *ProductUpdateOne {
	puo.mutation.ClearReviews()
	return puo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (puo *ProductUpdateOne) RemoveReviewIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveReviewIDs(ids...)
	return puo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (puo *ProductUpdateOne) RemoveReviews(r ...*Review) *ProductUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReviewIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (puo *ProductUpdateOne) ClearImages() *ProductUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (puo *ProductUpdateOne) RemoveImageIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveImageIDs(ids...)
	return puo
}

// RemoveImages removes "images" edges to Image entities.
func (puo *ProductUpdateOne) RemoveImages(i ...*Image) *ProductUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveImageIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (puo *ProductUpdateOne) ClearCategories() *ProductUpdateOne {
	puo.mutation.ClearCategories()
	return puo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (puo *ProductUpdateOne) RemoveCategoryIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCategoryIDs(ids...)
	return puo
}

// RemoveCategories removes "categories" edges to Category entities.
func (puo *ProductUpdateOne) RemoveCategories(c ...*Category) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCategoryIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (puo *ProductUpdateOne) ClearTags() *ProductUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (puo *ProductUpdateOne) RemoveTagIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveTagIDs(ids...)
	return puo
}

// RemoveTags removes "tags" edges to Tag entities.
func (puo *ProductUpdateOne) RemoveTags(t ...*Tag) *ProductUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTagIDs(ids...)
}

// ClearProductAttributes clears all "productAttributes" edges to the ProductAttribute entity.
func (puo *ProductUpdateOne) ClearProductAttributes() *ProductUpdateOne {
	puo.mutation.ClearProductAttributes()
	return puo
}

// RemoveProductAttributeIDs removes the "productAttributes" edge to ProductAttribute entities by IDs.
func (puo *ProductUpdateOne) RemoveProductAttributeIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveProductAttributeIDs(ids...)
	return puo
}

// RemoveProductAttributes removes "productAttributes" edges to ProductAttribute entities.
func (puo *ProductUpdateOne) RemoveProductAttributes(p ...*ProductAttribute) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductAttributeIDs(ids...)
}

// ClearVariations clears all "variations" edges to the ProductVariation entity.
func (puo *ProductUpdateOne) ClearVariations() *ProductUpdateOne {
	puo.mutation.ClearVariations()
	return puo
}

// RemoveVariationIDs removes the "variations" edge to ProductVariation entities by IDs.
func (puo *ProductUpdateOne) RemoveVariationIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveVariationIDs(ids...)
	return puo
}

// RemoveVariations removes "variations" edges to ProductVariation entities.
func (puo *ProductUpdateOne) RemoveVariations(p ...*ProductVariation) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveVariationIDs(ids...)
}

// ClearCommissionStructure clears all "commissionStructure" edges to the CommissionStructure entity.
func (puo *ProductUpdateOne) ClearCommissionStructure() *ProductUpdateOne {
	puo.mutation.ClearCommissionStructure()
	return puo
}

// RemoveCommissionStructureIDs removes the "commissionStructure" edge to CommissionStructure entities by IDs.
func (puo *ProductUpdateOne) RemoveCommissionStructureIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCommissionStructureIDs(ids...)
	return puo
}

// RemoveCommissionStructure removes "commissionStructure" edges to CommissionStructure entities.
func (puo *ProductUpdateOne) RemoveCommissionStructure(c ...*CommissionStructure) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCommissionStructureIDs(ids...)
}

// ClearShop clears all "shop" edges to the Shop entity.
func (puo *ProductUpdateOne) ClearShop() *ProductUpdateOne {
	puo.mutation.ClearShop()
	return puo
}

// RemoveShopIDs removes the "shop" edge to Shop entities by IDs.
func (puo *ProductUpdateOne) RemoveShopIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveShopIDs(ids...)
	return puo
}

// RemoveShop removes "shop" edges to Shop entities.
func (puo *ProductUpdateOne) RemoveShop(s ...*Shop) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveShopIDs(ids...)
}

// ClearGroupBuys clears all "groupBuys" edges to the GroupBuy entity.
func (puo *ProductUpdateOne) ClearGroupBuys() *ProductUpdateOne {
	puo.mutation.ClearGroupBuys()
	return puo
}

// RemoveGroupBuyIDs removes the "groupBuys" edge to GroupBuy entities by IDs.
func (puo *ProductUpdateOne) RemoveGroupBuyIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveGroupBuyIDs(ids...)
	return puo
}

// RemoveGroupBuys removes "groupBuys" edges to GroupBuy entities.
func (puo *ProductUpdateOne) RemoveGroupBuys(g ...*GroupBuy) *ProductUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.RemoveGroupBuyIDs(ids...)
}

// ClearProductPageViews clears all "productPageViews" edges to the ProductPageView entity.
func (puo *ProductUpdateOne) ClearProductPageViews() *ProductUpdateOne {
	puo.mutation.ClearProductPageViews()
	return puo
}

// RemoveProductPageViewIDs removes the "productPageViews" edge to ProductPageView entities by IDs.
func (puo *ProductUpdateOne) RemoveProductPageViewIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveProductPageViewIDs(ids...)
	return puo
}

// RemoveProductPageViews removes "productPageViews" edges to ProductPageView entities.
func (puo *ProductUpdateOne) RemoveProductPageViews(p ...*ProductPageView) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductPageViewIDs(ids...)
}

// ClearBlogPosts clears all "blogPosts" edges to the BlogPost entity.
func (puo *ProductUpdateOne) ClearBlogPosts() *ProductUpdateOne {
	puo.mutation.ClearBlogPosts()
	return puo
}

// RemoveBlogPostIDs removes the "blogPosts" edge to BlogPost entities by IDs.
func (puo *ProductUpdateOne) RemoveBlogPostIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveBlogPostIDs(ids...)
	return puo
}

// RemoveBlogPosts removes "blogPosts" edges to BlogPost entities.
func (puo *ProductUpdateOne) RemoveBlogPosts(b ...*BlogPost) *ProductUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBlogPostIDs(ids...)
}

// ClearMarketingCampaigns clears all "marketingCampaigns" edges to the MarketingCampaign entity.
func (puo *ProductUpdateOne) ClearMarketingCampaigns() *ProductUpdateOne {
	puo.mutation.ClearMarketingCampaigns()
	return puo
}

// RemoveMarketingCampaignIDs removes the "marketingCampaigns" edge to MarketingCampaign entities by IDs.
func (puo *ProductUpdateOne) RemoveMarketingCampaignIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveMarketingCampaignIDs(ids...)
	return puo
}

// RemoveMarketingCampaigns removes "marketingCampaigns" edges to MarketingCampaign entities.
func (puo *ProductUpdateOne) RemoveMarketingCampaigns(m ...*MarketingCampaign) *ProductUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMarketingCampaignIDs(ids...)
}

// ClearChats clears all "chats" edges to the Chat entity.
func (puo *ProductUpdateOne) ClearChats() *ProductUpdateOne {
	puo.mutation.ClearChats()
	return puo
}

// RemoveChatIDs removes the "chats" edge to Chat entities by IDs.
func (puo *ProductUpdateOne) RemoveChatIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveChatIDs(ids...)
	return puo
}

// RemoveChats removes "chats" edges to Chat entities.
func (puo *ProductUpdateOne) RemoveChats(c ...*Chat) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveChatIDs(ids...)
}

// ClearEmailCampaign clears all "emailCampaign" edges to the EmailCampaign entity.
func (puo *ProductUpdateOne) ClearEmailCampaign() *ProductUpdateOne {
	puo.mutation.ClearEmailCampaign()
	return puo
}

// RemoveEmailCampaignIDs removes the "emailCampaign" edge to EmailCampaign entities by IDs.
func (puo *ProductUpdateOne) RemoveEmailCampaignIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveEmailCampaignIDs(ids...)
	return puo
}

// RemoveEmailCampaign removes "emailCampaign" edges to EmailCampaign entities.
func (puo *ProductUpdateOne) RemoveEmailCampaign(e ...*EmailCampaign) *ProductUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEmailCampaignIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks[*Product, ProductMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeString, value)
	}
	if value, ok := puo.mutation.DateCreated(); ok {
		_spec.SetField(product.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := puo.mutation.DateUpdated(); ok {
		_spec.SetField(product.FieldDateUpdated, field.TypeString, value)
	}
	if puo.mutation.ProductSellerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductSellerIDs(); len(nodes) > 0 && !puo.mutation.ProductSellerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductSellerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductAttributesIDs(); len(nodes) > 0 && !puo.mutation.ProductAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVariationsIDs(); len(nodes) > 0 && !puo.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CommissionStructureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructure.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCommissionStructureIDs(); len(nodes) > 0 && !puo.mutation.CommissionStructureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommissionStructureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedShopIDs(); len(nodes) > 0 && !puo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.GroupBuysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedGroupBuysIDs(); len(nodes) > 0 && !puo.mutation.GroupBuysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GroupBuysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductPageViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductPageViewsIDs(); len(nodes) > 0 && !puo.mutation.ProductPageViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductPageViewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !puo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MarketingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMarketingCampaignsIDs(); len(nodes) > 0 && !puo.mutation.MarketingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MarketingCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChatsIDs(); len(nodes) > 0 && !puo.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EmailCampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEmailCampaignIDs(); len(nodes) > 0 && !puo.mutation.EmailCampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EmailCampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
