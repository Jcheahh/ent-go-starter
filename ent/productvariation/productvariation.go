// Code generated by ent, DO NOT EDIT.

package productvariation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productvariation type in the database.
	Label = "product_variation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeProductAttributes holds the string denoting the productattributes edge name in mutations.
	EdgeProductAttributes = "productAttributes"
	// Table holds the table name of the productvariation in the database.
	Table = "product_variations"
	// ProductAttributesTable is the table that holds the productAttributes relation/edge.
	ProductAttributesTable = "product_attributes"
	// ProductAttributesInverseTable is the table name for the ProductAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "productattribute" package.
	ProductAttributesInverseTable = "product_attributes"
	// ProductAttributesColumn is the table column denoting the productAttributes relation/edge.
	ProductAttributesColumn = "product_variation_product_attributes"
)

// Columns holds all SQL columns for productvariation fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_variations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_variations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProductVariation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByProductAttributesCount orders the results by productAttributes count.
func ByProductAttributesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductAttributesStep(), opts...)
	}
}

// ByProductAttributes orders the results by productAttributes terms.
func ByProductAttributes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductAttributesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductAttributesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductAttributesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductAttributesTable, ProductAttributesColumn),
	)
}
