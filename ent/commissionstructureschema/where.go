// Code generated by ent, DO NOT EDIT.

package commissionstructureschema

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldDescription, v))
}

// CommissionValue applies equality check predicate on the "commissionValue" field. It's identical to CommissionValueEQ.
func CommissionValue(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldCommissionValue, v))
}

// CommissionPercentage applies equality check predicate on the "commissionPercentage" field. It's identical to CommissionPercentageEQ.
func CommissionPercentage(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldCommissionPercentage, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContainsFold(FieldDescription, v))
}

// CommissionValueEQ applies the EQ predicate on the "commissionValue" field.
func CommissionValueEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldCommissionValue, v))
}

// CommissionValueNEQ applies the NEQ predicate on the "commissionValue" field.
func CommissionValueNEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNEQ(FieldCommissionValue, v))
}

// CommissionValueIn applies the In predicate on the "commissionValue" field.
func CommissionValueIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldIn(FieldCommissionValue, vs...))
}

// CommissionValueNotIn applies the NotIn predicate on the "commissionValue" field.
func CommissionValueNotIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNotIn(FieldCommissionValue, vs...))
}

// CommissionValueGT applies the GT predicate on the "commissionValue" field.
func CommissionValueGT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGT(FieldCommissionValue, v))
}

// CommissionValueGTE applies the GTE predicate on the "commissionValue" field.
func CommissionValueGTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGTE(FieldCommissionValue, v))
}

// CommissionValueLT applies the LT predicate on the "commissionValue" field.
func CommissionValueLT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLT(FieldCommissionValue, v))
}

// CommissionValueLTE applies the LTE predicate on the "commissionValue" field.
func CommissionValueLTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLTE(FieldCommissionValue, v))
}

// CommissionValueContains applies the Contains predicate on the "commissionValue" field.
func CommissionValueContains(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContains(FieldCommissionValue, v))
}

// CommissionValueHasPrefix applies the HasPrefix predicate on the "commissionValue" field.
func CommissionValueHasPrefix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasPrefix(FieldCommissionValue, v))
}

// CommissionValueHasSuffix applies the HasSuffix predicate on the "commissionValue" field.
func CommissionValueHasSuffix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasSuffix(FieldCommissionValue, v))
}

// CommissionValueEqualFold applies the EqualFold predicate on the "commissionValue" field.
func CommissionValueEqualFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEqualFold(FieldCommissionValue, v))
}

// CommissionValueContainsFold applies the ContainsFold predicate on the "commissionValue" field.
func CommissionValueContainsFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContainsFold(FieldCommissionValue, v))
}

// CommissionPercentageEQ applies the EQ predicate on the "commissionPercentage" field.
func CommissionPercentageEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEQ(FieldCommissionPercentage, v))
}

// CommissionPercentageNEQ applies the NEQ predicate on the "commissionPercentage" field.
func CommissionPercentageNEQ(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNEQ(FieldCommissionPercentage, v))
}

// CommissionPercentageIn applies the In predicate on the "commissionPercentage" field.
func CommissionPercentageIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldIn(FieldCommissionPercentage, vs...))
}

// CommissionPercentageNotIn applies the NotIn predicate on the "commissionPercentage" field.
func CommissionPercentageNotIn(vs ...string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldNotIn(FieldCommissionPercentage, vs...))
}

// CommissionPercentageGT applies the GT predicate on the "commissionPercentage" field.
func CommissionPercentageGT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGT(FieldCommissionPercentage, v))
}

// CommissionPercentageGTE applies the GTE predicate on the "commissionPercentage" field.
func CommissionPercentageGTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldGTE(FieldCommissionPercentage, v))
}

// CommissionPercentageLT applies the LT predicate on the "commissionPercentage" field.
func CommissionPercentageLT(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLT(FieldCommissionPercentage, v))
}

// CommissionPercentageLTE applies the LTE predicate on the "commissionPercentage" field.
func CommissionPercentageLTE(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldLTE(FieldCommissionPercentage, v))
}

// CommissionPercentageContains applies the Contains predicate on the "commissionPercentage" field.
func CommissionPercentageContains(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContains(FieldCommissionPercentage, v))
}

// CommissionPercentageHasPrefix applies the HasPrefix predicate on the "commissionPercentage" field.
func CommissionPercentageHasPrefix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasPrefix(FieldCommissionPercentage, v))
}

// CommissionPercentageHasSuffix applies the HasSuffix predicate on the "commissionPercentage" field.
func CommissionPercentageHasSuffix(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldHasSuffix(FieldCommissionPercentage, v))
}

// CommissionPercentageEqualFold applies the EqualFold predicate on the "commissionPercentage" field.
func CommissionPercentageEqualFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldEqualFold(FieldCommissionPercentage, v))
}

// CommissionPercentageContainsFold applies the ContainsFold predicate on the "commissionPercentage" field.
func CommissionPercentageContainsFold(v string) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(sql.FieldContainsFold(FieldCommissionPercentage, v))
}

// HasProductSeller applies the HasEdge predicate on the "productSeller" edge.
func HasProductSeller() predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductSellerTable, ProductSellerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductSellerWith applies the HasEdge predicate on the "productSeller" edge with a given conditions (other predicates).
func HasProductSellerWith(preds ...predicate.UserSeller) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(func(s *sql.Selector) {
		step := newProductSellerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommissionStructureSchema) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommissionStructureSchema) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommissionStructureSchema) predicate.CommissionStructureSchema {
	return predicate.CommissionStructureSchema(func(s *sql.Selector) {
		p(s.Not())
	})
}
