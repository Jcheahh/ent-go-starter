// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/blogpost"
	"entdemo/ent/category"
	"entdemo/ent/chat"
	"entdemo/ent/commissionstructureschema"
	"entdemo/ent/emailcampaign"
	"entdemo/ent/groupbuy"
	"entdemo/ent/image"
	"entdemo/ent/marketingcampaign"
	"entdemo/ent/product"
	"entdemo/ent/productattribute"
	"entdemo/ent/productpageview"
	"entdemo/ent/productvariation"
	"entdemo/ent/review"
	"entdemo/ent/shop"
	"entdemo/ent/tag"
	"entdemo/ent/userseller"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductCreate) SetDescription(s string) *ProductCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetPrice sets the "price" field.
func (pc *ProductCreate) SetPrice(s string) *ProductCreate {
	pc.mutation.SetPrice(s)
	return pc
}

// SetDateCreated sets the "dateCreated" field.
func (pc *ProductCreate) SetDateCreated(s string) *ProductCreate {
	pc.mutation.SetDateCreated(s)
	return pc
}

// SetDateUpdated sets the "dateUpdated" field.
func (pc *ProductCreate) SetDateUpdated(s string) *ProductCreate {
	pc.mutation.SetDateUpdated(s)
	return pc
}

// AddProductSellerIDs adds the "productSeller" edge to the UserSeller entity by IDs.
func (pc *ProductCreate) AddProductSellerIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductSellerIDs(ids...)
	return pc
}

// AddProductSeller adds the "productSeller" edges to the UserSeller entity.
func (pc *ProductCreate) AddProductSeller(u ...*UserSeller) *ProductCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddProductSellerIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pc *ProductCreate) AddReviewIDs(ids ...int) *ProductCreate {
	pc.mutation.AddReviewIDs(ids...)
	return pc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pc *ProductCreate) AddReviews(r ...*Review) *ProductCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReviewIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (pc *ProductCreate) AddImageIDs(ids ...int) *ProductCreate {
	pc.mutation.AddImageIDs(ids...)
	return pc
}

// AddImages adds the "images" edges to the Image entity.
func (pc *ProductCreate) AddImages(i ...*Image) *ProductCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddImageIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (pc *ProductCreate) AddCategoryIDs(ids ...int) *ProductCreate {
	pc.mutation.AddCategoryIDs(ids...)
	return pc
}

// AddCategories adds the "categories" edges to the Category entity.
func (pc *ProductCreate) AddCategories(c ...*Category) *ProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCategoryIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pc *ProductCreate) AddTagIDs(ids ...int) *ProductCreate {
	pc.mutation.AddTagIDs(ids...)
	return pc
}

// AddTags adds the "tags" edges to the Tag entity.
func (pc *ProductCreate) AddTags(t ...*Tag) *ProductCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTagIDs(ids...)
}

// AddProductAttributeIDs adds the "productAttributes" edge to the ProductAttribute entity by IDs.
func (pc *ProductCreate) AddProductAttributeIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductAttributeIDs(ids...)
	return pc
}

// AddProductAttributes adds the "productAttributes" edges to the ProductAttribute entity.
func (pc *ProductCreate) AddProductAttributes(p ...*ProductAttribute) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductAttributeIDs(ids...)
}

// AddVariationIDs adds the "variations" edge to the ProductVariation entity by IDs.
func (pc *ProductCreate) AddVariationIDs(ids ...int) *ProductCreate {
	pc.mutation.AddVariationIDs(ids...)
	return pc
}

// AddVariations adds the "variations" edges to the ProductVariation entity.
func (pc *ProductCreate) AddVariations(p ...*ProductVariation) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddVariationIDs(ids...)
}

// AddCommissionStructureIDs adds the "commissionStructure" edge to the CommissionStructureSchema entity by IDs.
func (pc *ProductCreate) AddCommissionStructureIDs(ids ...int) *ProductCreate {
	pc.mutation.AddCommissionStructureIDs(ids...)
	return pc
}

// AddCommissionStructure adds the "commissionStructure" edges to the CommissionStructureSchema entity.
func (pc *ProductCreate) AddCommissionStructure(c ...*CommissionStructureSchema) *ProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCommissionStructureIDs(ids...)
}

// AddShopIDs adds the "shop" edge to the Shop entity by IDs.
func (pc *ProductCreate) AddShopIDs(ids ...int) *ProductCreate {
	pc.mutation.AddShopIDs(ids...)
	return pc
}

// AddShop adds the "shop" edges to the Shop entity.
func (pc *ProductCreate) AddShop(s ...*Shop) *ProductCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddShopIDs(ids...)
}

// AddGroupBuyIDs adds the "groupBuys" edge to the GroupBuy entity by IDs.
func (pc *ProductCreate) AddGroupBuyIDs(ids ...int) *ProductCreate {
	pc.mutation.AddGroupBuyIDs(ids...)
	return pc
}

// AddGroupBuys adds the "groupBuys" edges to the GroupBuy entity.
func (pc *ProductCreate) AddGroupBuys(g ...*GroupBuy) *ProductCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddGroupBuyIDs(ids...)
}

// AddProductPageViewIDs adds the "productPageViews" edge to the ProductPageView entity by IDs.
func (pc *ProductCreate) AddProductPageViewIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductPageViewIDs(ids...)
	return pc
}

// AddProductPageViews adds the "productPageViews" edges to the ProductPageView entity.
func (pc *ProductCreate) AddProductPageViews(p ...*ProductPageView) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductPageViewIDs(ids...)
}

// AddBlogPostIDs adds the "blogPosts" edge to the BlogPost entity by IDs.
func (pc *ProductCreate) AddBlogPostIDs(ids ...int) *ProductCreate {
	pc.mutation.AddBlogPostIDs(ids...)
	return pc
}

// AddBlogPosts adds the "blogPosts" edges to the BlogPost entity.
func (pc *ProductCreate) AddBlogPosts(b ...*BlogPost) *ProductCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBlogPostIDs(ids...)
}

// AddMarketingCampaignIDs adds the "marketingCampaigns" edge to the MarketingCampaign entity by IDs.
func (pc *ProductCreate) AddMarketingCampaignIDs(ids ...int) *ProductCreate {
	pc.mutation.AddMarketingCampaignIDs(ids...)
	return pc
}

// AddMarketingCampaigns adds the "marketingCampaigns" edges to the MarketingCampaign entity.
func (pc *ProductCreate) AddMarketingCampaigns(m ...*MarketingCampaign) *ProductCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pc.AddMarketingCampaignIDs(ids...)
}

// AddChatIDs adds the "chats" edge to the Chat entity by IDs.
func (pc *ProductCreate) AddChatIDs(ids ...int) *ProductCreate {
	pc.mutation.AddChatIDs(ids...)
	return pc
}

// AddChats adds the "chats" edges to the Chat entity.
func (pc *ProductCreate) AddChats(c ...*Chat) *ProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddChatIDs(ids...)
}

// AddEmailCampaignIDs adds the "emailCampaign" edge to the EmailCampaign entity by IDs.
func (pc *ProductCreate) AddEmailCampaignIDs(ids ...int) *ProductCreate {
	pc.mutation.AddEmailCampaignIDs(ids...)
	return pc
}

// AddEmailCampaign adds the "emailCampaign" edges to the EmailCampaign entity.
func (pc *ProductCreate) AddEmailCampaign(e ...*EmailCampaign) *ProductCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddEmailCampaignIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	return withHooks[*Product, ProductMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Product.name"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Product.description"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Product.price"`)}
	}
	if _, ok := pc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "Product.dateCreated"`)}
	}
	if _, ok := pc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "dateUpdated", err: errors.New(`ent: missing required field "Product.dateUpdated"`)}
	}
	if len(pc.mutation.ShopIDs()) == 0 {
		return &ValidationError{Name: "shop", err: errors.New(`ent: missing required edge "Product.shop"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeString, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.DateCreated(); ok {
		_spec.SetField(product.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := pc.mutation.DateUpdated(); ok {
		_spec.SetField(product.FieldDateUpdated, field.TypeString, value)
		_node.DateUpdated = value
	}
	if nodes := pc.mutation.ProductSellerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductSellerTable,
			Columns: []string{product.ProductSellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userseller.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CategoriesTable,
			Columns: []string{product.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: []string{product.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductAttributesTable,
			Columns: []string{product.ProductAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productattribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.VariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.VariationsTable,
			Columns: []string{product.VariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CommissionStructureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CommissionStructureTable,
			Columns: []string{product.CommissionStructureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commissionstructureschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShopTable,
			Columns: []string{product.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.GroupBuysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.GroupBuysTable,
			Columns: []string{product.GroupBuysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupbuy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductPageViewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPageViewsTable,
			Columns: []string{product.ProductPageViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpageview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BlogPostsTable,
			Columns: []string{product.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MarketingCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MarketingCampaignsTable,
			Columns: []string{product.MarketingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(marketingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ChatsTable,
			Columns: []string{product.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EmailCampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.EmailCampaignTable,
			Columns: []string{product.EmailCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
